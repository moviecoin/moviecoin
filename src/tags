!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABOUTDIALOG_H	qt/aboutdialog.h	2;"	d
ADDRESSBOOKPAGE_H	qt/addressbookpage.h	2;"	d
ADDRESSTABLEMODEL_H	qt/addresstablemodel.h	2;"	d
ADDRMAN_GETADDR_MAX	addrman.h	162;"	d
ADDRMAN_GETADDR_MAX_PCT	addrman.h	159;"	d
ADDRMAN_HORIZON_DAYS	addrman.h	147;"	d
ADDRMAN_MAX_FAILURES	addrman.h	153;"	d
ADDRMAN_MIN_FAIL_DAYS	addrman.h	156;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	addrman.h	141;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	addrman.h	138;"	d
ADDRMAN_NEW_BUCKET_COUNT	addrman.h	129;"	d
ADDRMAN_NEW_BUCKET_SIZE	addrman.h	132;"	d
ADDRMAN_RETRIES	addrman.h	150;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	addrman.h	135;"	d
ADDRMAN_TRIED_BUCKET_COUNT	addrman.h	123;"	d
ADDRMAN_TRIED_BUCKET_SIZE	addrman.h	126;"	d
ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT	addrman.h	144;"	d
ALL_TYPES	qt/transactionfilterproxy.h	/^    static const quint32 ALL_TYPES = 0xFFFFFFFF;$/;"	m	class:TransactionFilterProxy
APPLY	ui_interface.h	/^        APPLY                 = 0x00000020,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ARRAYLEN	util.h	44;"	d
ASKPASSPHRASEDIALOG_H	qt/askpassphrasedialog.h	2;"	d
AbortMessage	net.h	/^    void AbortMessage()$/;"	f	class:CNode
Aborted	qt/walletmodel.h	/^        Aborted$/;"	e	enum:WalletModel::StatusCode
AboutDialog	qt/aboutdialog.cpp	/^AboutDialog::AboutDialog(QWidget *parent) :$/;"	f	class:AboutDialog
AboutDialog	qt/aboutdialog.h	/^class AboutDialog : public QDialog$/;"	c
AcceptBlock	main.cpp	/^bool CBlock::AcceptBlock()$/;"	f	class:CBlock
AcceptToMemoryPool	main.cpp	/^bool CMerkleTx::AcceptToMemoryPool()$/;"	f	class:CMerkleTx
AcceptToMemoryPool	main.cpp	/^bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CMerkleTx
AcceptToMemoryPool	main.cpp	/^bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)$/;"	f	class:CTransaction
AcceptWalletTransaction	main.cpp	/^bool CWalletTx::AcceptWalletTransaction()$/;"	f	class:CWalletTx
AcceptWalletTransaction	main.cpp	/^bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CWalletTx
AcceptedConnection	bitcoinrpc.cpp	/^class AcceptedConnection$/;"	c	file:
AcceptedConnectionImpl	bitcoinrpc.cpp	/^    AcceptedConnectionImpl($/;"	f	class:AcceptedConnectionImpl
AcceptedConnectionImpl	bitcoinrpc.cpp	/^class AcceptedConnectionImpl : public AcceptedConnection$/;"	c	file:
AccountFromValue	bitcoinrpc.cpp	/^string AccountFromValue(const Value& value)$/;"	f
AcentryToJSON	bitcoinrpc.cpp	/^void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)$/;"	f
Acquire	sync.h	/^    void Acquire() {$/;"	f	class:CSemaphoreGrant
Add	addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddCScript	keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddCryptedKey	keystore.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	keystore.cpp	/^bool CBasicKeyStore::AddKey(const CKey& key)$/;"	f	class:CBasicKeyStore
AddKey	keystore.cpp	/^bool CCryptoKeyStore::AddKey(const CKey& key)$/;"	f	class:CCryptoKeyStore
AddKey	wallet.cpp	/^bool CWallet::AddKey(const CKey& key)$/;"	f	class:CWallet
AddLocal	net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddOneShot	net.cpp	/^void AddOneShot(string strDest)$/;"	f
AddOrphanTx	main.cpp	/^bool AddOrphanTx(const CDataStream& vMsg)$/;"	f
AddRef	net.h	/^    CNode* AddRef(int64 nTimeout=0)$/;"	f	class:CNode
AddReserveKey	wallet.cpp	/^int64 CWallet::AddReserveKey(const CKeyPool& keypool)$/;"	f	class:CWallet
AddSupportingTransactions	wallet.cpp	/^void CWalletTx::AddSupportingTransactions(CTxDB& txdb)$/;"	f	class:CWalletTx
AddTimeData	util.cpp	/^void AddTimeData(const CNetAddr& ip, int64 nTime)$/;"	f
AddToBlockIndex	main.cpp	/^bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)$/;"	f	class:CBlock
AddToWallet	wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fFindBlock)$/;"	f	class:CWallet
AddTxIndex	db.cpp	/^bool CTxDB::AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight)$/;"	f	class:CTxDB
Add_	addrman.cpp	/^bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty)$/;"	f	class:CAddrMan
Address	qt/addresstablemodel.h	/^        Address = 1  \/**< Bitcoin address *\/$/;"	e	enum:AddressTableModel::ColumnIndex
AddressBookPage	qt/addressbookpage.cpp	/^AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :$/;"	f	class:AddressBookPage
AddressBookPage	qt/addressbookpage.h	/^class AddressBookPage : public QDialog$/;"	c
AddressCurrentlyConnected	net.cpp	/^void AddressCurrentlyConnected(const CService& addr)$/;"	f
AddressRole	qt/transactiontablemodel.h	/^        AddressRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AddressTableEntry	qt/addresstablemodel.cpp	/^    AddressTableEntry() {}$/;"	f	struct:AddressTableEntry
AddressTableEntry	qt/addresstablemodel.cpp	/^    AddressTableEntry(Type type, const QString &label, const QString &address):$/;"	f	struct:AddressTableEntry
AddressTableEntry	qt/addresstablemodel.cpp	/^struct AddressTableEntry$/;"	s	file:
AddressTableEntryLessThan	qt/addresstablemodel.cpp	/^struct AddressTableEntryLessThan$/;"	s	file:
AddressTableModel	qt/addresstablemodel.cpp	/^AddressTableModel::AddressTableModel(CWallet *wallet, WalletModel *parent) :$/;"	f	class:AddressTableModel
AddressTableModel	qt/addresstablemodel.h	/^class AddressTableModel : public QAbstractTableModel$/;"	c
AddressTablePriv	qt/addresstablemodel.cpp	/^    AddressTablePriv(CWallet *wallet, AddressTableModel *parent):$/;"	f	class:AddressTablePriv
AddressTablePriv	qt/addresstablemodel.cpp	/^class AddressTablePriv$/;"	c	file:
AdvertizeLocal	net.cpp	/^void static AdvertizeLocal()$/;"	f	file:
All	qt/transactionview.h	/^        All,$/;"	e	enum:TransactionView::DateEnum
AllowFree	main.h	/^    static bool AllowFree(double dPriority)$/;"	f	class:CTransaction
AlreadyHave	main.cpp	/^bool static AlreadyHave(CTxDB& txdb, const CInv& inv)$/;"	f	file:
Amount	qt/transactiontablemodel.h	/^        Amount = 4$/;"	e	enum:TransactionTableModel::ColumnIndex
AmountExceedsBalance	qt/walletmodel.h	/^        AmountExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AmountFromValue	bitcoinrpc.cpp	/^int64 AmountFromValue(const Value& value)$/;"	f
AmountRole	qt/transactiontablemodel.h	/^        AmountRole,$/;"	e	enum:TransactionTableModel::RoleIndex
AmountWithFeeExceedsBalance	qt/walletmodel.h	/^        AmountWithFeeExceedsBalance,$/;"	e	enum:WalletModel::StatusCode
AppInit	init.cpp	/^bool AppInit(int argc, char* argv[])$/;"	f
AppInit2	init.cpp	/^bool AppInit2()$/;"	f
AppendBlockFile	main.cpp	/^FILE* AppendBlockFile(unsigned int& nFileRet)$/;"	f
AppliesTo	main.h	/^    bool AppliesTo(int nVersion, std::string strSubVerIn) const$/;"	f	class:CAlert
AppliesToMe	main.h	/^    bool AppliesToMe() const$/;"	f	class:CAlert
ApplyProxySettings	qt/optionsmodel.cpp	/^bool static ApplyProxySettings()$/;"	f	file:
ApproximateBestSubset	wallet.cpp	/^static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsigned int> > >vValue, int64 nTotalLower, int64 nTargetValue,$/;"	f	file:
AreInputsStandard	main.cpp	/^bool CTransaction::AreInputsStandard(const MapPrevTx& mapInputs) const$/;"	f	class:CTransaction
Array	json/json_spirit_value.h	/^        typedef typename Config::Array_type Array;$/;"	t	class:json_spirit::Value_impl
Array	json/json_spirit_value.h	/^    typedef Config::Array_type  Array;$/;"	t	namespace:json_spirit
Array_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Semantic_actions
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_map
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_vector
Array_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Generator
AskFor	net.h	/^    void AskFor(const CInv& inv)$/;"	f	class:CNode
AskPassphraseDialog	qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :$/;"	f	class:AskPassphraseDialog
AskPassphraseDialog	qt/askpassphrasedialog.h	/^class AskPassphraseDialog : public QDialog$/;"	c
Attempt	addrman.h	/^    void Attempt(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Attempt_	addrman.cpp	/^void CAddrMan::Attempt_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
AvailableCoins	wallet.cpp	/^void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const$/;"	f	class:CWallet
BACKWARD	ui_interface.h	/^        BACKWARD              = 0x00002000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BEGIN	util.h	40;"	d
BIP0031_VERSION	version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BITCOINADDRESSVALIDATOR_H	qt/bitcoinaddressvalidator.h	2;"	d
BITCOINFIELD_H	qt/bitcoinamountfield.h	2;"	d
BITCOINGUI_H	qt/bitcoingui.h	2;"	d
BITCOINUNITS_H	qt/bitcoinunits.h	2;"	d
BITCOINURI_QUEUE_NAME	qt/qtipcserver.h	5;"	d
BITCOIN_ALLOCATORS_H	allocators.h	7;"	d
BITCOIN_BASE58_H	base58.h	18;"	d
BITCOIN_BIGNUM_H	bignum.h	7;"	d
BITCOIN_CHECKPOINT_H	checkpoints.h	6;"	d
BITCOIN_DB_H	db.h	7;"	d
BITCOIN_INIT_H	init.h	7;"	d
BITCOIN_IRC_H	irc.h	7;"	d
BITCOIN_KEYSTORE_H	keystore.h	7;"	d
BITCOIN_KEY_H	key.h	7;"	d
BITCOIN_MAIN_H	main.h	8;"	d
BITCOIN_MRUSET_H	mruset.h	6;"	d
BITCOIN_NETBASE_H	netbase.h	6;"	d
BITCOIN_NET_H	net.h	7;"	d
BITCOIN_SERIALIZE_H	serialize.h	7;"	d
BITCOIN_STRLCPY_H	strlcpy.h	17;"	d
BITCOIN_SYNC_H	sync.h	7;"	d
BITCOIN_UINT256_H	uint256.h	7;"	d
BITCOIN_UI_INTERFACE_H	ui_interface.h	7;"	d
BITCOIN_UTIL_H	util.h	7;"	d
BITCOIN_VERSION_H	version.h	6;"	d
BITCOIN_WALLETDB_H	walletdb.h	7;"	d
BITCOIN_WALLET_H	wallet.h	7;"	d
BITS_PER_SAMPLE	qt/notificator.cpp	/^const int BITS_PER_SAMPLE = 8;$/;"	v
BOOST_AUTO_TEST_CASE	test/Checkpoints_tests.cpp	/^BOOST_AUTO_TEST_CASE(sanity)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banning)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banscore)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_bantime)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_checkSig)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_checknbits)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_mapOrphans)$/;"	f
BOOST_AUTO_TEST_CASE	test/base32_tests.cpp	/^BOOST_AUTO_TEST_CASE(base32_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_DecodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_EncodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base64_tests.cpp	/^BOOST_AUTO_TEST_CASE(base64_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/bignum_tests.cpp	/^BOOST_AUTO_TEST_CASE(bignum_setint64)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolargno)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubledash)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(intarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(stringarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_test1)$/;"	f
BOOST_AUTO_TEST_CASE	test/miner_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256transform_equality)$/;"	f
BOOST_AUTO_TEST_CASE	test/mruset_tests.cpp	/^BOOST_AUTO_TEST_CASE(mruset_like_set)$/;"	f
BOOST_AUTO_TEST_CASE	test/mruset_tests.cpp	/^BOOST_AUTO_TEST_CASE(mruset_limited_size)$/;"	f
BOOST_AUTO_TEST_CASE	test/mruset_tests.cpp	/^BOOST_AUTO_TEST_CASE(mruset_window)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Solver1)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_verify)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_networks)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_properties)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_splithost)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(onioncat_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(AreInputsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(is)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(norecurse)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(set)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(switchover)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_combineSigs)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_valid)$/;"	f
BOOST_AUTO_TEST_CASE	test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetSigOpCount)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Get)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_GetThrow)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint160_tests.cpp	/^BOOST_AUTO_TEST_CASE(uint160_equality)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(uint256_equality)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetArg)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_HexStr)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_MedianFilter)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseParameters)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_WildcardMatch)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_criticalsection)$/;"	f
BOOST_AUTO_TEST_CASE	test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(coin_selection_tests)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_tests.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_addmultisig, TestNetFixture)$/;"	f
BOOST_TEST_MODULE	test/test_bitcoin.cpp	1;"	d	file:
BTC	qt/bitcoinunits.h	/^        BTC,$/;"	e	enum:BitcoinUnits::Unit
BUILD_DATE	obj/build.h	2;"	d
BUILD_DATE	version.cpp	61;"	d	file:
BUILD_DATE	version.cpp	63;"	d	file:
BUILD_DESC	version.cpp	53;"	d	file:
BUILD_DESC	version.cpp	55;"	d	file:
BUILD_DESC_FROM_COMMIT	version.cpp	45;"	d	file:
BUILD_DESC_FROM_UNKNOWN	version.cpp	48;"	d	file:
BYTES_PER_PIXEL	qt/notificator.cpp	/^const int BYTES_PER_PIXEL = 4;$/;"	v
BackupWallet	walletdb.cpp	/^bool BackupWallet(const CWallet& wallet, const string& strDest)$/;"	f
BeginMessage	net.h	/^    void BeginMessage(const char* pszCommand)$/;"	f	class:CNode
Bind	init.cpp	/^bool static Bind(const CService &addr, bool fError = true) {$/;"	f	file:
BindListenPort	net.cpp	/^bool BindListenPort(const CService &addrBind, string& strError)$/;"	f
BindWallet	wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BitcoinAddressValidator	qt/bitcoinaddressvalidator.cpp	/^BitcoinAddressValidator::BitcoinAddressValidator(QObject *parent) :$/;"	f	class:BitcoinAddressValidator
BitcoinAddressValidator	qt/bitcoinaddressvalidator.h	/^class BitcoinAddressValidator : public QValidator$/;"	c
BitcoinAmountField	qt/bitcoinamountfield.cpp	/^BitcoinAmountField::BitcoinAmountField(QWidget *parent):$/;"	f	class:BitcoinAmountField
BitcoinAmountField	qt/bitcoinamountfield.h	/^class BitcoinAmountField: public QWidget$/;"	c
BitcoinGUI	qt/bitcoingui.cpp	/^BitcoinGUI::BitcoinGUI(QWidget *parent):$/;"	f	class:BitcoinGUI
BitcoinGUI	qt/bitcoingui.h	/^class BitcoinGUI : public QMainWindow$/;"	c
BitcoinMiner	main.cpp	/^void static BitcoinMiner(CWallet *pwallet)$/;"	f	file:
BitcoinUnit	qt/bitcoinunits.h	/^typedef BitcoinUnits::Unit BitcoinUnit;$/;"	t
BitcoinUnits	qt/bitcoinunits.cpp	/^BitcoinUnits::BitcoinUnits(QObject *parent):$/;"	f	class:BitcoinUnits
BitcoinUnits	qt/bitcoinunits.h	/^class BitcoinUnits: public QAbstractListModel$/;"	c
BuildMerkleTree	main.h	/^    uint256 BuildMerkleTree() const$/;"	f	class:CBlock
ByteReverse	util.h	/^inline uint32_t ByteReverse(uint32_t value)$/;"	f
CADDR_TIME_VERSION	version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CANCEL	ui_interface.h	/^        CANCEL                = 0x00000010,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CANCEL_DEFAULT	ui_interface.h	/^        CANCEL_DEFAULT        = 0x80000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CAccount	wallet.h	/^    CAccount()$/;"	f	class:CAccount
CAccount	wallet.h	/^class CAccount$/;"	c
CAccountingEntry	wallet.h	/^    CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	wallet.h	/^class CAccountingEntry$/;"	c
CAddrDB	db.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	db.h	/^class CAddrDB$/;"	c
CAddrInfo	addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	addrman.h	/^    CAddrMan() : vRandom(0), vvTried(ADDRMAN_TRIED_BUCKET_COUNT, std::vector<int>(0)), vvNew(ADDRMAN_NEW_BUCKET_COUNT, std::set<int>())$/;"	f	class:CAddrMan
CAddrMan	addrman.h	/^class CAddrMan$/;"	c
CAddress	protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(CService ipIn, uint64 nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress : public CService$/;"	c
CAlert	main.h	/^    CAlert()$/;"	f	class:CAlert
CAlert	main.h	/^class CAlert : public CUnsignedAlert$/;"	c
CAutoBN_CTX	bignum.h	/^    CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
CAutoBN_CTX	bignum.h	/^class CAutoBN_CTX$/;"	c
CAutoFile	serialize.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	serialize.h	/^class CAutoFile$/;"	c
CBase58Data	base58.h	/^    CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBigNum	bignum.h	/^    CBigNum()$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(const CBigNum& b)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int64 n)            { BN_init(this); setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(signed char n)      { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned char n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned int n)     { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned long n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned short n)   { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^class CBigNum : public BIGNUM$/;"	c
CBitcoinAddress	base58.h	/^    CBitcoinAddress()$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const CTxDestination &dest)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const char* pszAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const std::string& strAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^class CBitcoinAddress : public CBase58Data$/;"	c
CBitcoinAddressVisitor	base58.h	/^    CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }$/;"	f	class:CBitcoinAddressVisitor
CBitcoinAddressVisitor	base58.h	/^class CBitcoinAddressVisitor : public boost::static_visitor<bool>$/;"	c
CBitcoinSecret	base58.h	/^    CBitcoinSecret()$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^    CBitcoinSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^class CBitcoinSecret : public CBase58Data$/;"	c
CBlock	main.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	main.h	/^class CBlock$/;"	c
CBlockIndex	main.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	main.h	/^    CBlockIndex(unsigned int nFileIn, unsigned int nBlockPosIn, CBlock& block)$/;"	f	class:CBlockIndex
CBlockIndex	main.h	/^class CBlockIndex$/;"	c
CBlockLocator	main.h	/^    CBlockLocator()$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^    CBlockLocator(const std::vector<uint256>& vHaveIn)$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^    explicit CBlockLocator(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^    explicit CBlockLocator(uint256 hashBlock)$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^class CBlockLocator$/;"	c
CClientUIInterface	ui_interface.h	/^class CClientUIInterface$/;"	c
CCorruptAddress	wallet.cpp	/^class CCorruptAddress$/;"	c	file:
CCriticalBlock	sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	sync.h	/^typedef boost::recursive_mutex CCriticalSection;$/;"	t
CCrypter	crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	keystore.h	/^    CCryptoKeyStore() : fUseCrypto(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	keystore.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDB	db.cpp	/^CDB::CDB(const char *pszFile, const char* pszMode) :$/;"	f	class:CDB
CDB	db.h	/^class CDB$/;"	c
CDBEnv	db.cpp	/^CDBEnv::CDBEnv() : dbenv(0)$/;"	f	class:CDBEnv
CDBEnv	db.h	/^class CDBEnv$/;"	c
CDataStream	serialize.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^class CDataStream$/;"	c
CDiskBlockIndex	main.h	/^    CDiskBlockIndex()$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	main.h	/^    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex)$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	main.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	main.h	/^    CDiskTxPos()$/;"	f	class:CDiskTxPos
CDiskTxPos	main.h	/^    CDiskTxPos(unsigned int nFileIn, unsigned int nBlockPosIn, unsigned int nTxPosIn)$/;"	f	class:CDiskTxPos
CDiskTxPos	main.h	/^class CDiskTxPos$/;"	c
CENT	util.h	/^static const int64 CENT = 1000000;$/;"	v
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CHANNELS	qt/notificator.cpp	/^const int CHANNELS = 4;$/;"	v
CHECKSUM_OFFSET	protocol.h	/^            CHECKSUM_OFFSET=MESSAGE_SIZE_OFFSET+MESSAGE_SIZE_SIZE$/;"	e	enum:CMessageHeader::__anon6
CHECKSUM_SIZE	protocol.h	/^            CHECKSUM_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon6
CHashWriter	util.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {$/;"	f	class:CHashWriter
CHashWriter	util.h	/^class CHashWriter$/;"	c
CInPoint	main.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	main.h	/^    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	main.h	/^class CInPoint$/;"	c
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.h	/^class CInv$/;"	c
CKey	key.cpp	/^CKey::CKey()$/;"	f	class:CKey
CKey	key.cpp	/^CKey::CKey(const CKey& b)$/;"	f	class:CKey
CKey	key.h	/^class CKey$/;"	c
CKeyID	key.h	/^    CKeyID() : uint160(0) { }$/;"	f	class:CKeyID
CKeyID	key.h	/^    CKeyID(const uint160 &in) : uint160(in) { }$/;"	f	class:CKeyID
CKeyID	key.h	/^class CKeyID : public uint160$/;"	c
CKeyPool	wallet.h	/^    CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	wallet.h	/^    CKeyPool(const CPubKey& vchPubKeyIn)$/;"	f	class:CKeyPool
CKeyPool	wallet.h	/^class CKeyPool$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyStoreIsMineVisitor	script.cpp	/^    CKeyStoreIsMineVisitor(const CKeyStore *keystoreIn) : keystore(keystoreIn) { }$/;"	f	class:CKeyStoreIsMineVisitor
CKeyStoreIsMineVisitor	script.cpp	/^class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>$/;"	c	file:
CKeyingMaterial	crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLIENTMODEL_H	qt/clientmodel.h	2;"	d
CLIENT_VERSION	version.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	version.h	18;"	d
CLIENT_VERSION_MAJOR	version.h	15;"	d
CLIENT_VERSION_MINOR	version.h	16;"	d
CLIENT_VERSION_REVISION	version.h	17;"	d
CLIENT_VERSION_SUFFIX	version.cpp	15;"	d	file:
CLOSE	ui_interface.h	/^        CLOSE                 = 0x00000040,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CLockLocation	sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine)$/;"	f	struct:CLockLocation
CLockLocation	sync.cpp	/^struct CLockLocation$/;"	s	file:
CMD_ERROR	qt/rpcconsole.h	/^        CMD_ERROR$/;"	e	enum:RPCConsole::MessageClass
CMD_REPLY	qt/rpcconsole.h	/^        CMD_REPLY,$/;"	e	enum:RPCConsole::MessageClass
CMD_REQUEST	qt/rpcconsole.h	/^        CMD_REQUEST,$/;"	e	enum:RPCConsole::MessageClass
CMasterKey	crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	util.h	/^    CMedianFilter(unsigned int size, T initial_value):$/;"	f	class:CMedianFilter
CMedianFilter	util.h	/^template <typename T> class CMedianFilter$/;"	c
CMerkleTx	main.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader()$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMutexLock	sync.h	/^    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
CMutexLock	sync.h	/^class CMutexLock$/;"	c
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.h	/^class CNetAddr$/;"	c
CNetCleanup	net.cpp	/^    CNetCleanup()$/;"	f	class:CNetCleanup
CNetCleanup	net.cpp	/^class CNetCleanup$/;"	c	file:
CNoDestination	script.h	/^class CNoDestination {$/;"	c
CNode	net.h	/^    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = "", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
CNodeStats	net.h	/^class CNodeStats$/;"	c
COIN	util.h	/^static const int64 COIN = 100000000;$/;"	v
COINBASE_FLAGS	main.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	main.h	/^static const int COINBASE_MATURITY = 30;$/;"	v
COLOR_BAREADDRESS	qt/guiconstants.h	21;"	d
COLOR_NEGATIVE	qt/guiconstants.h	19;"	d
COLOR_UNCONFIRMED	qt/guiconstants.h	17;"	d
COMMAND_SIZE	protocol.h	/^            COMMAND_SIZE=12,$/;"	e	enum:CMessageHeader::__anon6
CONSOLE_HISTORY	qt/rpcconsole.cpp	/^const int CONSOLE_HISTORY = 50;$/;"	v
CONSOLE_SCROLLBACK	qt/rpcconsole.cpp	/^const int CONSOLE_SCROLLBACK = 50;$/;"	v
COrphan	main.cpp	/^    COrphan(CTransaction* ptxIn)$/;"	f	class:COrphan
COrphan	main.cpp	/^class COrphan$/;"	c	file:
COutPoint	main.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	main.h	/^    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	main.h	/^class COutPoint$/;"	c
COutput	wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn)$/;"	f	class:COutput
COutput	wallet.h	/^class COutput$/;"	c
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	key.h	/^    CPubKey() { }$/;"	f	class:CPubKey
CPubKey	key.h	/^    CPubKey(const std::vector<unsigned char> &vchPubKeyIn) : vchPubKey(vchPubKeyIn) { }$/;"	f	class:CPubKey
CPubKey	key.h	/^class CPubKey {$/;"	c
CRPCCommand	bitcoinrpc.h	/^class CRPCCommand$/;"	c
CRPCTable	bitcoinrpc.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	bitcoinrpc.h	/^class CRPCTable$/;"	c
CRequestTracker	net.h	/^    explicit CRequestTracker(void (*fnIn)(void*, CDataStream&)=NULL, void* param1In=NULL)$/;"	f	class:CRequestTracker
CRequestTracker	net.h	/^class CRequestTracker$/;"	c
CReserveKey	wallet.h	/^    CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	wallet.h	/^class CReserveKey$/;"	c
CSVMODELWRITER_H	qt/csvmodelwriter.h	2;"	d
CSVModelWriter	qt/csvmodelwriter.cpp	/^CSVModelWriter::CSVModelWriter(const QString &filename, QObject *parent) :$/;"	f	class:CSVModelWriter
CSVModelWriter	qt/csvmodelwriter.h	/^class CSVModelWriter : public QObject$/;"	c
CScript	script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const CBigNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const uint256& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int b)            { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int64 b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(long b)           { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(short b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(signed char b)    { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(uint64 b)         { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned char b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned int b)   { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned long b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned short b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CScriptID	key.h	/^    CScriptID() : uint160(0) { }$/;"	f	class:CScriptID
CScriptID	key.h	/^    CScriptID(const uint160 &in) : uint160(in) { }$/;"	f	class:CScriptID
CScriptID	key.h	/^class CScriptID : public uint160$/;"	c
CScriptVisitor	script.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:CScriptVisitor
CScriptVisitor	script.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	file:
CSecret	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;$/;"	t
CSemaphore	sync.h	/^    CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionGetSerializeSize	serialize.h	/^class CSerActionGetSerializeSize { };$/;"	c
CSerActionSerialize	serialize.h	/^class CSerActionSerialize { };$/;"	c
CSerActionUnserialize	serialize.h	/^class CSerActionUnserialize { };$/;"	c
CService	netbase.cpp	/^CService::CService()$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	netbase.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	script.cpp	/^class CSignatureCache$/;"	c	file:
CT_DELETED	ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTransaction	main.h	/^    CTransaction()$/;"	f	class:CTransaction
CTransaction	main.h	/^class CTransaction$/;"	c
CTxDB	db.h	/^    CTxDB(const char* pszMode="r+") : CDB("blkindex.dat", pszMode) { }$/;"	f	class:CTxDB
CTxDB	db.h	/^class CTxDB : public CDB$/;"	c
CTxDestination	script.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;$/;"	t
CTxDump	rpcdump.cpp	/^    CTxDump(CWalletTx* ptx = NULL, int nOut = -1)$/;"	f	class:CTxDump
CTxDump	rpcdump.cpp	/^class CTxDump$/;"	c	file:
CTxIn	main.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	main.h	/^    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())$/;"	f	class:CTxIn
CTxIn	main.h	/^    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())$/;"	f	class:CTxIn
CTxIn	main.h	/^class CTxIn$/;"	c
CTxIndex	main.h	/^    CTxIndex()$/;"	f	class:CTxIndex
CTxIndex	main.h	/^    CTxIndex(const CDiskTxPos& posIn, unsigned int nOutputs)$/;"	f	class:CTxIndex
CTxIndex	main.h	/^class CTxIndex$/;"	c
CTxMemPool	main.h	/^class CTxMemPool$/;"	c
CTxOut	main.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	main.h	/^    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	main.h	/^class CTxOut$/;"	c
CURRENT_VERSION	main.h	/^    static const int CURRENT_VERSION = 2;$/;"	m	class:CTransaction
CURRENT_VERSION	main.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBlock
CUnsignedAlert	main.h	/^class CUnsignedAlert$/;"	c
CWaitableCriticalSection	sync.h	/^typedef boost::mutex CWaitableCriticalSection;$/;"	t
CWallet	wallet.h	/^    CWallet()$/;"	f	class:CWallet
CWallet	wallet.h	/^    CWallet(std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	wallet.h	/^class CWallet : public CCryptoKeyStore$/;"	c
CWalletDB	walletdb.h	/^    CWalletDB(std::string strFilename, const char* pszMode="r+") : CDB(strFilename.c_str(), pszMode)$/;"	f	class:CWalletDB
CWalletDB	walletdb.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	wallet.h	/^    CWalletKey(int64 nExpires=0)$/;"	f	class:CWalletKey
CWalletKey	wallet.h	/^class CWalletKey$/;"	c
CWalletTx	wallet.h	/^    CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CallRPC	bitcoinrpc.cpp	/^Object CallRPC(const string& strMethod, const Array& params)$/;"	f
CanSupportFeature	wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }$/;"	f	class:CWallet
Cancels	main.h	/^    bool Cancels(const CAlert& alert) const$/;"	f	class:CAlert
CastToBigNum	script.cpp	/^CBigNum CastToBigNum(const valtype& vch)$/;"	f
CastToBool	script.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
ChangePass	qt/askpassphrasedialog.h	/^        ChangePass, \/**< Ask old passphrase + new passphrase twice *\/$/;"	e	enum:AskPassphraseDialog::Mode
ChangeType	ui_interface.h	/^enum ChangeType$/;"	g
ChangeWalletPassphrase	wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
Char_type	json/json_spirit_reader_template.h	/^        typedef typename Istream_type::char_type Char_type;$/;"	t	struct:json_spirit::Multi_pass_iters
Char_type	json/json_spirit_reader_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Semantic_actions
Char_type	json/json_spirit_writer_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Generator
Check	addrman.h	/^    void Check()$/;"	f	class:CAddrMan
CheckBlock	checkpoints.cpp	/^    bool CheckBlock(int nHeight, const uint256& hash)$/;"	f	namespace:Checkpoints
CheckBlock	main.cpp	/^bool CBlock::CheckBlock() const$/;"	f	class:CBlock
CheckDiskSpace	main.cpp	/^bool CheckDiskSpace(uint64 nAdditionalBytes)$/;"	f
CheckIndex	main.h	/^    bool CheckIndex() const$/;"	f	class:CBlockIndex
CheckMerkleBranch	main.h	/^    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)$/;"	f	class:CBlock
CheckNBits	test/DoS_tests.cpp	/^static bool CheckNBits(unsigned int nbits1, int64 time1, unsigned int nbits2, int64 time2)\\$/;"	f	file:
CheckProofOfWork	main.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits)$/;"	f
CheckSig	script.cpp	/^bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode,$/;"	f
CheckSignature	main.h	/^    bool CheckSignature()$/;"	f	class:CAlert
CheckTransaction	main.cpp	/^bool CTransaction::CheckTransaction() const$/;"	f	class:CTransaction
CheckWork	main.cpp	/^bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)$/;"	f
Check_	addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
CheckpointLSN	db.cpp	/^void CDBEnv::CheckpointLSN(std::string strFile)$/;"	f	class:CDBEnv
Checkpoints	checkpoints.cpp	/^namespace Checkpoints$/;"	n	file:
Checkpoints	checkpoints.h	/^namespace Checkpoints$/;"	n
Class	qt/notificator.h	/^    enum Class$/;"	g	class:Notificator
CleanKey	crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	net.cpp	/^void CNode::Cleanup()$/;"	f	class:CNode
ClearBanned	net.cpp	/^void CNode::ClearBanned()$/;"	f	class:CNode
ClientAllowed	bitcoinrpc.cpp	/^bool ClientAllowed(const boost::asio::ip::address& address)$/;"	f
ClientConnectInputs	main.cpp	/^bool CTransaction::ClientConnectInputs()$/;"	f	class:CTransaction
ClientModel	qt/clientmodel.cpp	/^ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :$/;"	f	class:ClientModel
ClientModel	qt/clientmodel.h	/^class ClientModel : public QObject$/;"	c
Close	db.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	db.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseDb	db.cpp	/^void CDBEnv::CloseDb(const string& strFile)$/;"	f	class:CDBEnv
CloseSocketDisconnect	net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CoinSet	test/wallet_tests.cpp	/^typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;$/;"	t	file:
Column	qt/csvmodelwriter.h	/^    struct Column$/;"	s	class:CSVModelWriter
ColumnIndex	qt/addresstablemodel.h	/^    enum ColumnIndex {$/;"	g	class:AddressTableModel
ColumnIndex	qt/transactiontablemodel.h	/^    enum ColumnIndex {$/;"	g	class:TransactionTableModel
CombineMultisig	script.cpp	/^static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f	file:
CombineSignatures	script.cpp	/^CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f
CombineSignatures	script.cpp	/^static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f	file:
CommandLineRPC	bitcoinrpc.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommitTransaction	wallet.cpp	/^bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)$/;"	f	class:CWallet
Compact	serialize.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompareTo	base58.h	/^    int CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareValueOnly	wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
ComputeMinWork	main.cpp	/^unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)$/;"	f
Config	json/json_spirit_value.h	/^    typedef Config_vector< std::string > Config;$/;"	t	namespace:json_spirit
Config_map	json/json_spirit_value.h	/^    struct Config_map$/;"	s	namespace:json_spirit
Config_type	json/json_spirit_reader_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Semantic_actions
Config_type	json/json_spirit_value.h	/^        typedef Config Config_type;$/;"	t	class:json_spirit::Value_impl
Config_type	json/json_spirit_writer_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Generator
Config_vector	json/json_spirit_value.h	/^    struct Config_vector$/;"	s	namespace:json_spirit
ConfirmedRole	qt/transactiontablemodel.h	/^        ConfirmedRole,$/;"	e	enum:TransactionTableModel::RoleIndex
ConnectBlock	main.cpp	/^bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
ConnectInputs	main.cpp	/^bool CTransaction::ConnectInputs(MapPrevTx inputs,$/;"	f	class:CTransaction
ConnectNode	net.cpp	/^CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)$/;"	f
ConnectSocket	netbase.cpp	/^bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)$/;"	f
ConnectSocketByName	netbase.cpp	/^bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout)$/;"	f
ConnectSocketDirectly	netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f	file:
Connected	addrman.h	/^    void Connected(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	addrman.cpp	/^void CAddrMan::Connected_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
Const_str_ptr	json/json_spirit_value.h	/^        typedef typename String_type::const_pointer Const_str_ptr;  \/\/ eg const char*$/;"	t	class:json_spirit::Value_impl
ContainsTx	db.cpp	/^bool CTxDB::ContainsTx(uint256 hash)$/;"	f	class:CTxDB
ConvertTo	bitcoinrpc.cpp	/^void ConvertTo(Value& value)$/;"	f
CopyFrom	qt/walletmodel.cpp	/^void WalletModel::UnlockContext::CopyFrom(const UnlockContext& rhs)$/;"	f	class:WalletModel::UnlockContext
CopyNodeStats	rpcnet.cpp	/^static void CopyNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	file:
Create	addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId)$/;"	f	class:CAddrMan
CreateNewBlock	main.cpp	/^CBlock* CreateNewBlock(CReserveKey& reservekey)$/;"	f
CreatePidFile	util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CreateThread	util.cpp	/^bool CreateThread(void(*pfn)(void*), void* parg)$/;"	f
CreateThread	util.h	/^inline pthread_t CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
CreateTransaction	wallet.cpp	/^bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string strTxComment)$/;"	f	class:CWallet
CreateTransaction	wallet.cpp	/^bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string strTxComment)$/;"	f	class:CWallet
Critical	qt/notificator.h	/^        Critical             \/**< An error occured *\/$/;"	e	enum:Notificator::Class
CryptedKeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
DBErrors	walletdb.h	/^enum DBErrors$/;"	g
DB_CORRUPT	walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_LOAD_FAIL	walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_TOO_NEW	walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DECORATION_SIZE	qt/overviewpage.cpp	15;"	d	file:
DUPLICATE_ADDRESS	qt/addresstablemodel.h	/^        DUPLICATE_ADDRESS,  \/**< Address already in address book *\/$/;"	e	enum:AddressTableModel::EditStatus
Date	qt/transactiontablemodel.h	/^        Date = 1,$/;"	e	enum:TransactionTableModel::ColumnIndex
DateEnum	qt/transactionview.h	/^    enum DateEnum$/;"	g	class:TransactionView
DateRole	qt/transactiontablemodel.h	/^        DateRole,$/;"	e	enum:TransactionTableModel::RoleIndex
DateTimeStrFormat	util.h	/^inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)$/;"	f
DecodeAddress	irc.cpp	/^bool DecodeAddress(string str, CService& addr)$/;"	f
DecodeBase32	util.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	util.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	base58.h	/^inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58	base58.h	/^inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	util.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	util.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeOP_N	script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
Decrypt	crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
Decrypt	qt/askpassphrasedialog.h	/^        Decrypt     \/**< Ask passphrase and decrypt wallet *\/$/;"	e	enum:AskPassphraseDialog::Mode
DecryptSecret	crypter.cpp	/^bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)$/;"	f
DelAddressBookName	wallet.cpp	/^bool CWallet::DelAddressBookName(const CTxDestination& address)$/;"	f	class:CWallet
DescribeAddressVisitor	bitcoinrpc.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<Object>$/;"	c	file:
DetachDatabases	qt/optionsmodel.h	/^        DetachDatabases,   \/\/ bool$/;"	e	enum:OptionsModel::OptionID
DisconnectBlock	main.cpp	/^bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
DisconnectInputs	main.cpp	/^bool CTransaction::DisconnectInputs(CTxDB& txdb)$/;"	f	class:CTransaction
Discover	net.cpp	/^void static Discover()$/;"	f	file:
DisplayAddresses	qt/optionsmodel.h	/^        DisplayAddresses,  \/\/ bool$/;"	e	enum:OptionsModel::OptionID
DisplayUnit	qt/optionsmodel.h	/^        DisplayUnit,       \/\/ BitcoinUnits::Unit$/;"	e	enum:OptionsModel::OptionID
DoS	main.h	/^    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }$/;"	f	class:CBlock
DoS	main.h	/^    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }$/;"	f	class:CTransaction
DumpAddresses	net.cpp	/^void DumpAddresses()$/;"	f
DuplicateAddress	qt/walletmodel.h	/^        DuplicateAddress,$/;"	e	enum:WalletModel::StatusCode
ECDSA_SIG_recover_key_GFp	key.cpp	/^int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)$/;"	f
EC_KEY_regenerate_key	key.cpp	/^int EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)$/;"	f
EDITADDRESSDIALOG_H	qt/editaddressdialog.h	2;"	d
END	util.h	41;"	d
ENTER_CRITICAL_SECTION	sync.h	112;"	d
ERROR	qt/miningpage.h	21;"	d
EXPORT_IMAGE_SIZE	qt/guiconstants.h	32;"	d
EditAddressDialog	qt/editaddressdialog.cpp	/^EditAddressDialog::EditAddressDialog(Mode mode, QWidget *parent) :$/;"	f	class:EditAddressDialog
EditAddressDialog	qt/editaddressdialog.h	/^class EditAddressDialog : public QDialog$/;"	c
EditReceivingAddress	qt/editaddressdialog.h	/^        EditReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
EditSendingAddress	qt/editaddressdialog.h	/^        EditSendingAddress$/;"	e	enum:EditAddressDialog::Mode
EditStatus	qt/addresstablemodel.h	/^    enum EditStatus {$/;"	g	class:AddressTableModel
EncodeAddress	irc.cpp	/^string EncodeAddress(const CService& addr)$/;"	f
EncodeBase32	util.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	util.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	base58.h	/^inline std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	base58.h	/^inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	base58.h	/^inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	util.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	util.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeOP_N	script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
Encrypt	crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
Encrypt	qt/askpassphrasedialog.h	/^        Encrypt,    \/**< Ask passphrase twice and encrypt *\/$/;"	e	enum:AskPassphraseDialog::Mode
EncryptKeys	keystore.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	crypter.cpp	/^bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f
EncryptWallet	wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EncryptionStatus	qt/walletmodel.h	/^    enum EncryptionStatus$/;"	g	class:WalletModel
EndMessage	net.h	/^    void EndMessage()$/;"	f	class:CNode
EndMessageAbortIfEmpty	net.h	/^    void EndMessageAbortIfEmpty()$/;"	f	class:CNode
EnsureWalletIsUnlocked	bitcoinrpc.cpp	/^EnsureWalletIsUnlocked()$/;"	f
Enter	sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EnvShutdown	db.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
Erase	db.h	/^    bool Erase(const K& key)$/;"	f	class:CDB
EraseFromWallet	wallet.cpp	/^bool CWallet::EraseFromWallet(uint256 hash)$/;"	f	class:CWallet
EraseFromWallets	main.cpp	/^void static EraseFromWallets(uint256 hash)$/;"	f	file:
EraseName	walletdb.cpp	/^bool CWalletDB::EraseName(const string& strAddress)$/;"	f	class:CWalletDB
EraseOrphanTx	main.cpp	/^void static EraseOrphanTx(uint256 hash)$/;"	f	file:
ErasePool	walletdb.h	/^    bool ErasePool(int64 nPool)$/;"	f	class:CWalletDB
EraseSetting	walletdb.h	/^    bool EraseSetting(const std::string& strKey)$/;"	f	class:CWalletDB
EraseTx	walletdb.h	/^    bool EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseTxIndex	db.cpp	/^bool CTxDB::EraseTxIndex(const CTransaction& tx)$/;"	f	class:CTxDB
ErrorReply	bitcoinrpc.cpp	/^void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)$/;"	f
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position( unsigned int line, unsigned int column, const std::string& reason )$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position()$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    struct Error_position$/;"	s	namespace:json_spirit
EvalScript	script.cpp	/^bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
Exists	db.h	/^    bool Exists(const K& key)$/;"	f	class:CDB
ExitThread	util.h	/^inline void ExitThread(size_t nExitCode)$/;"	f
ExitTimeout	init.cpp	/^void ExitTimeout(void* parg)$/;"	f
ExtractDestination	script.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	script.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
FEATURE_BASE	wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_LATEST	wallet.h	/^    FEATURE_LATEST = 60000$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FLATDATA	serialize.h	244;"	d
FORWARD	ui_interface.h	/^        FORWARD               = 0x00001000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
FREEDESKTOP_NOTIFICATION_ICON_SIZE	qt/notificator.cpp	/^const int FREEDESKTOP_NOTIFICATION_ICON_SIZE = 128;$/;"	v
Fee	qt/optionsmodel.h	/^        Fee,               \/\/ qint64$/;"	e	enum:OptionsModel::OptionID
FetchInputs	main.cpp	/^bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,$/;"	f	class:CTransaction
FileCommit	util.cpp	/^void FileCommit(FILE *fileout)$/;"	f
Find	addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)$/;"	f	class:CAddrMan
Find	script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
FindAndDelete	script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindNode	net.cpp	/^CNode* FindNode(const CNetAddr& ip)$/;"	f
FindNode	net.cpp	/^CNode* FindNode(const CService& addr)$/;"	f
FindNode	net.cpp	/^CNode* FindNode(std::string addrName)$/;"	f
Flush	db.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
ForEditing	qt/addressbookpage.h	/^        ForEditing  \/**< Open address book for editing *\/$/;"	e	enum:AddressBookPage::Mode
ForSending	qt/addressbookpage.h	/^        ForSending, \/**< Open address book to pick address for sending *\/$/;"	e	enum:AddressBookPage::Mode
FormatException	util.cpp	/^static std::string FormatException(std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	util.cpp	/^string FormatFullVersion()$/;"	f
FormatHashBlocks	main.cpp	/^int static FormatHashBlocks(void* pbuffer, unsigned int len)$/;"	f	file:
FormatHashBuffers	main.cpp	/^void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)$/;"	f
FormatMoney	util.cpp	/^string FormatMoney(int64 n, bool fPlus)$/;"	f
FormatSubVersion	util.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatTxStatus	qt/transactiondesc.cpp	/^QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)$/;"	f	class:TransactionDesc
FormatVersion	util.cpp	/^string FormatVersion(int nVersion)$/;"	f
FormattedAmountRole	qt/transactiontablemodel.h	/^        FormattedAmountRole$/;"	e	enum:TransactionTableModel::RoleIndex
Freedesktop	qt/notificator.h	/^        Freedesktop, \/**< Use DBus org.freedesktop.Notifications *\/$/;"	e	enum:Notificator::Mode
FreedesktopImage	qt/notificator.cpp	/^    FreedesktopImage() {}$/;"	f	class:FreedesktopImage
FreedesktopImage	qt/notificator.cpp	/^FreedesktopImage::FreedesktopImage(const QImage &img):$/;"	f	class:FreedesktopImage
FreedesktopImage	qt/notificator.cpp	/^Q_DECLARE_METATYPE(FreedesktopImage);$/;"	v
FreedesktopImage	qt/notificator.cpp	/^class FreedesktopImage$/;"	c	file:
GIT_COMMIT_DATE	version.cpp	40;"	d	file:
GIT_COMMIT_ID	version.cpp	39;"	d	file:
GMF_BLOCK	main.h	/^    GMF_BLOCK,$/;"	e	enum:GetMinFee_mode
GMF_RELAY	main.h	/^    GMF_RELAY,$/;"	e	enum:GetMinFee_mode
GMF_SEND	main.h	/^    GMF_SEND,$/;"	e	enum:GetMinFee_mode
GUICONSTANTS_H	qt/guiconstants.h	2;"	d
GUIUTIL_H	qt/guiutil.h	2;"	d
GUIUtil	qt/guiutil.cpp	/^namespace GUIUtil {$/;"	n	file:
GUIUtil	qt/guiutil.h	/^namespace GUIUtil$/;"	n
GenerateBitcoins	main.cpp	/^void GenerateBitcoins(bool fGenerate, CWallet* pwallet)$/;"	f
GenerateNewKey	wallet.cpp	/^CPubKey CWallet::GenerateNewKey()$/;"	f	class:CWallet
Generated	qt/transactionrecord.h	/^        Generated,$/;"	e	enum:TransactionRecord::Type
Generator	json/json_spirit_writer_template.h	/^        Generator( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	class:json_spirit::Generator
Generator	json/json_spirit_writer_template.h	/^    class Generator$/;"	c	namespace:json_spirit
Get	base58.h	/^    CTxDestination Get() const {$/;"	f	class:CBitcoinAddress
Get	script.cpp	/^    Get(uint256 hash, const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& pubKey)$/;"	f	class:CSignatureCache
Get64	uint256.h	/^    uint64 Get64(int n=0) const$/;"	f	class:base_uint
GetAccountAddress	bitcoinrpc.cpp	/^CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)$/;"	f
GetAccountAddresses	bitcoinrpc.cpp	/^void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)$/;"	f
GetAccountAmounts	wallet.cpp	/^void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,$/;"	f	class:CWalletTx
GetAccountBalance	bitcoinrpc.cpp	/^int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)$/;"	f
GetAccountBalance	bitcoinrpc.cpp	/^int64 GetAccountBalance(const string& strAccount, int nMinDepth)$/;"	f
GetAccountCreditDebit	walletdb.cpp	/^int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetAddr	addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddr_	addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)$/;"	f	class:CAddrMan
GetAdjustedTime	util.cpp	/^int64 GetAdjustedTime()$/;"	f
GetAllReserveKeys	wallet.cpp	/^void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress)$/;"	f	class:CWallet
GetAmounts	wallet.cpp	/^void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,$/;"	f	class:CWalletTx
GetArg	util.cpp	/^int64 GetArg(const std::string& strArg, int64 nDefault)$/;"	f
GetArg	util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAutostartDir	qt/guiutil.cpp	/^boost::filesystem::path static GetAutostartDir()$/;"	f	namespace:GUIUtil
GetAutostartFilePath	qt/guiutil.cpp	/^boost::filesystem::path static GetAutostartFilePath()$/;"	f	namespace:GUIUtil
GetAvailableCredit	wallet.h	/^    int64 GetAvailableCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetBalance	wallet.cpp	/^int64 CWallet::GetBalance() const$/;"	f	class:CWallet
GetBlockHash	main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHash	main.h	/^    uint256 GetBlockHash()$/;"	f	class:CBlockLocator
GetBlockHeader	main.h	/^    CBlock GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockIndex	main.h	/^    CBlockIndex* GetBlockIndex()$/;"	f	class:CBlockLocator
GetBlockTime	main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlock
GetBlockTime	main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockValue	main.cpp	/^int64 static GetBlockValue(int nHeight, int64 nFees, uint256 prevHash)$/;"	f	file:
GetBlockWork	main.h	/^    CBigNum GetBlockWork() const$/;"	f	class:CBlockIndex
GetBlocksToMaturity	main.cpp	/^int CMerkleTx::GetBlocksToMaturity() const$/;"	f	class:CMerkleTx
GetBoolArg	util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetByte	netbase.cpp	/^int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCScript	keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetChance	addrman.cpp	/^double CAddrInfo::GetChance(int64 nNow) const$/;"	f	class:CAddrInfo
GetChange	wallet.h	/^    int64 GetChange() const$/;"	f	class:CWalletTx
GetChange	wallet.h	/^    int64 GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	wallet.h	/^    int64 GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetCommand	protocol.cpp	/^const char* CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCompact	bignum.h	/^    unsigned int GetCompact() const$/;"	f	class:CBigNum
GetConfigFile	util.cpp	/^boost::filesystem::path GetConfigFile()$/;"	f
GetCredit	wallet.h	/^    int64 GetCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetCredit	wallet.h	/^    int64 GetCredit(const CTransaction& tx) const$/;"	f	class:CWallet
GetCredit	wallet.h	/^    int64 GetCredit(const CTxOut& txout) const$/;"	f	class:CWallet
GetCursor	db.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDataDir	util.cpp	/^const boost::filesystem::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDebit	wallet.cpp	/^int64 CWallet::GetDebit(const CTxIn &txin) const$/;"	f	class:CWallet
GetDebit	wallet.h	/^    int64 GetDebit() const$/;"	f	class:CWalletTx
GetDebit	wallet.h	/^    int64 GetDebit(const CTransaction& tx) const$/;"	f	class:CWallet
GetDefaultDataDir	util.cpp	/^boost::filesystem::path GetDefaultDataDir()$/;"	f
GetDefaultPort	protocol.h	/^static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)$/;"	f
GetDepthInMainChain	main.cpp	/^int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDepthInMainChain	main.cpp	/^int CTxIndex::GetDepthInMainChain() const$/;"	f	class:CTxIndex
GetDepthInMainChain	main.h	/^    int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }$/;"	f	class:CMerkleTx
GetDetach	db.h	/^    bool GetDetach() { return fDetachDB; }$/;"	f	class:CDBEnv
GetDifficulty	bitcoinrpc.cpp	/^double GetDifficulty(const CBlockIndex* blockindex = NULL)$/;"	f
GetDifficulty	qt/clientmodel.cpp	/^double ClientModel::GetDifficulty() const$/;"	f	class:ClientModel
GetDistanceBack	main.h	/^    int GetDistanceBack()$/;"	f	class:CBlockLocator
GetExtNetwork	netbase.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetFilesize	util.cpp	/^int GetFilesize(FILE* file)$/;"	f
GetGroup	netbase.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHash	key.h	/^    uint256 GetHash() const {$/;"	f	class:CPubKey
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CAlert
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CBlock
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CTransaction
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CTxOut
GetHash	netbase.cpp	/^uint64 CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	util.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHeight	main.h	/^    int GetHeight()$/;"	f	class:CBlockLocator
GetHex	bignum.h	/^    std::string GetHex() const$/;"	f	class:CBigNum
GetHex	uint256.h	/^    std::string GetHex() const$/;"	f	class:base_uint
GetID	key.h	/^    CKeyID GetID() const {$/;"	f	class:CPubKey
GetID	script.h	/^    CScriptID GetID() const$/;"	f	class:CScript
GetIPFromIRC	irc.cpp	/^bool GetIPFromIRC(SOCKET hSocket, string strMyName, CNetAddr& ipRet)$/;"	f
GetImmatureBalance	wallet.cpp	/^int64 CWallet::GetImmatureBalance() const$/;"	f	class:CWallet
GetIn6Addr	netbase.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	netbase.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetKey	keystore.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKey	keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	netbase.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKeyFromPool	wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result, bool fAllowReuse)$/;"	f	class:CWallet
GetKeyID	base58.h	/^    bool GetKeyID(CKeyID &keyID) const {$/;"	f	class:CBitcoinAddress
GetKeyPoolSize	wallet.h	/^    int GetKeyPoolSize()$/;"	f	class:CWallet
GetKeys	keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetKeys	keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CCryptoKeyStore
GetLastCheckpoint	checkpoints.cpp	/^    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)$/;"	f	namespace:Checkpoints
GetLegacySigOpCount	main.cpp	/^CTransaction::GetLegacySigOpCount() const$/;"	f	class:CTransaction
GetListenPort	net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer)$/;"	f
GetLock	sync.h	/^    boost::unique_lock<Mutex> &GetLock()$/;"	f	class:CMutexLock
GetMedianTime	main.h	/^    int64 GetMedianTime() const$/;"	f	class:CBlockIndex
GetMedianTimePast	main.h	/^    int64 GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMerkleBranch	main.h	/^    std::vector<uint256> GetMerkleBranch(int nIndex) const$/;"	f	class:CBlock
GetMinFee	main.h	/^    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const$/;"	f	class:CTransaction
GetMinFee_mode	main.h	/^enum GetMinFee_mode$/;"	g
GetMyExternalIP	net.cpp	/^bool GetMyExternalIP(CNetAddr& ipRet)$/;"	f
GetMyExternalIP2	net.cpp	/^bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)$/;"	f
GetNameProxy	netbase.cpp	/^bool GetNameProxy() {$/;"	f
GetNetwork	netbase.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkHashPS	bitcoinrpc.cpp	/^Value GetNetworkHashPS(int lookup) {$/;"	f
GetNewBucket	addrman.cpp	/^int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	addrman.h	/^    int GetNewBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetNextWorkRequired	main.cpp	/^unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)$/;"	f	file:
GetNumBlocksOfPeers	main.cpp	/^int GetNumBlocksOfPeers()$/;"	f
GetOldestKeyPoolTime	wallet.cpp	/^int64 CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOrphanRoot	main.cpp	/^uint256 static GetOrphanRoot(const CBlock* pblock)$/;"	f	file:
GetOutputFor	main.cpp	/^const CTxOut& CTransaction::GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetP2SHSigOpCount	main.cpp	/^unsigned int CTransaction::GetP2SHSigOpCount(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetPerformanceCounter	util.h	/^inline int64 GetPerformanceCounter()$/;"	f
GetPidFile	util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPoWHash	main.h	/^    uint256 GetPoWHash() const$/;"	f	class:CBlock
GetPort	netbase.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPrivKey	key.cpp	/^CPrivKey CKey::GetPrivKey() const$/;"	f	class:CKey
GetProxy	netbase.cpp	/^bool GetProxy(enum Network net, CService &addrProxy) {$/;"	f
GetPubKey	key.cpp	/^CPubKey CKey::GetPubKey() const$/;"	f	class:CKey
GetPubKey	keystore.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetPubKey	keystore.cpp	/^bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetRand	util.cpp	/^uint64 GetRand(uint64 nMax)$/;"	f
GetRandHash	util.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	util.cpp	/^int GetRandInt(int nMax)$/;"	f
GetReachabilityFrom	netbase.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetRefCount	net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetRequestCount	wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetReservedKey	wallet.cpp	/^CPubKey CReserveKey::GetReservedKey()$/;"	f	class:CReserveKey
GetSecret	base58.h	/^    CSecret GetSecret(bool &fCompressedOut)$/;"	f	class:CBitcoinSecret
GetSecret	key.cpp	/^CSecret CKey::GetSecret(bool &fCompressed) const$/;"	f	class:CKey
GetSecret	keystore.h	/^    virtual bool GetSecret(const CKeyID &address, CSecret& vchSecret, bool &fCompressed) const$/;"	f	class:CKeyStore
GetSerializeSize	bignum.h	/^    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const$/;"	f	class:CBigNum
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CAutoFile
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CDataStream
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFlatData
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(char a,           int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed char a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed short a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned char a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned short a, int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	uint256.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:base_uint
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
GetSigOpCount	script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64 nSize)$/;"	f
GetSockAddr	netbase.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSpecialFolderPath	util.cpp	/^boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetStartOnSystemStartup	qt/guiutil.cpp	/^bool GetStartOnSystemStartup() { return false; }$/;"	f	namespace:GUIUtil
GetStartOnSystemStartup	qt/guiutil.cpp	/^bool GetStartOnSystemStartup()$/;"	f	namespace:GUIUtil
GetTime	util.cpp	/^int64 GetTime()$/;"	f
GetTimeMillis	util.h	/^inline int64 GetTimeMillis()$/;"	f
GetTotalBlocksEstimate	checkpoints.cpp	/^    int GetTotalBlocksEstimate()$/;"	f	namespace:Checkpoints
GetTransaction	main.cpp	/^bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock)$/;"	f
GetTransaction	main.cpp	/^bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)$/;"	f	file:
GetTransaction	wallet.cpp	/^bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)$/;"	f	class:CWallet
GetTriedBucket	addrman.cpp	/^int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetTxTime	wallet.cpp	/^int64 CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxnOutputType	script.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CAutoFile
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CDataStream
GetUnconfirmedBalance	wallet.cpp	/^int64 CWallet::GetUnconfirmedBalance() const$/;"	f	class:CWallet
GetValueIn	main.cpp	/^int64 CTransaction::GetValueIn(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetValueOut	main.h	/^    int64 GetValueOut() const$/;"	f	class:CTransaction
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CDataStream
GetVersion	wallet.h	/^    int GetVersion() { return nWalletVersion; }$/;"	f	class:CWallet
GetWalletFile	wallet.cpp	/^bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)$/;"	f
GetWarnings	main.cpp	/^string GetWarnings(string strFor)$/;"	f
Good	addrman.h	/^    void Good(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	addrman.cpp	/^void CAddrMan::Good_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
Growl12	qt/notificator.h	/^        Growl12,        \/**< Use the Growl 1.2 notification system (Mac only) *\/$/;"	e	enum:Notificator::Mode
Growl13	qt/notificator.h	/^        Growl13        \/**< Use the Growl 1.3 notification system (Mac only) *\/$/;"	e	enum:Notificator::Mode
HELP	ui_interface.h	/^        HELP                  = 0x00008000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
HMAC_SHA256Context	scrypt.c	/^typedef struct HMAC_SHA256Context {$/;"	s	file:
HMAC_SHA256_CTX	scrypt.c	/^} HMAC_SHA256_CTX;$/;"	t	typeref:struct:HMAC_SHA256Context	file:
HMAC_SHA256_Final	scrypt.c	/^HMAC_SHA256_Final(unsigned char digest[32], HMAC_SHA256_CTX *ctx)$/;"	f	file:
HMAC_SHA256_Init	scrypt.c	/^HMAC_SHA256_Init(HMAC_SHA256_CTX *ctx, const void *_K, size_t Klen)$/;"	f	file:
HMAC_SHA256_Update	scrypt.c	/^HMAC_SHA256_Update(HMAC_SHA256_CTX *ctx, const void *in, size_t len)$/;"	f	file:
HTTPAuthorized	bitcoinrpc.cpp	/^bool HTTPAuthorized(map<string, string>& mapHeaders)$/;"	f
HTTPPost	bitcoinrpc.cpp	/^string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)$/;"	f
HTTPReply	bitcoinrpc.cpp	/^static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)$/;"	f	file:
H_BITCOIN_SCRIPT	script.h	7;"	d
HandleSIGHUP	init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	init.cpp	/^void HandleSIGTERM(int)$/;"	f
Hash	util.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	util.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash160	util.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HaveCScript	keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveConfirmations	qt/transactionrecord.h	/^        HaveConfirmations$/;"	e	enum:TransactionStatus::Status
HaveKey	keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKey	keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CCryptoKeyStore
HaveKeys	script.cpp	/^unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HelpMessage	init.cpp	/^std::string HelpMessage()$/;"	f
HelpMessageBox	qt/guiutil.cpp	/^HelpMessageBox::HelpMessageBox(QWidget *parent) :$/;"	f	class:GUIUtil::HelpMessageBox
HelpMessageBox	qt/guiutil.h	/^    class HelpMessageBox : public QMessageBox$/;"	c	namespace:GUIUtil
HelpRequiringPassphrase	bitcoinrpc.cpp	/^HelpRequiringPassphrase()$/;"	f
HexBits	bitcoinrpc.cpp	/^HexBits(unsigned int nBits)$/;"	f
HexStr	util.h	/^inline std::string HexStr(const std::vector<unsigned char>& vch, bool fSpaces=false)$/;"	f
HexStr	util.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
HtmlEscape	qt/guiutil.cpp	/^QString HtmlEscape(const QString& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
HtmlEscape	qt/guiutil.cpp	/^QString HtmlEscape(const std::string& str, bool fMultiLine)$/;"	f	namespace:GUIUtil
ICON_ASTERISK	ui_interface.h	/^        ICON_ASTERISK         = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_ERROR	ui_interface.h	/^        ICON_ERROR            = ICON_HAND,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_EXCLAMATION	ui_interface.h	/^        ICON_EXCLAMATION      = 0x00000100,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_HAND	ui_interface.h	/^        ICON_HAND             = 0x00000200,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	ui_interface.h	/^        ICON_INFORMATION      = 0x00000800,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MAPPING	qt/rpcconsole.cpp	/^} ICON_MAPPING[] = {$/;"	v	typeref:struct:__anon8
ICON_MASK	ui_interface.h	/^        ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_QUESTION	ui_interface.h	/^        ICON_QUESTION         = 0x00000400,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_STOP	ui_interface.h	/^        ICON_STOP             = ICON_HAND,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	ui_interface.h	/^        ICON_WARNING          = ICON_EXCLAMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
IMPLEMENT_RANDOMIZE_STACK	util.h	372;"	d
IMPLEMENT_SERIALIZE	serialize.h	60;"	d
INVALID_ADDRESS	qt/addresstablemodel.h	/^        INVALID_ADDRESS,   \/**< Unparseable address *\/$/;"	e	enum:AddressTableModel::EditStatus
INVALID_SOCKET	compat.h	45;"	d
Immature	qt/transactionrecord.h	/^        Immature,$/;"	e	enum:TransactionStatus::Maturity
IncrementExtraNonce	main.cpp	/^void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
Information	qt/notificator.h	/^        Information,         \/**< Informational message *\/$/;"	e	enum:Notificator::Class
Init	addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	main.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	netbase.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	netbase.cpp	/^void CService::Init()$/;"	f	class:CService
Init	protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	qt/optionsmodel.cpp	/^void OptionsModel::Init()$/;"	f	class:OptionsModel
Init	serialize.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	util.h	/^    void Init() {$/;"	f	class:CHashWriter
Init	wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitError	init.cpp	/^bool static InitError(const std::string &str)$/;"	f	file:
InitMessage	qt/bitcoin.cpp	/^static void InitMessage(const std::string &message)$/;"	f	file:
InitMessage	ui_interface.h	/^    boost::signals2::signal<void (const std::string &message)> InitMessage;$/;"	m	class:CClientUIInterface
InitWarning	init.cpp	/^bool static InitWarning(const std::string &str)$/;"	f	file:
InsertBlockIndex	db.cpp	/^CBlockIndex static * InsertBlockIndex(uint256 hash)$/;"	f	file:
InterpretNegativeSetting	util.cpp	/^static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)$/;"	f	file:
InvalidAddress	qt/walletmodel.h	/^        InvalidAddress,$/;"	e	enum:WalletModel::StatusCode
InvalidAmount	qt/walletmodel.h	/^        InvalidAmount,$/;"	e	enum:WalletModel::StatusCode
InvalidChainFound	main.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
Inventory	main.cpp	/^void static Inventory(const uint256& hash)$/;"	f	file:
Inventory	wallet.h	/^    void Inventory(const uint256 &hash)$/;"	f	class:CWallet
IsBanned	net.cpp	/^bool CNode::IsBanned(CNetAddr ip)$/;"	f	class:CNode
IsChainFile	db.cpp	/^static bool IsChainFile(std::string strFile)$/;"	f	file:
IsChange	wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	main.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCompressed	key.cpp	/^bool CKey::IsCompressed() const$/;"	f	class:CKey
IsCompressed	key.h	/^    bool IsCompressed() const {$/;"	f	class:CPubKey
IsConfirmed	wallet.h	/^    bool IsConfirmed() const$/;"	f	class:CWalletTx
IsCrypted	keystore.h	/^    bool IsCrypted() const$/;"	f	class:CCryptoKeyStore
IsFinal	main.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFinal	main.h	/^    bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const$/;"	f	class:CTransaction
IsFromMe	main.cpp	/^bool static IsFromMe(CTransaction& tx)$/;"	f	file:
IsFromMe	wallet.h	/^    bool IsFromMe() const$/;"	f	class:CWalletTx
IsFromMe	wallet.h	/^    bool IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsHex	util.cpp	/^bool IsHex(const string& str)$/;"	f
IsI2P	netbase.cpp	/^bool CNetAddr::IsI2P() const$/;"	f	class:CNetAddr
IsIPv4	netbase.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	netbase.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsInEffect	main.h	/^    bool IsInEffect() const$/;"	f	class:CAlert
IsInMainChain	main.h	/^    bool IsInMainChain() const { return GetDepthInMainChain() > 0; }$/;"	f	class:CMerkleTx
IsInMainChain	main.h	/^    bool IsInMainChain() const$/;"	f	class:CBlockIndex
IsInitialBlockDownload	main.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsKnownType	protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLimited	net.cpp	/^bool IsLimited(const CNetAddr &addr)$/;"	f
IsLimited	net.cpp	/^bool IsLimited(enum Network net)$/;"	f
IsLocal	net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	netbase.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocked	keystore.h	/^    bool IsLocked() const$/;"	f	class:CCryptoKeyStore
IsMine	script.cpp	/^bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)$/;"	f
IsMine	script.cpp	/^bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)$/;"	f
IsMine	wallet.cpp	/^bool CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	wallet.h	/^    bool IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	wallet.h	/^    bool IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMulticast	netbase.cpp	/^bool CNetAddr::IsMulticast() const$/;"	f	class:CNetAddr
IsNewerThan	main.h	/^    bool IsNewerThan(const CTransaction& old) const$/;"	f	class:CTransaction
IsNull	key.cpp	/^bool CKey::IsNull() const$/;"	f	class:CKey
IsNull	main.h	/^    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }$/;"	f	class:COutPoint
IsNull	main.h	/^    bool IsNull() const { return (nFile == (unsigned int) -1); }$/;"	f	class:CDiskTxPos
IsNull	main.h	/^    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }$/;"	f	class:CInPoint
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CAlert
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CBlock
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CTransaction
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CBlockLocator
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CTxIndex
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CTxOut
IsNull	net.h	/^    bool IsNull()$/;"	f	class:CRequestTracker
IsPayToScriptHash	script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsProxy	netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPushOnly	script.h	/^    bool IsPushOnly() const$/;"	f	class:CScript
IsRFC1918	netbase.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC3849	netbase.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	netbase.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	netbase.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	netbase.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	netbase.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	netbase.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	netbase.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC6052	netbase.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	netbase.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsReachable	net.cpp	/^bool IsReachable(const CNetAddr& addr)$/;"	f
IsRoutable	netbase.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsScript	base58.h	/^    bool IsScript() const {$/;"	f	class:CBitcoinAddress
IsSpent	wallet.h	/^    bool IsSpent(unsigned int nOut) const$/;"	f	class:CWalletTx
IsStandard	main.cpp	/^bool CTransaction::IsStandard() const$/;"	f	class:CTransaction
IsStandard	script.cpp	/^bool IsStandard(const CScript& scriptPubKey)$/;"	f
IsSwitchChar	util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	addrman.cpp	/^bool CAddrInfo::IsTerrible(int64 nNow) const$/;"	f	class:CAddrInfo
IsTor	netbase.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsValid	base58.h	/^    bool IsValid() const$/;"	f	class:CBitcoinAddress
IsValid	base58.h	/^    bool IsValid() const$/;"	f	class:CBitcoinSecret
IsValid	key.cpp	/^bool CKey::IsValid()$/;"	f	class:CKey
IsValid	key.h	/^    bool IsValid() const {$/;"	f	class:CPubKey
IsValid	netbase.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid() const$/;"	f	class:CMessageHeader
JSONRPCError	bitcoinrpc.cpp	/^Object JSONRPCError(int code, const string& message)$/;"	f
JSONRPCExecBatch	bitcoinrpc.cpp	/^static string JSONRPCExecBatch(const Array& vReq)$/;"	f	file:
JSONRPCExecOne	bitcoinrpc.cpp	/^static Object JSONRPCExecOne(const Value& req)$/;"	f	file:
JSONRPCReply	bitcoinrpc.cpp	/^string JSONRPCReply(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCReplyObj	bitcoinrpc.cpp	/^Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCRequest	bitcoinrpc.cpp	/^string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)$/;"	f
JSONRequest	bitcoinrpc.cpp	/^    JSONRequest() { id = Value::null; }$/;"	f	class:JSONRequest
JSONRequest	bitcoinrpc.cpp	/^class JSONRequest$/;"	c	file:
JSON_SPIRIT	json/json_spirit.h	2;"	d
JSON_SPIRIT_ERROR_POSITION	json/json_spirit_error_position.h	2;"	d
JSON_SPIRIT_READER	json/json_spirit_reader.h	2;"	d
JSON_SPIRIT_READER_TEMPLATE	json/json_spirit_reader_template.h	2;"	d
JSON_SPIRIT_READ_STREAM	json/json_spirit_stream_reader.h	2;"	d
JSON_SPIRIT_UTILS	json/json_spirit_utils.h	2;"	d
JSON_SPIRIT_VALUE	json/json_spirit_value.h	2;"	d
JSON_SPIRIT_WRITER	json/json_spirit_writer.h	2;"	d
JSON_SPIRIT_WRITER_TEMPLATE	json/json_spirit_writer_template.h	2;"	d
Json_grammer	json/json_spirit_reader_template.h	/^        Json_grammer( Semantic_actions_t& semantic_actions )$/;"	f	class:json_spirit::Json_grammer
Json_grammer	json/json_spirit_reader_template.h	/^    class Json_grammer : public spirit_namespace::grammar< Json_grammer< Value_type, Iter_type > >$/;"	c	namespace:json_spirit
KEY_GENERATION_FAILURE	qt/addresstablemodel.h	/^        KEY_GENERATION_FAILURE \/**< Generating a new public key for a receiving address failed *\/$/;"	e	enum:AddressTableModel::EditStatus
KeepKey	wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	wallet.cpp	/^void CWallet::KeepKey(int64 nIndex)$/;"	f	class:CWallet
KeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CSecret, bool> > KeyMap;$/;"	t
LEAVE_CRITICAL_SECTION	sync.h	118;"	d
LEGACY_VERSION_1	main.h	/^    static const int LEGACY_VERSION_1 = 1;$/;"	m	class:CTransaction
LOCAL_BIND	net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon4
LOCAL_HTTP	net.h	/^    LOCAL_HTTP,   \/\/ address reported by whatismyip.com and similars$/;"	e	enum:__anon4
LOCAL_IF	net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon4
LOCAL_IRC	net.h	/^    LOCAL_IRC,    \/\/ address reported by IRC (deprecated)$/;"	e	enum:__anon4
LOCAL_MANUAL	net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon4
LOCAL_MAX	net.h	/^    LOCAL_MAX$/;"	e	enum:__anon4
LOCAL_NONE	net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon4
LOCAL_UPNP	net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon4
LOCK	sync.h	108;"	d
LOCK2	sync.h	109;"	d
LOCKTIME_THRESHOLD	main.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LONGPOLL	qt/miningpage.h	22;"	d
Label	qt/addresstablemodel.h	/^        Label = 0,   \/**< User specified label *\/$/;"	e	enum:AddressTableModel::ColumnIndex
LabelRole	qt/transactiontablemodel.h	/^        LabelRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Language	qt/optionsmodel.h	/^        Language,          \/\/ QString$/;"	e	enum:OptionsModel::OptionID
LastMonth	qt/transactionview.h	/^        LastMonth,$/;"	e	enum:TransactionView::DateEnum
Leave	sync.h	/^    void Leave()$/;"	f	class:CMutexLock
LeaveCritical	sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	sync.h	/^void static inline LeaveCritical() {}$/;"	f
LimitOrphanTxSize	main.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)$/;"	f
ListAccountCreditDebit	walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
ListReceived	bitcoinrpc.cpp	/^Value ListReceived(const Array& params, bool fByAccounts)$/;"	f
ListTransactions	bitcoinrpc.cpp	/^void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)$/;"	f
LoadBlockIndex	db.cpp	/^bool CTxDB::LoadBlockIndex()$/;"	f	class:CTxDB
LoadBlockIndex	main.cpp	/^bool LoadBlockIndex(bool fAllowNew)$/;"	f
LoadBlockIndexGuts	db.cpp	/^bool CTxDB::LoadBlockIndexGuts()$/;"	f	class:CTxDB
LoadCScript	wallet.h	/^    bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }$/;"	f	class:CWallet
LoadCryptedKey	wallet.h	/^    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { SetMinVersion(FEATURE_WALLETCRYPT); return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }$/;"	f	class:CWallet
LoadExternalBlockFile	main.cpp	/^bool LoadExternalBlockFile(FILE* fileIn)$/;"	f
LoadKey	wallet.h	/^    bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadMinVersion	wallet.h	/^    bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:CWallet
LoadWallet	wallet.cpp	/^int CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	walletdb.cpp	/^int CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LocalServiceInfo	net.cpp	/^struct LocalServiceInfo {$/;"	s	file:
Lock	keystore.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockStack	sync.cpp	/^typedef std::vector< std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
Locked	qt/walletmodel.h	/^        Locked,       \/\/ wallet->IsCrypted() && wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
LogException	util.cpp	/^void LogException(std::exception* pex, const char* pszThread)$/;"	f
LongDescriptionRole	qt/transactiontablemodel.h	/^        LongDescriptionRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupHostNumeric	netbase.cpp	/^bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions)$/;"	f
LookupIntern	netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupNumeric	netbase.cpp	/^bool LookupNumeric(const char *pszName, CService& addr, int portDefault)$/;"	f
MACDOCKICONHANDLER_H	qt/macdockiconhandler.h	2;"	d
MAX_BLOCK_SIGOPS	main.h	/^static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE\/50;$/;"	v
MAX_BLOCK_SIZE	main.h	/^static const unsigned int MAX_BLOCK_SIZE = 1000000;$/;"	v
MAX_BLOCK_SIZE_GEN	main.h	/^static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE\/2;$/;"	v
MAX_DATE	qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MAX_DATE = QDateTime::fromTime_t(0xFFFFFFFF);$/;"	m	class:TransactionFilterProxy	file:
MAX_DATE	qt/transactionfilterproxy.h	/^    static const QDateTime MAX_DATE;$/;"	m	class:TransactionFilterProxy
MAX_MONEY	main.h	/^static const int64 MAX_MONEY = 10000000000 * COIN; \/\/ MovieCoin: maximum of 10 billion coins$/;"	v
MAX_ORPHAN_TRANSACTIONS	main.h	/^static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE\/100;$/;"	v
MAX_OUTBOUND_CONNECTIONS	net.cpp	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v	file:
MAX_PASSPHRASE_SIZE	qt/guiconstants.h	/^static const int MAX_PASSPHRASE_SIZE = 1024;$/;"	v
MAX_PATH	util.h	89;"	d
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_SIZE	test/mruset_tests.cpp	9;"	d	file:
MAX_TX_COMMENT_LEN	main.h	/^static const unsigned int MAX_TX_COMMENT_LEN = 140; \/\/ Florincoin: 128 bytes + little extra$/;"	v
MAX_URI_LENGTH	qt/guiconstants.h	/^static const int MAX_URI_LENGTH = 255;$/;"	v
MC_DEBUG	qt/rpcconsole.h	/^        MC_DEBUG,$/;"	e	enum:RPCConsole::MessageClass
MC_ERROR	qt/rpcconsole.h	/^        MC_ERROR,$/;"	e	enum:RPCConsole::MessageClass
MESSAGE_SIZE_OFFSET	protocol.h	/^            MESSAGE_SIZE_OFFSET=MESSAGE_START_SIZE+COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon6
MESSAGE_SIZE_SIZE	protocol.h	/^            MESSAGE_SIZE_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon6
MESSAGE_START_SIZE	protocol.h	/^            MESSAGE_START_SIZE=sizeof(::pchMessageStart),$/;"	e	enum:CMessageHeader::__anon6
MININGPAGE_H	qt/miningpage.h	2;"	d
MIN_DATE	qt/transactionfilterproxy.cpp	/^const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);$/;"	m	class:TransactionFilterProxy	file:
MIN_DATE	qt/transactionfilterproxy.h	/^    static const QDateTime MIN_DATE;$/;"	m	class:TransactionFilterProxy
MIN_PROTO_VERSION	version.h	/^static const int MIN_PROTO_VERSION = 209;$/;"	v
MIN_RELAY_TX_FEE	main.h	/^static const int64 MIN_RELAY_TX_FEE = MIN_TX_FEE;$/;"	v
MIN_TX_FEE	main.h	/^static const int64 MIN_TX_FEE = 1000000;$/;"	v
MODAL	ui_interface.h	/^        MODAL                 = 0x00040000$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MODEL_UPDATE_DELAY	qt/guiconstants.h	/^static const int MODEL_UPDATE_DELAY = 500;$/;"	v
MONITOREDDATAMAPPER_H	qt/monitoreddatamapper.h	2;"	d
MORE	ui_interface.h	/^        MORE                  = 0x00010000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_BLOCK	net.h	/^    MSG_BLOCK,$/;"	e	enum:__anon5
MSG_DONTWAIT	compat.h	32;"	d
MSG_DONTWAIT	util.h	78;"	d
MSG_NOSIGNAL	compat.h	31;"	d
MSG_NOSIGNAL	util.h	77;"	d
MSG_TX	net.h	/^    MSG_TX = 1,$/;"	e	enum:__anon5
MacDockIconHandler	qt/macdockiconhandler.h	/^class MacDockIconHandler : public QObject$/;"	c
MakeNewKey	key.cpp	/^void CKey::MakeNewKey(bool fCompressed)$/;"	f	class:CKey
MakeSameSize	script.cpp	/^void MakeSameSize(valtype& vch1, valtype& vch2)$/;"	f
MakeTried	addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)$/;"	f	class:CAddrMan
MapCheckpoints	checkpoints.cpp	/^    typedef std::map<int, uint256> MapCheckpoints;$/;"	t	namespace:Checkpoints	file:
MapPort	net.cpp	/^void MapPort()$/;"	f
MapPortUPnP	qt/optionsmodel.h	/^        MapPortUPnP,       \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MapPrevTx	main.h	/^typedef std::map<uint256, std::pair<CTxIndex, CTransaction> > MapPrevTx;$/;"	t
Mapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::string, Value > Mapped_obj;$/;"	t	namespace:json_spirit
MarkDirty	wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkSpent	wallet.h	/^    void MarkSpent(unsigned int nOut)$/;"	f	class:CWalletTx
MasterKeyMap	wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:CWallet
Mature	qt/transactionrecord.h	/^        Mature,$/;"	e	enum:TransactionStatus::Maturity
MaturesWarning	qt/transactionrecord.h	/^        MaturesWarning, \/**< Transaction will likely not mature because no nodes have confirmed *\/$/;"	e	enum:TransactionStatus::Maturity
Maturity	qt/transactionrecord.h	/^    enum Maturity$/;"	g	class:TransactionStatus
MaxAddressLength	qt/bitcoinaddressvalidator.h	/^    static const int MaxAddressLength = 35;$/;"	m	class:BitcoinAddressValidator
MessageBoxFlags	ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
MessageClass	qt/rpcconsole.h	/^    enum MessageClass {$/;"	g	class:RPCConsole
MinimizeOnClose	qt/optionsmodel.h	/^        MinimizeOnClose,   \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MinimizeToTray	qt/optionsmodel.h	/^        MinimizeToTray,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
MiningPage	qt/miningpage.cpp	/^MiningPage::MiningPage(QWidget *parent) :$/;"	f	class:MiningPage
MiningPage	qt/miningpage.h	/^class MiningPage : public QWidget$/;"	c
MiningType	qt/clientmodel.h	/^    enum MiningType$/;"	g	class:ClientModel
Misbehaving	net.cpp	/^bool CNode::Misbehaving(int howmuch)$/;"	f	class:CNode
Mode	qt/addressbookpage.h	/^    enum Mode {$/;"	g	class:AddressBookPage
Mode	qt/askpassphrasedialog.h	/^    enum Mode {$/;"	g	class:AskPassphraseDialog
Mode	qt/editaddressdialog.h	/^    enum Mode {$/;"	g	class:EditAddressDialog
Mode	qt/notificator.h	/^    enum Mode {$/;"	g	class:Notificator
MoneyRange	main.h	/^inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MonitoredDataMapper	qt/monitoreddatamapper.cpp	/^MonitoredDataMapper::MonitoredDataMapper(QObject *parent) :$/;"	f	class:MonitoredDataMapper
MonitoredDataMapper	qt/monitoreddatamapper.h	/^class MonitoredDataMapper : public QDataWidgetMapper$/;"	c
MoveTo	sync.h	/^    void MoveTo(CSemaphoreGrant &grant) {$/;"	f	class:CSemaphoreGrant
Mp_iter	json/json_spirit_reader_template.h	/^        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader_thrower
Multi_pass_iters	json/json_spirit_reader_template.h	/^        Multi_pass_iters( Istream_type& is )$/;"	f	struct:json_spirit::Multi_pass_iters
Multi_pass_iters	json/json_spirit_reader_template.h	/^    struct Multi_pass_iters$/;"	s	namespace:json_spirit
NET_I2P	netbase.h	/^    NET_I2P,$/;"	e	enum:Network
NET_IPV4	netbase.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	netbase.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	netbase.h	/^    NET_MAX,$/;"	e	enum:Network
NET_TEREDO	netbase.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	netbase.h	/^    NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	netbase.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	netbase.h	/^    NET_UNROUTABLE,$/;"	e	enum:Network
NO	ui_interface.h	/^        NO                    = 0x00000008,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
NOBLKS_VERSION_END	version.h	/^static const int NOBLKS_VERSION_END = 32400;$/;"	v
NOBLKS_VERSION_START	version.h	/^static const int NOBLKS_VERSION_START = 32000;$/;"	v
NODE_NETWORK	protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:__anon7
NOINLINE	test/bignum_tests.cpp	17;"	d	file:
NOMINMAX	allocators.h	19;"	d
NOMINMAX	compat.h	13;"	d
NOMINMAX	qt/guiutil.cpp	37;"	d	file:
NOMINMAX	util.cpp	53;"	d	file:
NOTIFICATOR_H	qt/notificator.h	2;"	d
NO_DEFAULT	ui_interface.h	/^        NO_DEFAULT            = 0x00000080,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
NUM_ITEMS	qt/overviewpage.cpp	16;"	d	file:
NUM_TESTS	test/mruset_tests.cpp	8;"	d	file:
Network	netbase.h	/^enum Network$/;"	g
NewKeyPool	wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NewReceivingAddress	qt/editaddressdialog.h	/^        NewReceivingAddress,$/;"	e	enum:EditAddressDialog::Mode
NewSendingAddress	qt/editaddressdialog.h	/^        NewSendingAddress,$/;"	e	enum:EditAddressDialog::Mode
None	qt/notificator.h	/^        None,        \/**< Ignore informational notifications, and show a modal pop-up dialog for Critical notifications. *\/$/;"	e	enum:Notificator::Mode
NotAccepted	qt/transactionrecord.h	/^        NotAccepted$/;"	e	enum:TransactionStatus::Maturity
Notificator	qt/notificator.cpp	/^Notificator::Notificator(const QString &programName, QSystemTrayIcon *trayicon, QWidget *parent):$/;"	f	class:Notificator
Notificator	qt/notificator.h	/^class Notificator: public QObject$/;"	c
NotifyAddressBookChanged	qt/walletmodel.cpp	/^static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)$/;"	f	file:
NotifyAddressBookChanged	wallet.h	/^    boost::signals2::signal<void (CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:CWallet
NotifyAlertChanged	qt/clientmodel.cpp	/^static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyAlertChanged	ui_interface.h	/^    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;$/;"	m	class:CClientUIInterface
NotifyBlocksChanged	qt/clientmodel.cpp	/^static void NotifyBlocksChanged(ClientModel *clientmodel)$/;"	f	file:
NotifyBlocksChanged	ui_interface.h	/^    boost::signals2::signal<void ()> NotifyBlocksChanged;$/;"	m	class:CClientUIInterface
NotifyKeyStoreStatusChanged	qt/walletmodel.cpp	/^static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStore *wallet)$/;"	f	file:
NotifyNumConnectionsChanged	qt/clientmodel.cpp	/^static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)$/;"	f	file:
NotifyNumConnectionsChanged	ui_interface.h	/^    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;$/;"	m	class:CClientUIInterface
NotifyStatusChanged	keystore.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransactionChanged	qt/walletmodel.cpp	/^static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)$/;"	f	file:
NotifyTransactionChanged	wallet.h	/^    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;$/;"	m	class:CWallet
NumConfirmations	qt/transactionrecord.h	/^    static const int NumConfirmations = 5;$/;"	m	class:TransactionRecord
OK	qt/addresstablemodel.h	/^        OK,$/;"	e	enum:AddressTableModel::EditStatus
OK	qt/walletmodel.h	/^        OK,$/;"	e	enum:WalletModel::StatusCode
OK	ui_interface.h	/^        OK                    = 0x00000004,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
OK_DEFAULT	ui_interface.h	/^        OK_DEFAULT            = 0x00000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
OPTIONSDIALOG_H	qt/optionsdialog.h	2;"	d
OPTIONSMODEL_H	qt/optionsmodel.h	2;"	d
OP_0	script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_AND	script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_BOOLAND	script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSIG	script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_DEPTH	script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_FALSE	script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IF	script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LSHIFT	script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MAX	script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	script.h	/^    OP_NOP2 = 0xb1,$/;"	e	enum:opcodetype
OP_NOP3	script.h	/^    OP_NOP3 = 0xb2,$/;"	e	enum:opcodetype
OP_NOP4	script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP9	script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OR	script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PICK	script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
OVERVIEWPAGE_H	qt/overviewpage.h	2;"	d
Obj_member_type	json/json_spirit_writer_template.h	/^        typedef typename Object_type::value_type Obj_member_type;$/;"	t	class:json_spirit::Generator
Object	json/json_spirit_value.h	/^        typedef typename Config::Object_type Object;$/;"	t	class:json_spirit::Value_impl
Object	json/json_spirit_value.h	/^    typedef Config::Object_type Object;$/;"	t	namespace:json_spirit
Object_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Semantic_actions
Object_type	json/json_spirit_value.h	/^        typedef std::map< String_type, Value_type > Object_type;$/;"	t	struct:json_spirit::Config_map
Object_type	json/json_spirit_value.h	/^        typedef std::vector< Pair_type > Object_type;$/;"	t	struct:json_spirit::Config_vector
Object_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Generator
Offline	qt/transactionrecord.h	/^        Offline,$/;"	e	enum:TransactionStatus::Status
Open	db.cpp	/^bool CDBEnv::Open(boost::filesystem::path pathEnv_)$/;"	f	class:CDBEnv
OpenBlockFile	main.cpp	/^FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)$/;"	f
OpenNetworkConnection	net.cpp	/^bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *strDest, bool fOneShot)$/;"	f
OpenUntilBlock	qt/transactionrecord.h	/^        OpenUntilBlock,$/;"	e	enum:TransactionStatus::Status
OpenUntilDate	qt/transactionrecord.h	/^        OpenUntilDate,$/;"	e	enum:TransactionStatus::Status
OptionID	qt/optionsmodel.h	/^    enum OptionID {$/;"	g	class:OptionsModel
OptionIDRowCount	qt/optionsmodel.h	/^        OptionIDRowCount,$/;"	e	enum:OptionsModel::OptionID
OptionsDialog	qt/optionsdialog.cpp	/^OptionsDialog::OptionsDialog(QWidget *parent) :$/;"	f	class:OptionsDialog
OptionsDialog	qt/optionsdialog.h	/^class OptionsDialog : public QDialog$/;"	c
OptionsModel	qt/optionsmodel.cpp	/^OptionsModel::OptionsModel(QObject *parent) :$/;"	f	class:OptionsModel
OptionsModel	qt/optionsmodel.h	/^class OptionsModel : public QAbstractListModel$/;"	c
Other	qt/transactionrecord.h	/^        Other,$/;"	e	enum:TransactionRecord::Type
OutputDebugStringF	util.cpp	/^inline int OutputDebugStringF(const char* pszFormat, ...)$/;"	f
OverviewPage	qt/overviewpage.cpp	/^OverviewPage::OverviewPage(QWidget *parent) :$/;"	f	class:OverviewPage
OverviewPage	qt/overviewpage.h	/^class OverviewPage : public QWidget$/;"	c
PAGESIZE	allocators.h	34;"	d
PAIRTYPE	util.h	60;"	d
PBKDF2_SHA256	scrypt.c	/^PBKDF2_SHA256(const uint8_t *passwd, size_t passwdlen, const uint8_t *salt,$/;"	f	file:
PRI64d	util.h	49;"	d
PRI64d	util.h	53;"	d
PRI64u	util.h	50;"	d
PRI64u	util.h	54;"	d
PRI64x	util.h	51;"	d
PRI64x	util.h	55;"	d
PRIVKEY_ADDRESS	base58.h	/^        PRIVKEY_ADDRESS = CBitcoinAddress::PUBKEY_ADDRESS + 128,$/;"	e	enum:CBitcoinSecret::__anon2
PRIVKEY_ADDRESS_TEST	base58.h	/^        PRIVKEY_ADDRESS_TEST = CBitcoinAddress::PUBKEY_ADDRESS_TEST + 128,$/;"	e	enum:CBitcoinSecret::__anon2
PROTOCOL_VERSION	version.h	/^static const int PROTOCOL_VERSION = 60001;$/;"	v
PUBKEY_ADDRESS	base58.h	/^        PUBKEY_ADDRESS = 93, \/\/ MovieCoin addresses start with e$/;"	e	enum:CBitcoinAddress::__anon1
PUBKEY_ADDRESS_TEST	base58.h	/^        PUBKEY_ADDRESS_TEST = 111,$/;"	e	enum:CBitcoinAddress::__anon1
Pair	json/json_spirit_value.h	/^    typedef Config::Pair_type   Pair;$/;"	t	namespace:json_spirit
Pair_impl	json/json_spirit_value.h	/^    Pair_impl< Config >::Pair_impl( const String_type& name, const Value_type& value )$/;"	f	class:json_spirit::Pair_impl
Pair_impl	json/json_spirit_value.h	/^    struct Pair_impl$/;"	s	namespace:json_spirit
Pair_type	json/json_spirit_value.h	/^        typedef Pair_impl < Config_vector > Pair_type;$/;"	t	struct:json_spirit::Config_vector
Pair_type	json/json_spirit_value.h	/^        typedef typename Object_type::value_type Pair_type;$/;"	t	struct:json_spirit::Config_map
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseHex_expected	test/util_tests.cpp	/^static const unsigned char ParseHex_expected[65] = {$/;"	v	file:
ParseMoney	util.cpp	/^bool ParseMoney(const char* pszIn, int64& nRet)$/;"	f
ParseMoney	util.cpp	/^bool ParseMoney(const string& str, int64& nRet)$/;"	f
ParseNetwork	netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseParameters	util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParseScript	test/script_tests.cpp	/^ParseScript(string s)$/;"	f
ParseString	util.cpp	/^void ParseString(const string& str, char c, vector<string>& v)$/;"	f
PoolMining	qt/clientmodel.h	/^        PoolMining$/;"	e	enum:ClientModel::MiningType
Posn_iter_t	json/json_spirit_stream_reader.h	/^        typedef spirit_namespace::position_iterator< typename Mp_iters::Mp_iter > Posn_iter_t;$/;"	t	class:json_spirit::Stream_reader_thrower
PrintBlockTree	main.cpp	/^void PrintBlockTree()$/;"	f
PrintException	util.cpp	/^void PrintException(std::exception* pex, const char* pszThread)$/;"	f
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(std::exception* pex, const char* pszThread)$/;"	f
PrintHex	script.h	/^    void PrintHex() const$/;"	f	class:CScript
PrintHex	util.h	/^inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintHex	util.h	/^void PrintHex(const T pbegin, const T pend, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintLockContention	sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintWallet	wallet.cpp	/^void CWallet::PrintWallet(const CBlock& block)$/;"	f	class:CWallet
PrintWallets	main.cpp	/^void static PrintWallets(const CBlock& block)$/;"	f	file:
ProcessAlert	main.cpp	/^bool CAlert::ProcessAlert()$/;"	f	class:CAlert
ProcessBlock	main.cpp	/^bool ProcessBlock(CNode* pfrom, CBlock* pblock)$/;"	f
ProcessMessage	main.cpp	/^bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)$/;"	f	file:
ProcessMessages	main.cpp	/^bool ProcessMessages(CNode* pfrom)$/;"	f
ProcessOneShot	net.cpp	/^void static ProcessOneShot()$/;"	f	file:
ProxyIP	qt/optionsmodel.h	/^        ProxyIP,           \/\/ QString$/;"	e	enum:OptionsModel::OptionID
ProxyPort	qt/optionsmodel.h	/^        ProxyPort,         \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxySocksVersion	qt/optionsmodel.h	/^        ProxySocksVersion, \/\/ int$/;"	e	enum:OptionsModel::OptionID
ProxyUse	qt/optionsmodel.h	/^        ProxyUse,          \/\/ bool$/;"	e	enum:OptionsModel::OptionID
PushAddress	net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushAll	script.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushGetBlocks	net.cpp	/^void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)$/;"	f	class:CNode
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1, const T2& a2,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand,$/;"	f	class:CNode
PushVersion	net.cpp	/^void CNode::PushVersion()$/;"	f	class:CNode
QRCODEDIALOG_H	qt/qrcodedialog.h	2;"	d
QRCodeDialog	qt/qrcodedialog.cpp	/^QRCodeDialog::QRCodeDialog(const QString &addr, const QString &label, bool enableReq, QWidget *parent) :$/;"	f	class:QRCodeDialog
QRCodeDialog	qt/qrcodedialog.h	/^class QRCodeDialog : public QDialog$/;"	c
QSystemTray	qt/notificator.h	/^        QSystemTray, \/**< Use QSystemTray::showMessage *\/$/;"	e	enum:Notificator::Mode
QTIPCSERVER_H	qt/qtipcserver.h	2;"	d
QVALIDATEDLINEEDIT_H	qt/qvalidatedlineedit.h	2;"	d
QVALUECOMBOBOX_H	qt/qvaluecombobox.h	2;"	d
QValidatedLineEdit	qt/qvalidatedlineedit.cpp	/^QValidatedLineEdit::QValidatedLineEdit(QWidget *parent) :$/;"	f	class:QValidatedLineEdit
QValidatedLineEdit	qt/qvalidatedlineedit.h	/^class QValidatedLineEdit : public QLineEdit$/;"	c
QValueComboBox	qt/qvaluecombobox.cpp	/^QValueComboBox::QValueComboBox(QWidget *parent) :$/;"	f	class:QValueComboBox
QValueComboBox	qt/qvaluecombobox.h	/^class QValueComboBox : public QComboBox$/;"	c
QueueShutdown	qt/bitcoin.cpp	/^static void QueueShutdown()$/;"	f	file:
QueueShutdown	ui_interface.h	/^    boost::signals2::signal<void ()> QueueShutdown;$/;"	m	class:CClientUIInterface
RANDOM_REPEATS	test/wallet_tests.cpp	11;"	d	file:
READDATA	serialize.h	109;"	d
READWRITE	serialize.h	98;"	d
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
RESET	ui_interface.h	/^        RESET                 = 0x00004000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ROTL	scrypt.c	195;"	d	file:
RPCAcceptHandler	bitcoinrpc.cpp	/^static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCCONSOLE_H	qt/rpcconsole.h	2;"	d
RPCConsole	qt/rpcconsole.cpp	/^RPCConsole::RPCConsole(QWidget *parent) :$/;"	f	class:RPCConsole
RPCConsole	qt/rpcconsole.h	/^class RPCConsole: public QDialog$/;"	c
RPCConvertValues	bitcoinrpc.cpp	/^Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCExecutor	qt/rpcconsole.cpp	/^class RPCExecutor: public QObject$/;"	c	file:
RPCListen	bitcoinrpc.cpp	/^static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCTypeCheck	bitcoinrpc.cpp	/^void RPCTypeCheck(const Array& params,$/;"	f
RPCTypeCheck	bitcoinrpc.cpp	/^void RPCTypeCheck(const Object& o,$/;"	f
RUN_TESTS	test/wallet_tests.cpp	7;"	d	file:
RandAddSeed	util.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	util.cpp	/^void RandAddSeedPerfmon()$/;"	f
RandomOrphan	test/DoS_tests.cpp	/^CTransaction RandomOrphan()$/;"	f
Range	qt/transactionview.h	/^        Range$/;"	e	enum:TransactionView::DateEnum
Raw	key.h	/^    std::vector<unsigned char> Raw() const {$/;"	f	class:CPubKey
ReacceptWalletTransactions	wallet.cpp	/^void CWallet::ReacceptWalletTransactions()$/;"	f	class:CWallet
Read	db.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	walletdb.cpp	/^bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadAtCursor	db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)$/;"	f	class:CDB
ReadBestBlock	walletdb.h	/^    bool ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBestInvalidWork	db.cpp	/^bool CTxDB::ReadBestInvalidWork(CBigNum& bnBestInvalidWork)$/;"	f	class:CTxDB
ReadCScript	walletdb.h	/^    bool ReadCScript(const uint160 &hash, CScript& redeemScript)$/;"	f	class:CWalletDB
ReadCompactSize	serialize.h	/^uint64 ReadCompactSize(Stream& is)$/;"	f
ReadConfigFile	util.cpp	/^void ReadConfigFile(map<string, string>& mapSettingsRet,$/;"	f
ReadDefaultKey	walletdb.h	/^    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadFromDisk	main.cpp	/^bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)$/;"	f	class:CBlock
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout, CTxIndex& txindexRet)$/;"	f	class:CTransaction
ReadFromDisk	main.h	/^    bool ReadFromDisk(CDiskTxPos pos, FILE** pfileRet=NULL)$/;"	f	class:CTransaction
ReadFromDisk	main.h	/^    bool ReadFromDisk(unsigned int nFile, unsigned int nBlockPos, bool fReadTransactions=true)$/;"	f	class:CBlock
ReadHTTP	bitcoinrpc.cpp	/^int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)$/;"	f
ReadHTTPHeader	bitcoinrpc.cpp	/^int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)$/;"	f
ReadHTTPStatus	bitcoinrpc.cpp	/^int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)$/;"	f
ReadHashBestChain	db.cpp	/^bool CTxDB::ReadHashBestChain(uint256& hashBestChain)$/;"	f	class:CTxDB
ReadKey	walletdb.h	/^    bool ReadKey(const CPubKey& vchPubKey, CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
ReadName	walletdb.h	/^    bool ReadName(const std::string& strAddress, std::string& strName)$/;"	f	class:CWalletDB
ReadPool	walletdb.h	/^    bool ReadPool(int64 nPool, CKeyPool& keypool)$/;"	f	class:CWalletDB
ReadSetting	walletdb.h	/^    bool ReadSetting(const std::string& strKey, T& value)$/;"	f	class:CWalletDB
ReadTx	walletdb.h	/^    bool ReadTx(uint256 hash, CWalletTx& wtx)$/;"	f	class:CWalletDB
ReadTxIndex	db.cpp	/^bool CTxDB::ReadTxIndex(uint256 hash, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadVersion	db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CAutoFile
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CDataStream
Receive	qt/addresstablemodel.cpp	/^const QString AddressTableModel::Receive = "R";$/;"	m	class:AddressTableModel	file:
Receive	qt/addresstablemodel.h	/^    static const QString Receive; \/**< Specifies receive address *\/$/;"	m	class:AddressTableModel
ReceiveBufferSize	net.h	/^inline unsigned int ReceiveBufferSize() { return 1000*GetArg("-maxreceivebuffer", 5*1000); }$/;"	f
Receiving	qt/addresstablemodel.cpp	/^        Receiving$/;"	e	enum:AddressTableEntry::Type	file:
ReceivingTab	qt/addressbookpage.h	/^        ReceivingTab = 1$/;"	e	enum:AddressBookPage::Tabs
RecvCodeLine	irc.cpp	/^bool RecvCodeLine(SOCKET hSocket, const char* psz1, string& strRet)$/;"	f
RecvFromOther	qt/transactionrecord.h	/^        RecvFromOther,$/;"	e	enum:TransactionRecord::Type
RecvLine	net.cpp	/^bool RecvLine(SOCKET hSocket, string& strLine)$/;"	f
RecvLineIRC	irc.cpp	/^bool RecvLineIRC(SOCKET hSocket, string& strLine)$/;"	f
RecvUntil	irc.cpp	/^int RecvUntil(SOCKET hSocket, const char* psz1, const char* psz2=NULL, const char* psz3=NULL, const char* psz4=NULL)$/;"	f
RecvWithAddress	qt/transactionrecord.h	/^        RecvWithAddress,$/;"	e	enum:TransactionRecord::Type
RegisterWallet	main.cpp	/^void RegisterWallet(CWallet* pwalletIn)$/;"	f
RelayInventory	net.h	/^inline void RelayInventory(const CInv& inv)$/;"	f
RelayMessage	net.h	/^inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)$/;"	f
RelayMessage	net.h	/^void RelayMessage(const CInv& inv, const T& a)$/;"	f
RelayTo	main.h	/^    bool RelayTo(CNode* pnode) const$/;"	f	class:CAlert
RelayWalletTransaction	wallet.cpp	/^void CWalletTx::RelayWalletTransaction()$/;"	f	class:CWalletTx
RelayWalletTransaction	wallet.cpp	/^void CWalletTx::RelayWalletTransaction(CTxDB& txdb)$/;"	f	class:CWalletTx
Release	net.h	/^    void Release()$/;"	f	class:CNode
Release	sync.h	/^    void Release() {$/;"	f	class:CSemaphoreGrant
RenameOver	util.cpp	/^bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)$/;"	f
RenameThread	util.cpp	/^void RenameThread(const char* name)$/;"	f
Reorganize	main.cpp	/^bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	file:
ResendWalletTransactions	main.cpp	/^void static ResendWalletTransactions()$/;"	f	file:
ResendWalletTransactions	wallet.cpp	/^void CWallet::ResendWalletTransactions()$/;"	f	class:CWallet
ReserveKeyFromKeyPool	wallet.cpp	/^void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)$/;"	f	class:CWallet
Reset	key.cpp	/^void CKey::Reset()$/;"	f	class:CKey
ResetArgs	test/getarg_tests.cpp	/^ResetArgs(const std::string& strArg)$/;"	f	file:
ReturnKey	wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	wallet.cpp	/^void CWallet::ReturnKey(int64 nIndex)$/;"	f	class:CWallet
Rewind	serialize.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
Rewrite	db.cpp	/^bool CDB::Rewrite(const string& strFile, const char* pszSkip)$/;"	f	class:CDB
RoleIndex	qt/addresstablemodel.h	/^    enum RoleIndex {$/;"	g	class:AddressTableModel
RoleIndex	qt/bitcoinunits.h	/^    enum RoleIndex {$/;"	g	class:BitcoinUnits
RoleIndex	qt/transactiontablemodel.h	/^    enum RoleIndex {$/;"	g	class:TransactionTableModel
SCRIPT_ADDRESS	base58.h	/^        SCRIPT_ADDRESS = 5,$/;"	e	enum:CBitcoinAddress::__anon1
SCRIPT_ADDRESS_TEST	base58.h	/^        SCRIPT_ADDRESS_TEST = 196,$/;"	e	enum:CBitcoinAddress::__anon1
SCRYPT_H	scrypt.h	2;"	d
SCRYPT_SCRATCHPAD_SIZE	scrypt.h	/^const int SCRYPT_SCRATCHPAD_SIZE = 131072 + 63;$/;"	v
SENDCOINSDIALOG_H	qt/sendcoinsdialog.h	2;"	d
SENDCOINSENTRY_H	qt/sendcoinsentry.h	2;"	d
SERVICE_TAX_PERCENTAGE	main.h	/^static const double SERVICE_TAX_PERCENTAGE = 0.02;$/;"	v
SER_BLOCKHEADERONLY	serialize.h	/^    SER_BLOCKHEADERONLY = (1 << 17),$/;"	e	enum:__anon10
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon10
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon10
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon10
SER_SKIPSIG	serialize.h	/^    SER_SKIPSIG         = (1 << 16),$/;"	e	enum:__anon10
SETUP	ui_interface.h	/^        SETUP                 = 0x00020000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SHA256Transform	main.cpp	/^void SHA256Transform(void* pstate, void* pinput, const void* pinit)$/;"	f
SHARE_FAIL	qt/miningpage.h	20;"	d
SHARE_SUCCESS	qt/miningpage.h	19;"	d
SIGHASH_ALL	script.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon9
SIGHASH_ANYONECANPAY	script.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon9
SIGHASH_NONE	script.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon9
SIGHASH_SINGLE	script.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon9
SIGNVERIFYMESSAGEDIALOG_H	qt/signverifymessagedialog.h	2;"	d
SOCKET	compat.h	/^typedef u_int SOCKET;$/;"	t
SOCKET_ERROR	compat.h	46;"	d
SSLIOStreamDevice	bitcoinrpc.cpp	/^    SSLIOStreamDevice(asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)$/;"	f	class:SSLIOStreamDevice
SSLIOStreamDevice	bitcoinrpc.cpp	/^class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {$/;"	c	file:
STARTED	qt/miningpage.h	18;"	d
STATUSBAR_ICONSIZE	qt/guiconstants.h	/^static const int STATUSBAR_ICONSIZE = 16;$/;"	v
STRINGIFY	version.cpp	43;"	d	file:
STYLE_INVALID	qt/guiconstants.h	14;"	d
S_IRUSR	util.h	81;"	d
S_IWUSR	util.h	82;"	d
ScanForWalletTransaction	wallet.cpp	/^int CWallet::ScanForWalletTransaction(const uint256& hashTx)$/;"	f	class:CWallet
ScanForWalletTransactions	wallet.cpp	/^int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)$/;"	f	class:CWallet
ScanHash_CryptoPP	main.cpp	/^unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)$/;"	f	file:
ScriptMap	keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptPubKeyToJSON	rpcrawtransaction.cpp	/^ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)$/;"	f
ScriptSigArgsExpected	script.cpp	/^int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)$/;"	f
SecureString	allocators.h	/^typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;$/;"	t
SeenLocal	net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
Select	addrman.h	/^    CAddress Select(int nUnkBias = 50)$/;"	f	class:CAddrMan
SelectCoins	wallet.cpp	/^bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectCoinsMinConf	wallet.cpp	/^bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,$/;"	f	class:CWallet
SelectTried	addrman.cpp	/^int CAddrMan::SelectTried(int nKBucket)$/;"	f	class:CAddrMan
Select_	addrman.cpp	/^CAddress CAddrMan::Select_(int nUnkBias)$/;"	f	class:CAddrMan
Semantic_actions	json/json_spirit_reader_template.h	/^        Semantic_actions( Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
Semantic_actions	json/json_spirit_reader_template.h	/^    class Semantic_actions $/;"	c	namespace:json_spirit
Semantic_actions_t	json/json_spirit_reader_template.h	/^        typedef Semantic_actions< Value_type, Iter_type > Semantic_actions_t;$/;"	t	class:json_spirit::Json_grammer
Send	irc.cpp	/^static bool Send(SOCKET hSocket, const char* pszSend)$/;"	f	file:
Send	qt/addresstablemodel.cpp	/^const QString AddressTableModel::Send = "S";$/;"	m	class:AddressTableModel	file:
Send	qt/addresstablemodel.h	/^    static const QString Send; \/**< Specifies send address *\/$/;"	m	class:AddressTableModel
SendBufferSize	net.h	/^inline unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 1*1000); }$/;"	f
SendCoinsDialog	qt/sendcoinsdialog.cpp	/^SendCoinsDialog::SendCoinsDialog(QWidget *parent) :$/;"	f	class:SendCoinsDialog
SendCoinsDialog	qt/sendcoinsdialog.h	/^class SendCoinsDialog : public QDialog$/;"	c
SendCoinsEntry	qt/sendcoinsentry.cpp	/^SendCoinsEntry::SendCoinsEntry(QWidget *parent) :$/;"	f	class:SendCoinsEntry
SendCoinsEntry	qt/sendcoinsentry.h	/^class SendCoinsEntry : public QFrame$/;"	c
SendCoinsRecipient	qt/walletmodel.h	/^class SendCoinsRecipient$/;"	c
SendCoinsReturn	qt/walletmodel.h	/^        SendCoinsReturn(StatusCode status,$/;"	f	struct:WalletModel::SendCoinsReturn
SendCoinsReturn	qt/walletmodel.h	/^    struct SendCoinsReturn$/;"	s	class:WalletModel
SendMessages	main.cpp	/^bool SendMessages(CNode* pto, bool fSendTrickle)$/;"	f
SendMoney	wallet.cpp	/^string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee, std::string strTxComment)$/;"	f	class:CWallet
SendMoneyToDestination	wallet.cpp	/^string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee, std::string strTxComment)$/;"	f	class:CWallet
SendToAddress	qt/transactionrecord.h	/^        SendToAddress,$/;"	e	enum:TransactionRecord::Type
SendToOther	qt/transactionrecord.h	/^        SendToOther,$/;"	e	enum:TransactionRecord::Type
SendToSelf	qt/transactionrecord.h	/^        SendToSelf$/;"	e	enum:TransactionRecord::Type
Sending	qt/addresstablemodel.cpp	/^        Sending,$/;"	e	enum:AddressTableEntry::Type	file:
SendingTab	qt/addressbookpage.h	/^        SendingTab = 0,$/;"	e	enum:AddressBookPage::Tabs
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionGetSerializeSize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)$/;"	f
Serialize	bignum.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const$/;"	f	class:CBigNum
Serialize	serialize.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:CDataStream
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a, long nType, int nVersion)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a,           int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed char a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed int a,     int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed short a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned char a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned short a, int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const CScript& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str, int, int)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	test/script_P2SH_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	test/sigopcount_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	uint256.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:base_uint
SerializeHash	util.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
Set	base58.h	/^    bool Set(const CKeyID &id) {$/;"	f	class:CBitcoinAddress
Set	base58.h	/^    bool Set(const CScriptID &id) {$/;"	f	class:CBitcoinAddress
Set	base58.h	/^    bool Set(const CTxDestination &dest)$/;"	f	class:CBitcoinAddress
Set	main.h	/^    void Set(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
Set	script.cpp	/^    Set(uint256 hash, const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& pubKey)$/;"	f	class:CSignatureCache
SetAddressBookName	wallet.cpp	/^bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)$/;"	f	class:CWallet
SetBestChain	main.cpp	/^bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	class:CBlock
SetBestChain	main.cpp	/^void static SetBestChain(const CBlockLocator& loc)$/;"	f	file:
SetBestChain	wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBestChainInner	main.cpp	/^bool CBlock::SetBestChainInner(CTxDB& txdb, CBlockIndex *pindexNew)$/;"	f	class:CBlock
SetCompact	bignum.h	/^    CBigNum& SetCompact(unsigned int nCompact)$/;"	f	class:CBigNum
SetCompactSignature	key.cpp	/^bool CKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
SetCompressedPubKey	key.cpp	/^void CKey::SetCompressedPubKey()$/;"	f	class:CKey
SetCrypted	keystore.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetData	base58.h	/^    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	base58.h	/^    void SetData(int nVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDefaultKey	wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetDestination	script.cpp	/^void CScript::SetDestination(const CTxDestination& dest)$/;"	f	class:CScript
SetDetach	db.h	/^    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }$/;"	f	class:CDBEnv
SetHex	bignum.h	/^    void SetHex(const std::string& str)$/;"	f	class:CBigNum
SetHex	uint256.h	/^    void SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	uint256.h	/^    void SetHex(const std::string& str)$/;"	f	class:base_uint
SetIP	netbase.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetKey	crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLimited	net.cpp	/^void SetLimited(enum Network net, bool fLimited)$/;"	f
SetMaxVersion	wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	main.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock* pblock)$/;"	f	class:CMerkleTx
SetMinVersion	wallet.cpp	/^bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)$/;"	f	class:CWallet
SetMockTime	util.cpp	/^void SetMockTime(int64 nMockTimeIn)$/;"	f
SetMultisig	script.cpp	/^void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)$/;"	f	class:CScript
SetNameProxy	netbase.cpp	/^bool SetNameProxy(CService addrProxy, int nSocksVersion) {$/;"	f
SetNull	main.h	/^    void SetNull() { hash = 0; n = (unsigned int) -1; }$/;"	f	class:COutPoint
SetNull	main.h	/^    void SetNull() { nFile = (unsigned int) -1; nBlockPos = 0; nTxPos = 0; }$/;"	f	class:CDiskTxPos
SetNull	main.h	/^    void SetNull() { ptx = NULL; n = (unsigned int) -1; }$/;"	f	class:CInPoint
SetNull	main.h	/^    void SetNull()$/;"	f	class:CAlert
SetNull	main.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	main.h	/^    void SetNull()$/;"	f	class:CBlockLocator
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTransaction
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTxIndex
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	main.h	/^    void SetNull()$/;"	f	class:CUnsignedAlert
SetNull	wallet.h	/^    void SetNull()$/;"	f	class:CAccount
SetNull	wallet.h	/^    void SetNull()$/;"	f	class:CAccountingEntry
SetPort	netbase.cpp	/^void CService::SetPort(unsigned short portIn)$/;"	f	class:CService
SetPort	netbase.h	18;"	d
SetPrivKey	key.cpp	/^bool CKey::SetPrivKey(const CPrivKey& vchPrivKey)$/;"	f	class:CKey
SetProxy	netbase.cpp	/^bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion) {$/;"	f
SetPubKey	key.cpp	/^bool CKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:CKey
SetReachable	net.cpp	/^void SetReachable(enum Network net, bool fFlag)$/;"	f
SetSecret	base58.h	/^    void SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CBitcoinSecret
SetSecret	key.cpp	/^bool CKey::SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CKey
SetSockAddr	netbase.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSpecial	netbase.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetStartOnSystemStartup	qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart) { return false; }$/;"	f	namespace:GUIUtil
SetStartOnSystemStartup	qt/guiutil.cpp	/^bool SetStartOnSystemStartup(bool fAutoStart)$/;"	f	namespace:GUIUtil
SetString	base58.h	/^    bool SetString(const char* psz)$/;"	f	class:CBase58Data
SetString	base58.h	/^    bool SetString(const char* pszSecret)$/;"	f	class:CBitcoinSecret
SetString	base58.h	/^    bool SetString(const std::string& str)$/;"	f	class:CBase58Data
SetString	base58.h	/^    bool SetString(const std::string& strSecret)$/;"	f	class:CBitcoinSecret
SetThreadPriority	util.h	/^inline void SetThreadPriority(int nPriority)$/;"	f
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CAutoFile
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CAutoFile
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetupDummyInputs	test/transaction_tests.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, MapPrevTx& inputsRet)$/;"	f	file:
ShrinkDebugFile	util.cpp	/^void ShrinkDebugFile()$/;"	f
ShrinkNew	addrman.cpp	/^int CAddrMan::ShrinkNew(int nUBucket)$/;"	f	class:CAddrMan
Shutdown	init.cpp	/^void Shutdown(void* parg)$/;"	f
Shutdown	test/test_bitcoin.cpp	/^void Shutdown(void* parg)$/;"	f
Sign	key.cpp	/^bool CKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
Sign1	script.cpp	/^bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignCompact	key.cpp	/^bool CKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
SignN	script.cpp	/^bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignSignature	script.cpp	/^bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignSignature	script.cpp	/^bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignVerifyMessageDialog	qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::SignVerifyMessageDialog(QWidget *parent) :$/;"	f	class:SignVerifyMessageDialog
SignVerifyMessageDialog	qt/signverifymessagedialog.h	/^class SignVerifyMessageDialog : public QDialog$/;"	c
SignatureHash	script.cpp	/^uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
Sleep	util.h	/^inline void Sleep(int64 n)$/;"	f
Socks4	netbase.cpp	/^bool static Socks4(const CService &addrDest, SOCKET& hSocket)$/;"	f	file:
Socks5	netbase.cpp	/^bool static Socks5(string strDest, int port, SOCKET& hSocket)$/;"	f	file:
SoftSetArg	util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
SoloMining	qt/clientmodel.h	/^        SoloMining,$/;"	e	enum:ClientModel::MiningType
Solver	script.cpp	/^bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,$/;"	f
Solver	script.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f
SplitHostPort	netbase.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
StackString	script.h	/^inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)$/;"	f
StartAtStartup	qt/optionsmodel.h	/^        StartAtStartup,    \/\/ bool$/;"	e	enum:OptionsModel::OptionID
StartNode	net.cpp	/^void StartNode(void* parg)$/;"	f
StartShutdown	init.cpp	/^void StartShutdown()$/;"	f
StartShutdown	test/test_bitcoin.cpp	/^void StartShutdown()$/;"	f
StartupShortcutPath	qt/guiutil.cpp	/^boost::filesystem::path static StartupShortcutPath()$/;"	f	namespace:GUIUtil
Status	qt/transactionrecord.h	/^    enum Status {$/;"	g	class:TransactionStatus
Status	qt/transactiontablemodel.h	/^        Status = 0,$/;"	e	enum:TransactionTableModel::ColumnIndex
StatusCode	qt/walletmodel.h	/^    enum StatusCode \/\/ Returned by sendCoins$/;"	g	class:WalletModel
StopNode	net.cpp	/^bool StopNode()$/;"	f
Stream_reader	json/json_spirit_stream_reader.h	/^        Stream_reader( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader
Stream_reader	json/json_spirit_stream_reader.h	/^    class Stream_reader$/;"	c	namespace:json_spirit
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^        Stream_reader_thrower( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader_thrower
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^    class Stream_reader_thrower$/;"	c	namespace:json_spirit
String_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Semantic_actions
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_map
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_vector
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	class:json_spirit::Value_impl
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	struct:json_spirit::Pair_impl
String_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Generator
SwapRandom	addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
SyncWithWallets	main.cpp	/^void SyncWithWallets(const CTransaction& tx, const CBlock* pblock, bool fUpdate)$/;"	f
THREAD_ADDEDCONNECTIONS	net.h	/^    THREAD_ADDEDCONNECTIONS,$/;"	e	enum:threadId
THREAD_DNSSEED	net.h	/^    THREAD_DNSSEED,$/;"	e	enum:threadId
THREAD_DUMPADDRESS	net.h	/^    THREAD_DUMPADDRESS,$/;"	e	enum:threadId
THREAD_MAX	net.h	/^    THREAD_MAX$/;"	e	enum:threadId
THREAD_MESSAGEHANDLER	net.h	/^    THREAD_MESSAGEHANDLER,$/;"	e	enum:threadId
THREAD_MINER	net.h	/^    THREAD_MINER,$/;"	e	enum:threadId
THREAD_OPENCONNECTIONS	net.h	/^    THREAD_OPENCONNECTIONS,$/;"	e	enum:threadId
THREAD_PRIORITY_ABOVE_NORMAL	util.h	583;"	d
THREAD_PRIORITY_BELOW_NORMAL	util.h	581;"	d
THREAD_PRIORITY_LOWEST	util.h	580;"	d
THREAD_PRIORITY_NORMAL	util.h	582;"	d
THREAD_RPCHANDLER	net.h	/^    THREAD_RPCHANDLER,$/;"	e	enum:threadId
THREAD_RPCLISTENER	net.h	/^    THREAD_RPCLISTENER,$/;"	e	enum:threadId
THREAD_SOCKETHANDLER	net.h	/^    THREAD_SOCKETHANDLER,$/;"	e	enum:threadId
THREAD_UPNP	net.h	/^    THREAD_UPNP,$/;"	e	enum:threadId
TOOLTIP_WRAP_THRESHOLD	qt/guiconstants.h	/^static const int TOOLTIP_WRAP_THRESHOLD = 80;$/;"	v
TOTAL_GENERATION	main.h	/^static const int64 TOTAL_GENERATION = MAX_MONEY;$/;"	v
TRANSACTIONDESCDIALOG_H	qt/transactiondescdialog.h	2;"	d
TRANSACTIONDESC_H	qt/transactiondesc.h	2;"	d
TRANSACTIONFILTERPROXY_H	qt/transactionfilterproxy.h	2;"	d
TRANSACTIONRECORD_H	qt/transactionrecord.h	2;"	d
TRANSACTIONTABLEMODEL_H	qt/transactiontablemodel.h	2;"	d
TRANSACTIONVIEW_H	qt/transactionview.h	2;"	d
TRY_LOCK	sync.h	110;"	d
TX_MULTISIG	script.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	script.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_PUBKEY	script.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	script.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	script.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TYPE	qt/transactionfilterproxy.h	/^    static quint32 TYPE(int type) { return 1<<type; }$/;"	f	class:TransactionFilterProxy
Tabs	qt/addressbookpage.h	/^    enum Tabs {$/;"	g	class:AddressBookPage
TestNetFixture	test/rpc_tests.cpp	/^    TestNetFixture() { fTestNet = true; }$/;"	f	struct:TestNetFixture
TestNetFixture	test/rpc_tests.cpp	/^struct TestNetFixture$/;"	s	file:
TestParse	test/netbase_tests.cpp	/^bool static TestParse(string src, string canon)$/;"	f	file:
TestSplitHost	test/netbase_tests.cpp	/^bool static TestSplitHost(string test, string host, int port)$/;"	f	file:
TestingSetup	test/test_bitcoin.cpp	/^    TestingSetup() {$/;"	f	struct:TestingSetup
TestingSetup	test/test_bitcoin.cpp	/^BOOST_GLOBAL_FIXTURE(TestingSetup);$/;"	v
TestingSetup	test/test_bitcoin.cpp	/^struct TestingSetup {$/;"	s	file:
Testuint256AdHoc	uint256.h	/^inline int Testuint256AdHoc(std::vector<std::string> vArg)$/;"	f
ThisMonth	qt/transactionview.h	/^        ThisMonth,$/;"	e	enum:TransactionView::DateEnum
ThisWeek	qt/transactionview.h	/^        ThisWeek,$/;"	e	enum:TransactionView::DateEnum
ThisYear	qt/transactionview.h	/^        ThisYear,$/;"	e	enum:TransactionView::DateEnum
ThreadBitcoinMiner	main.cpp	/^void static ThreadBitcoinMiner(void* parg)$/;"	f	file:
ThreadCleanWalletPassphrase	bitcoinrpc.cpp	/^void ThreadCleanWalletPassphrase(void* parg)$/;"	f
ThreadDNSAddressSeed	net.cpp	/^void ThreadDNSAddressSeed(void* parg)$/;"	f
ThreadDNSAddressSeed2	net.cpp	/^void ThreadDNSAddressSeed2(void* parg)$/;"	f
ThreadDumpAddress	net.cpp	/^void ThreadDumpAddress(void* parg)$/;"	f
ThreadDumpAddress2	net.cpp	/^void ThreadDumpAddress2(void* parg)$/;"	f
ThreadFlushWalletDB	walletdb.cpp	/^void ThreadFlushWalletDB(void* parg)$/;"	f
ThreadGetMyExternalIP	net.cpp	/^void ThreadGetMyExternalIP(void* parg)$/;"	f
ThreadIRCSeed	irc.cpp	/^void ThreadIRCSeed(void* parg)$/;"	f
ThreadIRCSeed2	irc.cpp	/^void ThreadIRCSeed2(void* parg)$/;"	f
ThreadMapPort	net.cpp	/^void ThreadMapPort(void* parg)$/;"	f
ThreadMapPort2	net.cpp	/^void ThreadMapPort2(void* parg)$/;"	f
ThreadMessageHandler	net.cpp	/^void ThreadMessageHandler(void* parg)$/;"	f
ThreadMessageHandler2	net.cpp	/^void ThreadMessageHandler2(void* parg)$/;"	f
ThreadOpenAddedConnections	net.cpp	/^void ThreadOpenAddedConnections(void* parg)$/;"	f
ThreadOpenAddedConnections2	net.cpp	/^void ThreadOpenAddedConnections2(void* parg)$/;"	f
ThreadOpenConnections	net.cpp	/^void ThreadOpenConnections(void* parg)$/;"	f
ThreadOpenConnections2	net.cpp	/^void ThreadOpenConnections2(void* parg)$/;"	f
ThreadRPCServer	bitcoinrpc.cpp	/^void ThreadRPCServer(void* parg)$/;"	f
ThreadRPCServer2	bitcoinrpc.cpp	/^void ThreadRPCServer2(void* parg)$/;"	f
ThreadRPCServer3	bitcoinrpc.cpp	/^void ThreadRPCServer3(void* parg)$/;"	f
ThreadSafeAskFee	qt/bitcoin.cpp	/^static bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)$/;"	f	file:
ThreadSafeAskFee	ui_interface.h	/^    boost::signals2::signal<bool (int64 nFeeRequired, const std::string& strCaption), boost::signals2::last_value<bool> > ThreadSafeAskFee;$/;"	m	class:CClientUIInterface
ThreadSafeHandleURI	qt/bitcoin.cpp	/^static void ThreadSafeHandleURI(const std::string& strURI)$/;"	f	file:
ThreadSafeHandleURI	ui_interface.h	/^    boost::signals2::signal<void (const std::string& strURI)> ThreadSafeHandleURI;$/;"	m	class:CClientUIInterface
ThreadSafeMessageBox	qt/bitcoin.cpp	/^static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)$/;"	f	file:
ThreadSafeMessageBox	ui_interface.h	/^    boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;$/;"	m	class:CClientUIInterface
ThreadSocketHandler	net.cpp	/^void ThreadSocketHandler(void* parg)$/;"	f
ThreadSocketHandler2	net.cpp	/^void ThreadSocketHandler2(void* parg)$/;"	f
ThreadTopUpKeyPool	bitcoinrpc.cpp	/^void ThreadTopUpKeyPool(void* parg)$/;"	f
ToAddress	qt/transactiontablemodel.h	/^        ToAddress = 3,$/;"	e	enum:TransactionTableModel::ColumnIndex
ToString	base58.h	/^    std::string ToString() const$/;"	f	class:CBase58Data
ToString	bignum.h	/^    std::string ToString(int nBase=10) const$/;"	f	class:CBigNum
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CDiskTxPos
ToString	main.h	/^    std::string ToString() const$/;"	f	class:COutPoint
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTransaction
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTxIn
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTxOut
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CUnsignedAlert
ToString	netbase.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	netbase.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	script.h	/^    std::string ToString() const$/;"	f	class:CScript
ToString	sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	uint256.h	/^    std::string ToString() const$/;"	f	class:base_uint
ToString	wallet.h	/^    std::string ToString() const$/;"	f	class:COutput
ToStringIP	netbase.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	netbase.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	netbase.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
Today	qt/transactionview.h	/^        Today,$/;"	e	enum:TransactionView::DateEnum
ToolTipToRichTextFilter	qt/guiutil.cpp	/^ToolTipToRichTextFilter::ToolTipToRichTextFilter(int size_threshold, QObject *parent) :$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
ToolTipToRichTextFilter	qt/guiutil.h	/^    class ToolTipToRichTextFilter : public QObject$/;"	c	namespace:GUIUtil
TopUpKeyPool	wallet.cpp	/^bool CWallet::TopUpKeyPool()$/;"	f	class:CWallet
TransactionCommitFailed	qt/walletmodel.h	/^        TransactionCommitFailed,$/;"	e	enum:WalletModel::StatusCode
TransactionCreationFailed	qt/walletmodel.h	/^        TransactionCreationFailed, \/\/ Error returned when wallet is still locked$/;"	e	enum:WalletModel::StatusCode
TransactionDesc	qt/transactiondesc.h	/^    TransactionDesc() {}$/;"	f	class:TransactionDesc
TransactionDesc	qt/transactiondesc.h	/^class TransactionDesc: public QObject$/;"	c
TransactionDescDialog	qt/transactiondescdialog.cpp	/^TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *parent) :$/;"	f	class:TransactionDescDialog
TransactionDescDialog	qt/transactiondescdialog.h	/^class TransactionDescDialog : public QDialog$/;"	c
TransactionFilterProxy	qt/transactionfilterproxy.cpp	/^TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :$/;"	f	class:TransactionFilterProxy
TransactionFilterProxy	qt/transactionfilterproxy.h	/^class TransactionFilterProxy : public QSortFilterProxyModel$/;"	c
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord():$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord(uint256 hash, int64 time):$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^    TransactionRecord(uint256 hash, int64 time,$/;"	f	class:TransactionRecord
TransactionRecord	qt/transactionrecord.h	/^class TransactionRecord$/;"	c
TransactionStatus	qt/transactionrecord.h	/^    TransactionStatus():$/;"	f	class:TransactionStatus
TransactionStatus	qt/transactionrecord.h	/^class TransactionStatus$/;"	c
TransactionTableModel	qt/transactiontablemodel.cpp	/^TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *parent):$/;"	f	class:TransactionTableModel
TransactionTableModel	qt/transactiontablemodel.h	/^class TransactionTableModel : public QAbstractTableModel$/;"	c
TransactionTablePriv	qt/transactiontablemodel.cpp	/^    TransactionTablePriv(CWallet *wallet, TransactionTableModel *parent):$/;"	f	class:TransactionTablePriv
TransactionTablePriv	qt/transactiontablemodel.cpp	/^class TransactionTablePriv$/;"	c	file:
TransactionView	qt/transactionview.cpp	/^TransactionView::TransactionView(QWidget *parent) :$/;"	f	class:TransactionView
TransactionView	qt/transactionview.h	/^class TransactionView : public QWidget$/;"	c
Translate	qt/bitcoin.cpp	/^static std::string Translate(const char* psz)$/;"	f	file:
Translate	ui_interface.h	/^    boost::signals2::signal<std::string (const char* psz)> Translate;$/;"	m	class:CClientUIInterface
TryAcquire	sync.h	/^    bool TryAcquire() {$/;"	f	class:CSemaphoreGrant
TryEnter	sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
TxIDRole	qt/transactiontablemodel.h	/^        TxIDRole,$/;"	e	enum:TransactionTableModel::RoleIndex
TxLessThan	qt/transactiontablemodel.cpp	/^struct TxLessThan$/;"	s	file:
TxToJSON	rpcrawtransaction.cpp	/^TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)$/;"	f
TxViewDelegate	qt/overviewpage.cpp	/^    TxViewDelegate(): QAbstractItemDelegate(), unit(BitcoinUnits::BTC)$/;"	f	class:TxViewDelegate
TxViewDelegate	qt/overviewpage.cpp	/^class TxViewDelegate : public QAbstractItemDelegate$/;"	c	file:
TxnAbort	db.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	db.h	/^    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	db.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	db.h	/^    bool TxnCommit()$/;"	f	class:CDB
Type	qt/addresstablemodel.cpp	/^    enum Type {$/;"	g	struct:AddressTableEntry	file:
Type	qt/transactionrecord.h	/^    enum Type$/;"	g	class:TransactionRecord
Type	qt/transactiontablemodel.h	/^        Type = 2,$/;"	e	enum:TransactionTableModel::ColumnIndex
TypeRole	qt/addresstablemodel.h	/^        TypeRole = Qt::UserRole \/**< Type of address (#Send or #Receive) *\/$/;"	e	enum:AddressTableModel::RoleIndex
TypeRole	qt/transactiontablemodel.h	/^        TypeRole = Qt::UserRole,$/;"	e	enum:TransactionTableModel::RoleIndex
Type_to_type	json/json_spirit_value.h	/^        struct Type_to_type$/;"	s	namespace:json_spirit::internal_
U	test/base58_tests.cpp	32;"	d	file:
UBEGIN	util.h	42;"	d
UEND	util.h	43;"	d
UNUSED	qt/bitcoinstrings.cpp	4;"	d	file:
UNUSED	qt/bitcoinstrings.cpp	6;"	d	file:
URITESTS_H	qt/test/uritests.h	2;"	d
URITests	qt/test/uritests.h	/^class URITests : public QObject$/;"	c
Ui	qt/aboutdialog.h	/^namespace Ui {$/;"	n
Ui	qt/addressbookpage.h	/^namespace Ui {$/;"	n
Ui	qt/askpassphrasedialog.h	/^namespace Ui {$/;"	n
Ui	qt/editaddressdialog.h	/^namespace Ui {$/;"	n
Ui	qt/miningpage.h	/^namespace Ui {$/;"	n
Ui	qt/optionsdialog.h	/^namespace Ui {$/;"	n
Ui	qt/overviewpage.h	/^namespace Ui {$/;"	n
Ui	qt/qrcodedialog.h	/^namespace Ui {$/;"	n
Ui	qt/rpcconsole.h	/^namespace Ui {$/;"	n
Ui	qt/sendcoinsdialog.h	/^namespace Ui {$/;"	n
Ui	qt/sendcoinsentry.h	/^namespace Ui {$/;"	n
Ui	qt/signverifymessagedialog.h	/^namespace Ui {$/;"	n
Ui	qt/transactiondescdialog.h	/^namespace Ui {$/;"	n
Unconfirmed	qt/transactionrecord.h	/^        Unconfirmed,$/;"	e	enum:TransactionStatus::Status
Unencrypted	qt/walletmodel.h	/^        Unencrypted,  \/\/ !wallet->IsCrypted()$/;"	e	enum:WalletModel::EncryptionStatus
Unit	qt/bitcoinunits.h	/^    enum Unit$/;"	g	class:BitcoinUnits
UnitRole	qt/bitcoinunits.h	/^        UnitRole = Qt::UserRole$/;"	e	enum:BitcoinUnits::RoleIndex
Unlock	keystore.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
Unlock	qt/askpassphrasedialog.h	/^        Unlock,     \/**< Ask passphrase and unlock *\/$/;"	e	enum:AskPassphraseDialog::Mode
Unlock	wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
UnlockContext	qt/walletmodel.cpp	/^WalletModel::UnlockContext::UnlockContext(WalletModel *wallet, bool valid, bool relock):$/;"	f	class:WalletModel::UnlockContext
UnlockContext	qt/walletmodel.h	/^        UnlockContext(const UnlockContext& obj) { CopyFrom(obj); }$/;"	f	class:WalletModel::UnlockContext
UnlockContext	qt/walletmodel.h	/^    class UnlockContext$/;"	c	class:WalletModel
Unlocked	qt/walletmodel.h	/^        Unlocked      \/\/ wallet->IsCrypted() && !wallet->IsLocked()$/;"	e	enum:WalletModel::EncryptionStatus
UnregisterWallet	main.cpp	/^void UnregisterWallet(CWallet* pwalletIn)$/;"	f
Unserialize	bignum.h	/^    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)$/;"	f	class:CBigNum
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a, long nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a,           int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed char& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed int& a,     int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed short& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a, int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, CScript& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str, int, int)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	uint256.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	class:base_uint
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
UpdateSpent	wallet.h	/^    bool UpdateSpent(const std::vector<char>& vfNewSpent)$/;"	f	class:CWalletTx
UpdateTime	main.cpp	/^void CBlock::UpdateTime(const CBlockIndex* pindexPrev)$/;"	f	class:CBlock
UpdateTxIndex	db.cpp	/^bool CTxDB::UpdateTxIndex(uint256 hash, const CTxIndex& txindex)$/;"	f	class:CTxDB
UpdatedTransaction	main.cpp	/^void static UpdatedTransaction(const uint256& hashTx)$/;"	f	file:
UpdatedTransaction	wallet.cpp	/^void CWallet::UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
Upgrade	qt/optionsmodel.cpp	/^bool OptionsModel::Upgrade()$/;"	f	class:OptionsModel
Value	json/json_spirit_value.h	/^    typedef Config::Value_type  Value;$/;"	t	namespace:json_spirit
ValueFromAmount	bitcoinrpc.cpp	/^Value ValueFromAmount(int64 amount)$/;"	f
ValueString	script.h	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( bool value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( boost::int64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( boost::uint64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Array& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Const_str_ptr value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Object& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const String_type& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Value_impl< Config >& other )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( double value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( int value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl()$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    class Value_impl$/;"	c	namespace:json_spirit
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_map > Value_type;$/;"	t	struct:json_spirit::Config_map
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_vector > Value_type;$/;"	t	struct:json_spirit::Config_vector
Value_type	json/json_spirit_value.h	/^        typedef typename Config::Value_type Value_type;$/;"	t	struct:json_spirit::Pair_impl
Value_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	g	namespace:json_spirit
Value_type_name	json/json_spirit_value.h	/^    static const char* Value_type_name[]={"obj", "array", "str", "bool", "int", "real", "null"};$/;"	m	namespace:json_spirit
Variant	json/json_spirit_value.h	/^                                bool, boost::int64_t, double > Variant;$/;"	t	class:json_spirit::Value_impl
Verify	key.cpp	/^bool CKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
Verify	test/script_P2SH_tests.cpp	/^Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)$/;"	f	file:
VerifyCompact	key.cpp	/^bool CKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
VerifyScript	script.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f
VerifySignature	script.cpp	/^bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, int nHashType)$/;"	f
WALLETMODEL_H	qt/walletmodel.h	2;"	d
WALLET_CRYPTO_KEY_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WALLET_UNLOCK_FAILURE	qt/addresstablemodel.h	/^        WALLET_UNLOCK_FAILURE, \/**< Wallet could not be unlocked to create new receiving address *\/$/;"	e	enum:AddressTableModel::EditStatus
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon12
WIN32_LEAN_AND_MEAN	allocators.h	17;"	d
WIN32_LEAN_AND_MEAN	compat.h	11;"	d
WIN32_LEAN_AND_MEAN	qt/guiutil.cpp	35;"	d	file:
WIN32_LEAN_AND_MEAN	util.cpp	51;"	d	file:
WRITEDATA	serialize.h	108;"	d
WSAEADDRINUSE	compat.h	43;"	d
WSAEALREADY	compat.h	38;"	d
WSAEINPROGRESS	compat.h	42;"	d
WSAEINTR	compat.h	41;"	d
WSAEINVAL	compat.h	37;"	d
WSAEMSGSIZE	compat.h	40;"	d
WSAENOTSOCK	compat.h	44;"	d
WSAEWOULDBLOCK	compat.h	39;"	d
WSAGetLastError	compat.h	36;"	d
Wait	irc.cpp	/^bool Wait(int nSeconds)$/;"	f
WalletFeature	wallet.h	/^enum WalletFeature$/;"	g
WalletModel	qt/walletmodel.cpp	/^WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :$/;"	f	class:WalletModel
WalletModel	qt/walletmodel.h	/^class WalletModel : public QObject$/;"	c
WalletTxToJSON	bitcoinrpc.cpp	/^void WalletTxToJSON(const CWalletTx& wtx, Object& entry)$/;"	f
WalletUpdateSpent	wallet.cpp	/^void CWallet::WalletUpdateSpent(const CTransaction &tx)$/;"	f	class:CWallet
Warning	qt/notificator.h	/^        Warning,             \/**< Notify user of potential problem *\/$/;"	e	enum:Notificator::Class
WildcardMatch	util.cpp	/^bool WildcardMatch(const char* psz, const char* mask)$/;"	f
WildcardMatch	util.cpp	/^bool WildcardMatch(const string& str, const string& mask)$/;"	f
Write	db.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite=true)$/;"	f	class:CDB
WriteAccount	walletdb.cpp	/^bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteBestBlock	walletdb.h	/^    bool WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBestInvalidWork	db.cpp	/^bool CTxDB::WriteBestInvalidWork(CBigNum bnBestInvalidWork)$/;"	f	class:CTxDB
WriteBlockIndex	db.cpp	/^bool CTxDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)$/;"	f	class:CTxDB
WriteCScript	walletdb.h	/^    bool WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64 nSize)$/;"	f
WriteCryptedKey	walletdb.h	/^    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)$/;"	f	class:CWalletDB
WriteDefaultKey	walletdb.h	/^    bool WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteHashBestChain	db.cpp	/^bool CTxDB::WriteHashBestChain(uint256 hashBestChain)$/;"	f	class:CTxDB
WriteKey	walletdb.h	/^    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
WriteMasterKey	walletdb.h	/^    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	walletdb.h	/^    bool WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	walletdb.cpp	/^bool CWalletDB::WriteName(const string& strAddress, const string& strName)$/;"	f	class:CWalletDB
WritePool	walletdb.h	/^    bool WritePool(int64 nPool, const CKeyPool& keypool)$/;"	f	class:CWalletDB
WriteSetting	walletdb.h	/^    bool WriteSetting(const std::string& strKey, const T& value)$/;"	f	class:CWalletDB
WriteToDisk	main.h	/^    bool WriteToDisk(unsigned int& nFileRet, unsigned int& nBlockPosRet)$/;"	f	class:CBlock
WriteToDisk	wallet.cpp	/^bool CWalletTx::WriteToDisk()$/;"	f	class:CWalletTx
WriteTx	walletdb.h	/^    bool WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteVersion	db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CAutoFile
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CDataStream
X	net.cpp	614;"	d	file:
X	net.cpp	615;"	d	file:
X	net.cpp	630;"	d	file:
YES	ui_interface.h	/^        YES                   = 0x00000002,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
YES_DEFAULT	ui_interface.h	/^        YES_DEFAULT           = 0x00000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
YES_NO	ui_interface.h	/^        YES_NO                = (YES|NO),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
_	ui_interface.h	/^inline std::string _(const char* psz)$/;"	f
_BITCOINRPC_H_	bitcoinrpc.h	8;"	d
_BITCOIN_ADDRMAN	addrman.h	5;"	d
_BITCOIN_COMPAT_H	compat.h	7;"	d
_BITCOIN_QT_PLUGINS_INCLUDED	qt/bitcoin.cpp	27;"	d	file:
_WIN32_IE	qt/guiutil.cpp	32;"	d	file:
_WIN32_IE	qt/guiutil.cpp	34;"	d	file:
_WIN32_IE	util.cpp	48;"	d	file:
_WIN32_IE	util.cpp	50;"	d	file:
_WIN32_WINNT	allocators.h	14;"	d
_WIN32_WINNT	allocators.h	16;"	d
_WIN32_WINNT	compat.h	10;"	d
_WIN32_WINNT	qt/guiutil.cpp	28;"	d	file:
_WIN32_WINNT	qt/guiutil.cpp	30;"	d	file:
_WIN32_WINNT	util.cpp	44;"	d	file:
_WIN32_WINNT	util.cpp	46;"	d	file:
__CRYPTER_H__	crypter.h	6;"	d
__INCLUDED_PROTOCOL_H__	protocol.h	13;"	d
__INSURE__	qt/bitcoin.cpp	28;"	d	file:
_d	bitcoinrpc.cpp	/^    SSLIOStreamDevice<Protocol> _d;$/;"	m	class:AcceptedConnectionImpl	file:
_stream	bitcoinrpc.cpp	/^    iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;$/;"	m	class:AcceptedConnectionImpl	file:
_strlwr	util.h	88;"	d
_vsnprintf	util.h	86;"	d
aboutAction	qt/bitcoingui.h	/^    QAction *aboutAction;$/;"	m	class:BitcoinGUI
aboutClicked	qt/bitcoingui.cpp	/^void BitcoinGUI::aboutClicked()$/;"	f	class:BitcoinGUI
aboutQtAction	qt/bitcoingui.h	/^    QAction *aboutQtAction;$/;"	m	class:BitcoinGUI
abs64	util.h	/^inline int64 abs64(int64 n)$/;"	f
accept	main.cpp	/^bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,$/;"	f	class:CTxMemPool
accept	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::accept()$/;"	f	class:AskPassphraseDialog
accept	qt/editaddressdialog.cpp	/^void EditAddressDialog::accept()$/;"	f	class:EditAddressDialog
accept	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::accept()$/;"	f	class:SendCoinsDialog
acceptedShares	qt/miningpage.h	/^    int acceptedShares;$/;"	m	class:MiningPage
actions_	json/json_spirit_reader_template.h	/^        Semantic_actions_t& actions_;$/;"	m	class:json_spirit::Json_grammer
activeTxn	db.h	/^    DbTxn *activeTxn;$/;"	m	class:CDB
actor	bitcoinrpc.h	/^    rpcfn_type actor;$/;"	m	class:CRPCCommand
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_map
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_vector
addChangeMonitor	qt/monitoreddatamapper.cpp	/^void MonitoredDataMapper::addChangeMonitor(QWidget *widget)$/;"	f	class:MonitoredDataMapper
addColumn	qt/csvmodelwriter.cpp	/^void CSVModelWriter::addColumn(const QString &title, int column, int role)$/;"	f	class:CSVModelWriter
addEntry	qt/sendcoinsdialog.cpp	/^SendCoinsEntry *SendCoinsDialog::addEntry()$/;"	f	class:SendCoinsDialog
addMapping	qt/monitoreddatamapper.cpp	/^void MonitoredDataMapper::addMapping(QWidget *widget, int section)$/;"	f	class:MonitoredDataMapper
addMapping	qt/monitoreddatamapper.cpp	/^void MonitoredDataMapper::addMapping(QWidget *widget, int section, const QByteArray &propertyName)$/;"	f	class:MonitoredDataMapper
addRow	qt/addresstablemodel.cpp	/^QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address)$/;"	f	class:AddressTableModel
addUnchecked	main.cpp	/^bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)$/;"	f	class:CTxMemPool
add_coin	test/wallet_tests.cpp	/^static void add_coin(int64 nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_esc_char	json/json_spirit_writer_template.h	/^    bool add_esc_char( Char_type c, String_type& s )$/;"	f	namespace:json_spirit
add_esc_chars	json/json_spirit_writer_template.h	/^    String_type add_esc_chars( const String_type& s )$/;"	f	namespace:json_spirit
add_first	json/json_spirit_reader_template.h	/^        Value_type* add_first( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
add_posn_iter_and_read_range_or_throw	json/json_spirit_reader_template.h	/^    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
add_to_current	json/json_spirit_reader_template.h	/^        Value_type* add_to_current( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
addmultisigaddress	bitcoinrpc.cpp	/^Value addmultisigaddress(const Array& params, bool fHelp)$/;"	f
addr	base58.h	/^    CBitcoinAddress *addr;$/;"	m	class:CBitcoinAddressVisitor
addr	net.h	/^    CAddress addr;$/;"	m	class:CNode
addrLocal	net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
addrPrefix	qt/transactionfilterproxy.h	/^    QString addrPrefix;$/;"	m	class:TransactionFilterProxy
address	qt/addresstablemodel.cpp	/^    QString address;$/;"	m	struct:AddressTableEntry	file:
address	qt/editaddressdialog.h	/^    QString address;$/;"	m	class:EditAddressDialog
address	qt/qrcodedialog.h	/^    QString address;$/;"	m	class:QRCodeDialog
address	qt/transactionrecord.h	/^    std::string address;$/;"	m	class:TransactionRecord
address	qt/walletmodel.h	/^    QString address;$/;"	m	class:SendCoinsRecipient
addressBookAction	qt/bitcoingui.h	/^    QAction *addressBookAction;$/;"	m	class:BitcoinGUI
addressBookPage	qt/bitcoingui.h	/^    AddressBookPage *addressBookPage;$/;"	m	class:BitcoinGUI
addressColor	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::addressColor(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
addressTableModel	qt/walletmodel.h	/^    AddressTableModel *addressTableModel;$/;"	m	class:WalletModel
addressWidget	qt/transactionview.h	/^    QLineEdit *addressWidget;$/;"	m	class:TransactionView
addrman	net.cpp	/^CAddrMan addrman;$/;"	v
alignup	util.h	/^T* alignup(T* p)$/;"	f
allocate	allocators.h	/^    T* allocate(std::size_t n, const void *hint = 0)$/;"	f	struct:secure_allocator
allocator_type	serialize.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
altstacktop	script.cpp	74;"	d	file:
amount	qt/bitcoinamountfield.h	/^    QDoubleSpinBox *amount;$/;"	m	class:BitcoinAmountField
amount	qt/walletmodel.h	/^    qint64 amount;$/;"	m	class:SendCoinsRecipient
amountDigits	qt/bitcoinunits.cpp	/^int BitcoinUnits::amountDigits(int unit)$/;"	f	class:BitcoinUnits
amountWidget	qt/transactionview.h	/^    QLineEdit *amountWidget;$/;"	m	class:TransactionView
appMenuBar	qt/bitcoingui.h	/^    QMenuBar *appMenuBar;$/;"	m	class:BitcoinGUI
append_esc_char_and_incr_iter	json/json_spirit_reader_template.h	/^    void append_esc_char_and_incr_iter( String_type& s, $/;"	f	namespace:json_spirit
array_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
array_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
askFee	qt/bitcoingui.cpp	/^void BitcoinGUI::askFee(qint64 nFeeRequired, bool *payFee)$/;"	f	class:BitcoinGUI
atoi	util.h	/^inline int atoi(const std::string& str)$/;"	f
atoi64	util.h	/^inline int64 atoi64(const char* psz)$/;"	f
atoi64	util.h	/^inline int64 atoi64(const std::string& str)$/;"	f
availableUnits	qt/bitcoinunits.cpp	/^QList<BitcoinUnits::Unit> BitcoinUnits::availableUnits()$/;"	f	class:BitcoinUnits
bDisplayAddresses	qt/optionsmodel.h	/^    bool bDisplayAddresses;$/;"	m	class:OptionsModel
backupWallet	qt/bitcoingui.cpp	/^void BitcoinGUI::backupWallet()$/;"	f	class:BitcoinGUI
backupWallet	qt/walletmodel.cpp	/^bool WalletModel::backupWallet(const QString &filename)$/;"	f	class:WalletModel
backupWalletAction	qt/bitcoingui.h	/^    QAction *backupWalletAction;$/;"	m	class:BitcoinGUI
backupwallet	bitcoinrpc.cpp	/^Value backupwallet(const Array& params, bool fHelp)$/;"	f
base	allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base_uint	uint256.h	/^class base_uint$/;"	c
base_uint160	uint256.h	/^typedef base_uint<160> base_uint160;$/;"	t
base_uint256	uint256.h	/^typedef base_uint<256> base_uint256;$/;"	t
basetype	uint256.h	/^    typedef base_uint160 basetype;$/;"	t	class:uint160
basetype	uint256.h	/^    typedef base_uint256 basetype;$/;"	t	class:uint256
be32dec	scrypt.c	/^static inline uint32_t be32dec(const void *pp)$/;"	f	file:
be32enc	scrypt.c	/^static inline void be32enc(void *pp, uint32_t x)$/;"	f	file:
begin	mruset.h	/^    iterator begin() const { return set.begin(); }$/;"	f	class:mruset
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	serialize.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_uint
begin_	json/json_spirit_reader_template.h	/^        Mp_iter begin_;$/;"	m	struct:json_spirit::Multi_pass_iters
begin_array	json/json_spirit_reader_template.h	/^        void begin_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
begin_compound	json/json_spirit_reader_template.h	/^        void begin_compound()$/;"	f	class:json_spirit::Semantic_actions
begin_obj	json/json_spirit_reader_template.h	/^        void begin_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
bignum_error	bignum.h	/^    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:bignum_error
bignum_error	bignum.h	/^class bignum_error : public std::runtime_error$/;"	c
bitcoinAddressFont	qt/guiutil.cpp	/^QFont bitcoinAddressFont()$/;"	f	namespace:GUIUtil
bitcoin_strings	qt/bitcoinstrings.cpp	/^static const char UNUSED *bitcoin_strings[] = {$/;"	v	file:
bitdb	db.cpp	/^CDBEnv bitdb;$/;"	v
bitsPerSample	qt/notificator.cpp	/^    int bitsPerSample;$/;"	m	class:FreedesktopImage	file:
blockToJSON	bitcoinrpc.cpp	/^Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)$/;"	f
blockingGUIThreadConnection	qt/guiutil.cpp	/^Qt::ConnectionType blockingGUIThreadConnection()$/;"	f	namespace:GUIUtil
bnBestChainWork	main.cpp	/^CBigNum bnBestChainWork = 0;$/;"	v
bnBestInvalidWork	main.cpp	/^CBigNum bnBestInvalidWork = 0;$/;"	v
bnChainWork	main.h	/^    CBigNum bnChainWork;$/;"	m	class:CBlockIndex
bool_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
boost	util.cpp	/^namespace boost {$/;"	n	file:
browseHistory	qt/rpcconsole.cpp	/^void RPCConsole::browseHistory(int offset)$/;"	f	class:RPCConsole
cachedAddressTable	qt/addresstablemodel.cpp	/^    QList<AddressTableEntry> cachedAddressTable;$/;"	m	class:AddressTablePriv	file:
cachedBalance	qt/walletmodel.h	/^    qint64 cachedBalance;$/;"	m	class:WalletModel
cachedEncryptionStatus	qt/walletmodel.h	/^    EncryptionStatus cachedEncryptionStatus;$/;"	m	class:WalletModel
cachedHashrate	qt/clientmodel.h	/^    int cachedHashrate;$/;"	m	class:ClientModel
cachedImmatureBalance	qt/walletmodel.h	/^    qint64 cachedImmatureBalance;$/;"	m	class:WalletModel
cachedNumBlocks	qt/clientmodel.h	/^    int cachedNumBlocks;$/;"	m	class:ClientModel
cachedNumBlocks	qt/transactiontablemodel.h	/^    int cachedNumBlocks;$/;"	m	class:TransactionTableModel
cachedNumBlocks	qt/walletmodel.h	/^    int cachedNumBlocks;$/;"	m	class:WalletModel
cachedNumBlocksOfPeers	qt/clientmodel.h	/^    int cachedNumBlocksOfPeers;$/;"	m	class:ClientModel
cachedNumTransactions	qt/walletmodel.h	/^    qint64 cachedNumTransactions;$/;"	m	class:WalletModel
cachedUnconfirmedBalance	qt/walletmodel.h	/^    qint64 cachedUnconfirmedBalance;$/;"	m	class:WalletModel
cachedWallet	qt/transactiontablemodel.cpp	/^    QList<TransactionRecord> cachedWallet;$/;"	m	class:TransactionTablePriv	file:
categoryClass	qt/rpcconsole.cpp	/^static QString categoryClass(int category)$/;"	f	file:
centralWidget	qt/bitcoingui.h	/^    QStackedWidget *centralWidget;$/;"	m	class:BitcoinGUI
chIV	crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
changeEvent	qt/bitcoingui.cpp	/^void BitcoinGUI::changeEvent(QEvent *e)$/;"	f	class:BitcoinGUI
changePassphrase	qt/bitcoingui.cpp	/^void BitcoinGUI::changePassphrase()$/;"	f	class:BitcoinGUI
changePassphrase	qt/walletmodel.cpp	/^bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)$/;"	f	class:WalletModel
changePassphraseAction	qt/bitcoingui.h	/^    QAction *changePassphraseAction;$/;"	m	class:BitcoinGUI
changedAmount	qt/transactionview.cpp	/^void TransactionView::changedAmount(const QString &amount)$/;"	f	class:TransactionView
changedPrefix	qt/transactionview.cpp	/^void TransactionView::changedPrefix(const QString &prefix)$/;"	f	class:TransactionView
channels	qt/notificator.cpp	/^    int channels;$/;"	m	class:FreedesktopImage	file:
checkBalanceChanged	qt/walletmodel.cpp	/^void WalletModel::checkBalanceChanged()$/;"	f	class:WalletModel
checkPoint	qt/guiutil.cpp	/^bool checkPoint(const QPoint &p, const QWidget *w)$/;"	f	namespace:GUIUtil
check_type	json/json_spirit_value.h	/^    void Value_impl< Config >::check_type( const Value_type vtype ) const$/;"	f	class:json_spirit::Value_impl
chooseDate	qt/transactionview.cpp	/^void TransactionView::chooseDate(int idx)$/;"	f	class:TransactionView
chooseType	qt/transactionview.cpp	/^void TransactionView::chooseType(int idx)$/;"	f	class:TransactionView
clear	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::clear()$/;"	f	class:BitcoinAmountField
clear	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::clear()$/;"	f	class:QValidatedLineEdit
clear	qt/rpcconsole.cpp	/^void RPCConsole::clear()$/;"	f	class:RPCConsole
clear	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::clear()$/;"	f	class:SendCoinsDialog
clear	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::clear()$/;"	f	class:SendCoinsEntry
clear	serialize.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	serialize.h	/^    void clear(short n = 0)      { state = n; }$/;"	f	class:CAutoFile
clear	serialize.h	/^    void clear(short n)          { state = n; }  \/\/ name conflict with vector clear()$/;"	f	class:CDataStream
clientModel	qt/bitcoingui.h	/^    ClientModel *clientModel;$/;"	m	class:BitcoinGUI
clientModel	qt/rpcconsole.h	/^    ClientModel *clientModel;$/;"	m	class:RPCConsole
clientName	qt/clientmodel.cpp	/^QString ClientModel::clientName() const$/;"	f	class:ClientModel
close	bitcoinrpc.cpp	/^    virtual void close()$/;"	f	class:AcceptedConnectionImpl
closeEvent	qt/bitcoingui.cpp	/^void BitcoinGUI::closeEvent(QCloseEvent *event)$/;"	f	class:BitcoinGUI
closesocket	compat.h	61;"	d
column	qt/csvmodelwriter.h	/^        int column;$/;"	m	struct:CSVModelWriter::Column
columnCount	qt/addresstablemodel.cpp	/^int AddressTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
columnCount	qt/transactiontablemodel.cpp	/^int TransactionTableModel::columnCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
column_	json/json_spirit_error_position.h	/^        unsigned int column_;$/;"	m	struct:json_spirit::Error_position
column_alignments	qt/transactiontablemodel.cpp	/^static int column_alignments[] = {$/;"	v	file:
columns	qt/addresstablemodel.h	/^    QStringList columns;$/;"	m	class:AddressTableModel
columns	qt/csvmodelwriter.h	/^    QList<Column> columns;$/;"	m	class:CSVModelWriter
columns	qt/transactiontablemodel.h	/^    QStringList columns;$/;"	m	class:TransactionTableModel
condition	sync.h	/^    boost::condition_variable condition;$/;"	m	class:CSemaphore
confirmed	qt/transactionrecord.h	/^    bool confirmed;$/;"	m	class:TransactionStatus
connect	bitcoinrpc.cpp	/^    bool connect(const std::string& server, const std::string& port)$/;"	f	class:SSLIOStreamDevice
const_iterator	mruset.h	/^    typedef typename std::set<T>::const_iterator const_iterator;$/;"	t	class:mruset
const_iterator	serialize.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reference	serialize.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
contextMenu	qt/addressbookpage.h	/^    QMenu *contextMenu;$/;"	m	class:AddressBookPage
contextMenu	qt/transactionview.h	/^    QMenu *contextMenu;$/;"	m	class:TransactionView
contextualMenu	qt/addressbookpage.cpp	/^void AddressBookPage::contextualMenu(const QPoint &point)$/;"	f	class:AddressBookPage
contextualMenu	qt/transactionview.cpp	/^void TransactionView::contextualMenu(const QPoint &point)$/;"	f	class:TransactionView
copyAddress	qt/transactionview.cpp	/^void TransactionView::copyAddress()$/;"	f	class:TransactionView
copyAmount	qt/transactionview.cpp	/^void TransactionView::copyAmount()$/;"	f	class:TransactionView
copyEntryData	qt/guiutil.cpp	/^void copyEntryData(QAbstractItemView *view, int column, int role)$/;"	f	namespace:GUIUtil
copyLabel	qt/transactionview.cpp	/^void TransactionView::copyLabel()$/;"	f	class:TransactionView
copyStats	net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
coreOptions	qt/guiutil.h	/^        QString coreOptions;$/;"	m	class:GUIUtil::HelpMessageBox
count	mruset.h	/^    size_type count(const key_type& k) const { return set.count(k); }$/;"	f	class:mruset
createActions	qt/bitcoingui.cpp	/^void BitcoinGUI::createActions()$/;"	f	class:BitcoinGUI
createArgs	test/rpc_tests.cpp	/^createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL)$/;"	f	file:
createDateRangeWidget	qt/transactionview.cpp	/^QWidget *TransactionView::createDateRangeWidget()$/;"	f	class:TransactionView
createMenuBar	qt/bitcoingui.cpp	/^void BitcoinGUI::createMenuBar()$/;"	f	class:BitcoinGUI
createToolBars	qt/bitcoingui.cpp	/^void BitcoinGUI::createToolBars()$/;"	f	class:BitcoinGUI
createTrayIcon	qt/bitcoingui.cpp	/^void BitcoinGUI::createTrayIcon()$/;"	f	class:BitcoinGUI
createrawtransaction	rpcrawtransaction.cpp	/^Value createrawtransaction(const Array& params, bool fHelp)$/;"	f
credit	qt/transactionrecord.h	/^    int64 credit;$/;"	m	class:TransactionRecord
cs	addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	main.h	/^    mutable CCriticalSection cs;$/;"	m	class:CTxMemPool
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_THREAD_RPCHANDLER	bitcoinrpc.cpp	/^static CCriticalSection cs_THREAD_RPCHANDLER;$/;"	v	file:
cs_db	db.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	main.cpp	/^CCriticalSection cs_main;$/;"	v
cs_mapAlerts	main.cpp	/^CCriticalSection cs_mapAlerts;$/;"	v
cs_mapLocalHost	net.cpp	/^static CCriticalSection cs_mapLocalHost;$/;"	v	file:
cs_mapRelay	net.cpp	/^CCriticalSection cs_mapRelay;$/;"	v
cs_mapRequests	net.h	/^    CCriticalSection cs_mapRequests;$/;"	m	class:CNode
cs_nWalletUnlockTime	bitcoinrpc.cpp	/^static CCriticalSection cs_nWalletUnlockTime;$/;"	v	file:
cs_setBanned	net.cpp	/^CCriticalSection CNode::cs_setBanned;$/;"	m	class:CNode	file:
cs_setBanned	net.h	/^    static CCriticalSection cs_setBanned;$/;"	m	class:CNode
cs_setservAddNodeAddresses	net.cpp	/^CCriticalSection cs_setservAddNodeAddresses;$/;"	v
cs_sigcache	script.cpp	/^    CCriticalSection cs_sigcache;$/;"	m	class:CSignatureCache	file:
cs_vNodes	net.cpp	/^CCriticalSection cs_vNodes;$/;"	v
cs_vOneShots	net.cpp	/^CCriticalSection cs_vOneShots;$/;"	v
cs_vRecv	net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
ctx	util.h	/^    SHA256_CTX ctx;$/;"	m	class:CHashWriter
cur_num_blocks	qt/transactionrecord.h	/^    int cur_num_blocks;$/;"	m	class:TransactionStatus
currentBalance	qt/overviewpage.h	/^    qint64 currentBalance;$/;"	m	class:OverviewPage
currentImmatureBalance	qt/overviewpage.h	/^    qint64 currentImmatureBalance;$/;"	m	class:OverviewPage
currentUnconfirmedBalance	qt/overviewpage.h	/^    qint64 currentUnconfirmedBalance;$/;"	m	class:OverviewPage
currentUnit	qt/bitcoinamountfield.h	/^    int currentUnit;$/;"	m	class:BitcoinAmountField
current_p_	json/json_spirit_reader_template.h	/^        Value_type* current_p_;         \/\/ the child object or array that is currently being constructed$/;"	m	class:json_spirit::Semantic_actions
dHashesPerSec	main.cpp	/^double dHashesPerSec;$/;"	v
dPriority	main.cpp	/^    double dPriority;$/;"	m	class:COrphan	file:
data	qt/addresstablemodel.cpp	/^QVariant AddressTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:AddressTableModel
data	qt/bitcoinunits.cpp	/^QVariant BitcoinUnits::data(const QModelIndex &index, int role) const$/;"	f	class:BitcoinUnits
data	qt/optionsmodel.cpp	/^QVariant OptionsModel::data(const QModelIndex & index, int role) const$/;"	f	class:OptionsModel
data	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::data(const QModelIndex &index, int role) const$/;"	f	class:TransactionTableModel
data	test/base58_tests.cpp	/^    const unsigned char *data;$/;"	m	struct:__anon11	file:
dateFrom	qt/transactionfilterproxy.h	/^    QDateTime dateFrom;$/;"	m	class:TransactionFilterProxy
dateFrom	qt/transactionview.h	/^    QDateTimeEdit *dateFrom;$/;"	m	class:TransactionView
dateRangeChanged	qt/transactionview.cpp	/^void TransactionView::dateRangeChanged()$/;"	f	class:TransactionView
dateRangeWidget	qt/transactionview.h	/^    QFrame *dateRangeWidget;$/;"	m	class:TransactionView
dateTimeStr	qt/guiutil.cpp	/^QString dateTimeStr(const QDateTime &date)$/;"	f	namespace:GUIUtil
dateTimeStr	qt/guiutil.cpp	/^QString dateTimeStr(qint64 nTime)$/;"	f	namespace:GUIUtil
dateTo	qt/transactionfilterproxy.h	/^    QDateTime dateTo;$/;"	m	class:TransactionFilterProxy
dateTo	qt/transactionview.h	/^    QDateTimeEdit *dateTo;$/;"	m	class:TransactionView
dateWidget	qt/transactionview.h	/^    QComboBox *dateWidget;$/;"	m	class:TransactionView
dbenv	db.h	/^    DbEnv dbenv;$/;"	m	class:CDBEnv
dd_mutex	sync.cpp	/^static boost::mutex dd_mutex;$/;"	v	file:
deallocate	allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
deallocate	allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:zero_after_free_allocator
debit	qt/transactionrecord.h	/^    int64 debit;$/;"	m	class:TransactionRecord
debugToggled	qt/miningpage.cpp	/^void MiningPage::debugToggled(bool checked)$/;"	f	class:MiningPage
decimals	qt/bitcoinunits.cpp	/^int BitcoinUnits::decimals(int unit)$/;"	f	class:BitcoinUnits
decoderawtransaction	rpcrawtransaction.cpp	/^Value decoderawtransaction(const Array& params, bool fHelp)$/;"	f
decomposeTransaction	qt/transactionrecord.cpp	/^QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx)$/;"	f	class:TransactionRecord
definition	json/json_spirit_reader_template.h	/^            definition( const Json_grammer& self )$/;"	f	class:json_spirit::Json_grammer::definition
definition	json/json_spirit_reader_template.h	/^        class definition$/;"	c	class:json_spirit::Json_grammer
deleteAction	qt/addressbookpage.h	/^    QAction *deleteAction;$/;"	m	class:AddressBookPage
depth	qt/transactionrecord.h	/^    int64 depth;$/;"	m	class:TransactionStatus
describe	qt/transactiontablemodel.cpp	/^    QString describe(TransactionRecord *rec)$/;"	f	class:TransactionTablePriv
description	qt/bitcoinunits.cpp	/^QString BitcoinUnits::description(int unit)$/;"	f	class:BitcoinUnits
difference_type	allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:secure_allocator
difference_type	allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:zero_after_free_allocator
difference_type	serialize.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
disableSaveButtons	qt/optionsdialog.cpp	/^void OptionsDialog::disableSaveButtons()$/;"	f	class:OptionsDialog
done	qt/addressbookpage.cpp	/^void AddressBookPage::done(int retval)$/;"	f	class:AddressBookPage
dragEnterEvent	qt/bitcoingui.cpp	/^void BitcoinGUI::dragEnterEvent(QDragEnterEvent *event)$/;"	f	class:BitcoinGUI
dropEvent	qt/bitcoingui.cpp	/^void BitcoinGUI::dropEvent(QDropEvent *event)$/;"	f	class:BitcoinGUI
dumpKeyInfo	test/key_tests.cpp	/^void dumpKeyInfo(uint256 privkey)$/;"	f
dumpprivkey	rpcdump.cpp	/^Value dumpprivkey(const Array& params, bool fHelp)$/;"	f
editLabel	qt/transactionview.cpp	/^void TransactionView::editLabel()$/;"	f	class:TransactionView
editStatus	qt/addresstablemodel.h	/^    EditStatus editStatus;$/;"	m	class:AddressTableModel
elements_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
emitDataChanged	qt/addresstablemodel.cpp	/^void AddressTableModel::emitDataChanged(int idx)$/;"	f	class:AddressTableModel
empty	mruset.h	/^    bool empty() const { return set.empty(); }$/;"	f	class:mruset
empty	serialize.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
empty_wallet	test/wallet_tests.cpp	/^static void empty_wallet(void)$/;"	f	file:
emptyobj	bitcoinrpc.cpp	/^const Object emptyobj;$/;"	v
enableMiningControls	qt/miningpage.cpp	/^void MiningPage::enableMiningControls(bool enable)$/;"	f	class:MiningPage
enablePoolMiningControls	qt/miningpage.cpp	/^void MiningPage::enablePoolMiningControls(bool enable)$/;"	f	class:MiningPage
enableSaveButtons	qt/optionsdialog.cpp	/^void OptionsDialog::enableSaveButtons()$/;"	f	class:OptionsDialog
encryptWallet	qt/bitcoingui.cpp	/^void BitcoinGUI::encryptWallet(bool status)$/;"	f	class:BitcoinGUI
encryptWalletAction	qt/bitcoingui.h	/^    QAction *encryptWalletAction;$/;"	m	class:BitcoinGUI
encryptwallet	bitcoinrpc.cpp	/^Value encryptwallet(const Array& params, bool fHelp)$/;"	f
end	mruset.h	/^    iterator end() const { return set.end(); }$/;"	f	class:mruset
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	serialize.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_uint
end_	json/json_spirit_reader_template.h	/^        Mp_iter end_;$/;"	m	struct:json_spirit::Multi_pass_iters
end_array	json/json_spirit_reader_template.h	/^        void end_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
end_compound	json/json_spirit_reader_template.h	/^        void end_compound()$/;"	f	class:json_spirit::Semantic_actions
end_obj	json/json_spirit_reader_template.h	/^        void end_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
eof	serialize.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
equal_sets	test/wallet_tests.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
erase	serialize.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	serialize.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
error	qt/bitcoingui.cpp	/^void BitcoinGUI::error(const QString &title, const QString &message, bool modal)$/;"	f	class:BitcoinGUI
error	util.cpp	/^bool error(const char *format, ...)$/;"	f
event	qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::event(QEvent *event)$/;"	f	class:AskPassphraseDialog
eventFilter	qt/askpassphrasedialog.cpp	/^bool AskPassphraseDialog::eventFilter(QObject *, QEvent *event)$/;"	f	class:AskPassphraseDialog
eventFilter	qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::eventFilter(QObject *object, QEvent *event)$/;"	f	class:BitcoinAmountField
eventFilter	qt/guiutil.cpp	/^bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)$/;"	f	class:GUIUtil::ToolTipToRichTextFilter
eventFilter	qt/optionsdialog.cpp	/^bool OptionsDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:OptionsDialog
eventFilter	qt/rpcconsole.cpp	/^bool RPCConsole::eventFilter(QObject* obj, QEvent *event)$/;"	f	class:RPCConsole
eventFilter	qt/signverifymessagedialog.cpp	/^bool SignVerifyMessageDialog::eventFilter(QObject *object, QEvent *event)$/;"	f	class:SignVerifyMessageDialog
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CDataStream
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CAutoFile"); return prev; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CDataStream"); return prev; }$/;"	f	class:CDataStream
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CAutoFile
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CDataStream
execute	bitcoinrpc.cpp	/^json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const$/;"	f	class:CRPCTable
exists	main.h	/^    bool exists(uint256 hash)$/;"	f	class:CTxMemPool
exportAction	qt/bitcoingui.h	/^    QAction *exportAction;$/;"	m	class:BitcoinGUI
exportClicked	qt/addressbookpage.cpp	/^void AddressBookPage::exportClicked()$/;"	f	class:AddressBookPage
exportClicked	qt/transactionview.cpp	/^void TransactionView::exportClicked()$/;"	f	class:TransactionView
fAvailableCreditCached	wallet.h	/^    mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fCapsLock	qt/askpassphrasedialog.h	/^    bool fCapsLock;$/;"	m	class:AskPassphraseDialog
fChangeCached	wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fClient	net.cpp	/^bool fClient = false;$/;"	v
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fCommandLine	util.cpp	/^bool fCommandLine = false;$/;"	v
fCompressedPubKey	key.h	/^    bool fCompressedPubKey;$/;"	m	class:CKey
fCreditCached	wallet.h	/^    mutable bool fCreditCached;$/;"	m	class:CWalletTx
fDaemon	util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	db.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	wallet.h	/^    mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDebug	util.cpp	/^bool fDebug = false;$/;"	v
fDebugNet	util.cpp	/^bool fDebugNet = false;$/;"	v
fDetachDB	db.h	/^    bool fDetachDB;$/;"	m	class:CDBEnv
fDisconnect	net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fDiscover	net.cpp	/^bool fDiscover = true;$/;"	v
fFileBacked	wallet.h	/^    bool fFileBacked;$/;"	m	class:CWallet
fFromMe	wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fGenerateBitcoins	main.cpp	/^static bool fGenerateBitcoins = false;$/;"	v	file:
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHaveGrant	sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHaveUPnP	main.h	/^static const int fHaveUPnP = false;$/;"	v
fHaveUPnP	main.h	/^static const int fHaveUPnP = true;$/;"	v
fInTried	addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNode
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fKeySet	crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLimitProcessors	main.cpp	/^static bool fLimitProcessors = false;$/;"	v	file:
fLogTimestamps	util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMerkleVerified	main.h	/^    mutable bool fMerkleVerified;$/;"	m	class:CMerkleTx
fMinimizeOnClose	qt/optionsmodel.h	/^    bool fMinimizeOnClose;$/;"	m	class:OptionsModel
fMinimizeToTray	qt/optionsmodel.h	/^    bool fMinimizeToTray;$/;"	m	class:OptionsModel
fNameLookup	netbase.cpp	/^bool fNameLookup = false;$/;"	v
fNeedHandshake	bitcoinrpc.cpp	/^    bool fNeedHandshake;$/;"	m	class:SSLIOStreamDevice	file:
fNetworkNode	net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fNewRecipientAllowed	qt/sendcoinsdialog.h	/^    bool fNewRecipientAllowed;$/;"	m	class:SendCoinsDialog
fNoListen	util.cpp	/^bool fNoListen = false;$/;"	v
fOneShot	net.h	/^    bool fOneShot;$/;"	m	class:CNode
fPrintToConsole	util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugger	util.cpp	/^bool fPrintToDebugger = false;$/;"	v
fProxyIpValid	qt/optionsdialog.h	/^    bool fProxyIpValid;$/;"	m	class:OptionsDialog
fReadOnly	db.h	/^    bool fReadOnly;$/;"	m	class:CDB
fReopenDebugLog	util.cpp	/^bool fReopenDebugLog = false;$/;"	v
fRequestShutdown	util.cpp	/^bool fRequestShutdown = false;$/;"	v
fRestartWarningDisplayed_Lang	qt/optionsdialog.h	/^    bool fRestartWarningDisplayed_Lang;$/;"	m	class:OptionsDialog
fRestartWarningDisplayed_Proxy	qt/optionsdialog.h	/^    bool fRestartWarningDisplayed_Proxy;$/;"	m	class:OptionsDialog
fServer	util.cpp	/^bool fServer = false;$/;"	v
fSet	key.h	/^    bool fSet;$/;"	m	class:CKey
fShutdown	util.cpp	/^bool fShutdown = false;$/;"	v
fSpent	rpcdump.cpp	/^    bool fSpent;$/;"	m	class:CTxDump	file:
fSuccessfullyConnected	net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fTestNet	util.cpp	/^bool fTestNet = false;$/;"	v
fTimeReceivedIsTxTime	wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fUseCrypto	keystore.h	/^    bool fUseCrypto;$/;"	m	class:CCryptoKeyStore
fUseSSL	bitcoinrpc.cpp	/^    bool fUseSSL;$/;"	m	class:SSLIOStreamDevice	file:
fUseUPnP	net.cpp	/^bool fUseUPnP = false;$/;"	v
factor	qt/bitcoinunits.cpp	/^qint64 BitcoinUnits::factor(int unit)$/;"	f	class:BitcoinUnits
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CAutoFile
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CDataStream
fclose	serialize.h	/^    void fclose()$/;"	f	class:CAutoFile
fee	qt/walletmodel.h	/^        qint64 fee; \/\/ is used in case status is "AmountWithFeeExceedsBalance"$/;"	m	struct:WalletModel::SendCoinsReturn
file	serialize.h	/^    FILE* file;$/;"	m	class:CAutoFile
filename	qt/csvmodelwriter.h	/^    QString filename;$/;"	m	class:CSVModelWriter
filter	qt/overviewpage.h	/^    TransactionFilterProxy *filter;$/;"	m	class:OverviewPage
filterAcceptsRow	qt/transactionfilterproxy.cpp	/^bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &sourceParent) const$/;"	f	class:TransactionFilterProxy
find	mruset.h	/^    iterator find(const key_type& k) const { return set.find(k); }$/;"	f	class:mruset
find_value	json/json_spirit_utils.h	/^    const typename Object_type::value_type::Value_type& find_value( const Object_type& obj, const String_type& name )$/;"	f	namespace:json_spirit
firstClassMessagingAction	qt/bitcoingui.h	/^    QAction *firstClassMessagingAction;$/;"	m	class:BitcoinGUI
flags	qt/addresstablemodel.cpp	/^Qt::ItemFlags AddressTableModel::flags(const QModelIndex & index) const$/;"	f	class:AddressTableModel
fn	net.h	/^    void (*fn)(void*, CDataStream&);$/;"	m	class:CRequestTracker
focusInEvent	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::focusInEvent(QFocusEvent *evt)$/;"	f	class:QValidatedLineEdit
focusTransaction	qt/transactionview.cpp	/^void TransactionView::focusTransaction(const QModelIndex &idx)$/;"	f	class:TransactionView
format	qt/bitcoinunits.cpp	/^QString BitcoinUnits::format(int unit, qint64 n, bool fPlus)$/;"	f	class:BitcoinUnits
formatBuildDate	qt/clientmodel.cpp	/^QString ClientModel::formatBuildDate() const$/;"	f	class:ClientModel
formatClientStartupTime	qt/clientmodel.cpp	/^QString ClientModel::formatClientStartupTime() const$/;"	f	class:ClientModel
formatFullVersion	qt/clientmodel.cpp	/^QString ClientModel::formatFullVersion() const$/;"	f	class:ClientModel
formatTooltip	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTooltip(const TransactionRecord *rec) const$/;"	f	class:TransactionTableModel
formatTxAmount	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxAmount(const TransactionRecord *wtx, bool showUnconfirmed) const$/;"	f	class:TransactionTableModel
formatTxDate	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxDate(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxStatus	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatTxToAddress	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const$/;"	f	class:TransactionTableModel
formatTxType	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
formatWithUnit	qt/bitcoinunits.cpp	/^QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign)$/;"	f	class:BitcoinUnits
genCode	qt/qrcodedialog.cpp	/^void QRCodeDialog::genCode()$/;"	f	class:QRCodeDialog
getAddress	qt/editaddressdialog.cpp	/^QString EditAddressDialog::getAddress() const$/;"	f	class:EditAddressDialog
getAddressTableModel	qt/walletmodel.cpp	/^AddressTableModel *WalletModel::getAddressTableModel()$/;"	f	class:WalletModel
getAlertByHash	main.cpp	/^CAlert CAlert::getAlertByHash(const uint256 &hash)$/;"	f	class:CAlert
getBalance	qt/walletmodel.cpp	/^qint64 WalletModel::getBalance() const$/;"	f	class:WalletModel
getDisplayAddresses	qt/optionsmodel.cpp	/^bool OptionsModel::getDisplayAddresses()$/;"	f	class:OptionsModel
getDisplayUnit	qt/optionsmodel.cpp	/^int OptionsModel::getDisplayUnit()$/;"	f	class:OptionsModel
getEditStatus	qt/addresstablemodel.h	/^    EditStatus getEditStatus() const { return editStatus; }$/;"	f	class:AddressTableModel
getEncryptionStatus	qt/walletmodel.cpp	/^WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const$/;"	f	class:WalletModel
getHashrate	qt/clientmodel.cpp	/^int ClientModel::getHashrate() const$/;"	f	class:ClientModel
getImmatureBalance	qt/walletmodel.cpp	/^qint64 WalletModel::getImmatureBalance() const$/;"	f	class:WalletModel
getLanguage	qt/optionsmodel.h	/^    QString getLanguage() { return language; }$/;"	f	class:OptionsModel
getLastBlockDate	qt/clientmodel.cpp	/^QDateTime ClientModel::getLastBlockDate() const$/;"	f	class:ClientModel
getMinimizeOnClose	qt/optionsmodel.cpp	/^bool OptionsModel::getMinimizeOnClose()$/;"	f	class:OptionsModel
getMinimizeToTray	qt/optionsmodel.cpp	/^bool OptionsModel::getMinimizeToTray()$/;"	f	class:OptionsModel
getMiningDebug	qt/clientmodel.cpp	/^bool ClientModel::getMiningDebug() const$/;"	f	class:ClientModel
getMiningPassword	qt/clientmodel.cpp	/^QString ClientModel::getMiningPassword() const$/;"	f	class:ClientModel
getMiningPort	qt/clientmodel.cpp	/^QString ClientModel::getMiningPort() const$/;"	f	class:ClientModel
getMiningScanTime	qt/clientmodel.cpp	/^int ClientModel::getMiningScanTime() const$/;"	f	class:ClientModel
getMiningServer	qt/clientmodel.cpp	/^QString ClientModel::getMiningServer() const$/;"	f	class:ClientModel
getMiningStarted	qt/clientmodel.cpp	/^bool ClientModel::getMiningStarted() const$/;"	f	class:ClientModel
getMiningThreads	qt/clientmodel.cpp	/^int ClientModel::getMiningThreads() const$/;"	f	class:ClientModel
getMiningType	qt/clientmodel.cpp	/^ClientModel::MiningType ClientModel::getMiningType() const$/;"	f	class:ClientModel
getMiningType	qt/miningpage.cpp	/^ClientModel::MiningType MiningPage::getMiningType()$/;"	f	class:MiningPage
getMiningUsername	qt/clientmodel.cpp	/^QString ClientModel::getMiningUsername() const$/;"	f	class:ClientModel
getNumBlocks	qt/clientmodel.cpp	/^int ClientModel::getNumBlocks() const$/;"	f	class:ClientModel
getNumBlocksAtStartup	qt/clientmodel.cpp	/^int ClientModel::getNumBlocksAtStartup()$/;"	f	class:ClientModel
getNumBlocksOfPeers	qt/clientmodel.cpp	/^int ClientModel::getNumBlocksOfPeers() const$/;"	f	class:ClientModel
getNumConnections	qt/clientmodel.cpp	/^int ClientModel::getNumConnections() const$/;"	f	class:ClientModel
getNumTransactions	qt/walletmodel.cpp	/^int WalletModel::getNumTransactions() const$/;"	f	class:WalletModel
getOptionsModel	qt/clientmodel.cpp	/^OptionsModel *ClientModel::getOptionsModel()$/;"	f	class:ClientModel
getOptionsModel	qt/walletmodel.cpp	/^OptionsModel *WalletModel::getOptionsModel()$/;"	f	class:WalletModel
getReturnValue	qt/addressbookpage.h	/^    const QString &getReturnValue() const { return returnValue; }$/;"	f	class:AddressBookPage
getSaveFileName	qt/guiutil.cpp	/^QString getSaveFileName(QWidget *parent, const QString &caption,$/;"	f	namespace:GUIUtil
getStatusBarWarnings	qt/clientmodel.cpp	/^QString ClientModel::getStatusBarWarnings() const$/;"	f	class:ClientModel
getTime	qt/miningpage.cpp	/^QString MiningPage::getTime(QString time)$/;"	f	class:MiningPage
getTransactionFee	qt/optionsmodel.cpp	/^qint64 OptionsModel::getTransactionFee()$/;"	f	class:OptionsModel
getTransactionTableModel	qt/walletmodel.cpp	/^TransactionTableModel *WalletModel::getTransactionTableModel()$/;"	f	class:WalletModel
getTxID	qt/transactionrecord.cpp	/^std::string TransactionRecord::getTxID()$/;"	f	class:TransactionRecord
getURI	qt/qrcodedialog.cpp	/^QString QRCodeDialog::getURI()$/;"	f	class:QRCodeDialog
getUnconfirmedBalance	qt/walletmodel.cpp	/^qint64 WalletModel::getUnconfirmedBalance() const$/;"	f	class:WalletModel
getValue	qt/sendcoinsentry.cpp	/^SendCoinsRecipient SendCoinsEntry::getValue()$/;"	f	class:SendCoinsEntry
get_array	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const$/;"	f	class:json_spirit::Value_impl
get_array	json/json_spirit_value.h	/^    typename Value_impl< Config >::Array& Value_impl< Config >::get_array()$/;"	f	class:json_spirit::Value_impl
get_bool	json/json_spirit_value.h	/^    bool Value_impl< Config >::get_bool() const$/;"	f	class:json_spirit::Value_impl
get_int	json/json_spirit_value.h	/^    int Value_impl< Config >::get_int() const$/;"	f	class:json_spirit::Value_impl
get_int64	json/json_spirit_value.h	/^    boost::int64_t Value_impl< Config >::get_int64() const$/;"	f	class:json_spirit::Value_impl
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_obj	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Object& Value_impl< Config >::get_obj() const$/;"	f	class:json_spirit::Value_impl
get_obj	json/json_spirit_value.h	/^    typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()$/;"	f	class:json_spirit::Value_impl
get_real	json/json_spirit_value.h	/^    double Value_impl< Config >::get_real() const$/;"	f	class:json_spirit::Value_impl
get_str	json/json_spirit_reader_template.h	/^    String_type get_str( Iter_type begin, Iter_type end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::string get_str( std::string::const_iterator begin, std::string::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::wstring get_str( std::wstring::const_iterator begin, std::wstring::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_value.h	/^    const typename Config::String_type& Value_impl< Config >::get_str() const$/;"	f	class:json_spirit::Value_impl
get_str_	json/json_spirit_reader_template.h	/^    String_type get_str_( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
get_uint64	json/json_spirit_value.h	/^    boost::uint64_t Value_impl< Config >::get_uint64() const$/;"	f	class:json_spirit::Value_impl
get_value	json/json_spirit_value.h	/^        bool get_value( const Value& value, Type_to_type< bool > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        boost::int64_t get_value( const Value& value, Type_to_type< boost::int64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        boost::uint64_t get_value( const Value& value, Type_to_type< boost::uint64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        double get_value( const Value& value, Type_to_type< double > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        int get_value( const Value& value, Type_to_type< int > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_value	json/json_spirit_value.h	/^        typename Value::Array get_value( const Value& value, Type_to_type< typename Value::Array > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::Object get_value( const Value& value, Type_to_type< typename Value::Object > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::String_type get_value( const Value& value, Type_to_type< typename Value::String_type > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^    T Value_impl< Config >::get_value() const$/;"	f	class:json_spirit::Value_impl
getaccount	bitcoinrpc.cpp	/^Value getaccount(const Array& params, bool fHelp)$/;"	f
getaccountaddress	bitcoinrpc.cpp	/^Value getaccountaddress(const Array& params, bool fHelp)$/;"	f
getaddressesbyaccount	bitcoinrpc.cpp	/^Value getaddressesbyaccount(const Array& params, bool fHelp)$/;"	f
getbalance	bitcoinrpc.cpp	/^Value getbalance(const Array& params, bool fHelp)$/;"	f
getblock	bitcoinrpc.cpp	/^Value getblock(const Array& params, bool fHelp)$/;"	f
getblockcount	bitcoinrpc.cpp	/^Value getblockcount(const Array& params, bool fHelp)$/;"	f
getblockhash	bitcoinrpc.cpp	/^Value getblockhash(const Array& params, bool fHelp)$/;"	f
getblocktemplate	bitcoinrpc.cpp	/^Value getblocktemplate(const Array& params, bool fHelp)$/;"	f
getconnectioncount	rpcnet.cpp	/^Value getconnectioncount(const Array& params, bool fHelp)$/;"	f
getdifficulty	bitcoinrpc.cpp	/^Value getdifficulty(const Array& params, bool fHelp)$/;"	f
getgenerate	bitcoinrpc.cpp	/^Value getgenerate(const Array& params, bool fHelp)$/;"	f
gethashespersec	bitcoinrpc.cpp	/^Value gethashespersec(const Array& params, bool fHelp)$/;"	f
getinfo	bitcoinrpc.cpp	/^Value getinfo(const Array& params, bool fHelp)$/;"	f
getint	bignum.h	/^    int getint() const$/;"	f	class:CBigNum
getmininginfo	bitcoinrpc.cpp	/^Value getmininginfo(const Array& params, bool fHelp)$/;"	f
getnetworkhashps	bitcoinrpc.cpp	/^Value getnetworkhashps(const Array& params, bool fHelp)$/;"	f
getnewaddress	bitcoinrpc.cpp	/^Value getnewaddress(const Array& params, bool fHelp)$/;"	f
getpeerinfo	rpcnet.cpp	/^Value getpeerinfo(const Array& params, bool fHelp)$/;"	f
getrawmempool	bitcoinrpc.cpp	/^Value getrawmempool(const Array& params, bool fHelp)$/;"	f
getrawtransaction	rpcrawtransaction.cpp	/^Value getrawtransaction(const Array& params, bool fHelp)$/;"	f
getreceivedbyaccount	bitcoinrpc.cpp	/^Value getreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
getreceivedbyaddress	bitcoinrpc.cpp	/^Value getreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
gettransaction	bitcoinrpc.cpp	/^Value gettransaction(const Array& params, bool fHelp)$/;"	f
getuint	bignum.h	/^    unsigned int getuint() const$/;"	f	class:CBigNum
getuint256	bignum.h	/^    uint256 getuint256()$/;"	f	class:CBigNum
getulong	bignum.h	/^    unsigned long getulong() const$/;"	f	class:CBigNum
getvch	bignum.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CBigNum
getwork	bitcoinrpc.cpp	/^Value getwork(const Array& params, bool fHelp)$/;"	f
getworkex	bitcoinrpc.cpp	/^Value getworkex(const Array& params, bool fHelp)$/;"	f
good	serialize.h	/^    bool good() const            { return !eof() && (state == 0); }$/;"	f	class:CDataStream
good	serialize.h	/^    bool good() const            { return state == 0; }$/;"	f	class:CAutoFile
gotoAddressBookPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoAddressBookPage()$/;"	f	class:BitcoinGUI
gotoHistoryPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoHistoryPage()$/;"	f	class:BitcoinGUI
gotoMiningPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoMiningPage()$/;"	f	class:BitcoinGUI
gotoOverviewPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoOverviewPage()$/;"	f	class:BitcoinGUI
gotoReceiveCoinsPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoReceiveCoinsPage()$/;"	f	class:BitcoinGUI
gotoSendCoinsPage	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSendCoinsPage()$/;"	f	class:BitcoinGUI
gotoSignMessageTab	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoSignMessageTab(QString addr)$/;"	f	class:BitcoinGUI
gotoVerifyMessageTab	qt/bitcoingui.cpp	/^void BitcoinGUI::gotoVerifyMessageTab(QString addr)$/;"	f	class:BitcoinGUI
grantOutbound	net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
guiref	qt/bitcoin.cpp	/^static BitcoinGUI *guiref;$/;"	v	file:
hSocket	net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
handleRunawayException	qt/bitcoin.cpp	/^static void handleRunawayException(std::exception *e)$/;"	f	file:
handleSelectionChanged	qt/qvaluecombobox.cpp	/^void QValueComboBox::handleSelectionChanged(int idx)$/;"	f	class:QValueComboBox
handleTransactionClicked	qt/overviewpage.cpp	/^void OverviewPage::handleTransactionClicked(const QModelIndex &index)$/;"	f	class:OverviewPage
handleURI	qt/bitcoingui.cpp	/^void BitcoinGUI::handleURI(QString strURI)$/;"	f	class:BitcoinGUI
handleURI	qt/sendcoinsdialog.cpp	/^bool SendCoinsDialog::handleURI(const QString &uri)$/;"	f	class:SendCoinsDialog
handshake	bitcoinrpc.cpp	/^    void handshake(ssl::stream_base::handshake_type role)$/;"	f	class:SSLIOStreamDevice
hasAlpha	qt/notificator.cpp	/^    bool hasAlpha;$/;"	m	class:FreedesktopImage	file:
hash	main.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	protocol.h	/^        uint256 hash;$/;"	m	class:CInv
hash	qt/transactionrecord.h	/^    uint256 hash;$/;"	m	class:TransactionRecord
hashBestChain	main.cpp	/^uint256 hashBestChain = 0;$/;"	v
hashBlock	main.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastGetBlocksEnd	net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashMerkleRoot	main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlock
hashMerkleRoot	main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashNext	main.h	/^    uint256 hashNext;$/;"	m	class:CDiskBlockIndex
hashPrev	main.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	main.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlock
header	qt/guiutil.h	/^        QString header;$/;"	m	class:GUIUtil::HelpMessageBox
headerData	qt/addresstablemodel.cpp	/^QVariant AddressTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:AddressTableModel
headerData	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientation, int role) const$/;"	f	class:TransactionTableModel
height	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
help	bitcoinrpc.cpp	/^Value help(const Array& params, bool fHelp)$/;"	f
help	bitcoinrpc.cpp	/^string CRPCTable::help(string strCommand) const$/;"	f	class:CRPCTable
hex	qt/walletmodel.h	/^        QString hex; \/\/ is filled with the transaction hash if status is "OK"$/;"	m	struct:WalletModel::SendCoinsReturn
hex2long	util.cpp	/^long hex2long(const char* hexString)$/;"	f
hex_str_to_char	json/json_spirit_reader_template.h	/^    Char_type hex_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
hex_to_num	json/json_spirit_reader_template.h	/^    Char_type hex_to_num( const Char_type c )$/;"	f	namespace:json_spirit
hextable	util.cpp	/^static const long hextable[] = $/;"	v	file:
history	qt/rpcconsole.h	/^    QStringList history;$/;"	m	class:RPCConsole
historyAction	qt/bitcoingui.h	/^    QAction *historyAction;$/;"	m	class:BitcoinGUI
historyPtr	qt/rpcconsole.h	/^    int historyPtr;$/;"	m	class:RPCConsole
i	wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	util.h	/^inline std::string i64tostr(int64 n)$/;"	f
ictx	scrypt.c	/^	SHA256_CTX ictx;$/;"	m	struct:HMAC_SHA256Context	file:
id	bitcoinrpc.cpp	/^    Value id;$/;"	m	class:JSONRequest	file:
idx	qt/transactionrecord.h	/^    int idx;$/;"	m	class:TransactionRecord
ignore	serialize.h	/^    CDataStream& ignore(int nSize)$/;"	f	class:CDataStream
image	qt/notificator.cpp	/^    QByteArray image;$/;"	m	class:FreedesktopImage	file:
importprivkey	rpcdump.cpp	/^Value importprivkey(const Array& params, bool fHelp)$/;"	f
inInitialBlockDownload	qt/clientmodel.cpp	/^bool ClientModel::inInitialBlockDownload() const$/;"	f	class:ClientModel
in_avail	serialize.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
incomingTransaction	qt/bitcoingui.cpp	/^void BitcoinGUI::incomingTransaction(const QModelIndex & parent, int start, int end)$/;"	f	class:BitcoinGUI
indent	json/json_spirit_writer_template.h	/^        void indent()$/;"	f	class:json_spirit::Generator
indentation_level_	json/json_spirit_writer_template.h	/^        int indentation_level_;$/;"	m	class:json_spirit::Generator
index	qt/addresstablemodel.cpp	/^    AddressTableEntry *index(int idx)$/;"	f	class:AddressTablePriv
index	qt/addresstablemodel.cpp	/^QModelIndex AddressTableModel::index(int row, int column, const QModelIndex & parent) const$/;"	f	class:AddressTableModel
index	qt/transactiontablemodel.cpp	/^    TransactionRecord *index(int idx)$/;"	f	class:TransactionTablePriv
index	qt/transactiontablemodel.cpp	/^QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
initThreads	qt/miningpage.h	/^    int initThreads;$/;"	m	class:MiningPage
input	util.h	/^    void input(T value)$/;"	f	class:CMedianFilter
insert	mruset.h	/^    std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:mruset
insert	serialize.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const_iterator first, const_iterator last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
insert	test/mruset_tests.cpp	/^    void insert(int n)$/;"	f	class:mrutester
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cnetcleanup	net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
int64	serialize.h	/^typedef long long  int64;$/;"	t
int64	uint256.h	/^typedef long long  int64;$/;"	t
int64	util.h	/^typedef long long  int64;$/;"	t
int64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::int_parser < boost::int64_t >  int64_p  = spirit_namespace::int_parser < boost::int64_t  >();$/;"	m	namespace:json_spirit
int_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
interface	qt/notificator.h	/^    QDBusInterface *interface;$/;"	m	class:Notificator
internal_	json/json_spirit_value.h	/^    namespace internal_$/;"	n	namespace:json_spirit
ip	irc.cpp	/^    struct in_addr ip;$/;"	m	struct:ircaddr	typeref:struct:ircaddr::in_addr	file:
ip	netbase.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ip	test/DoS_tests.cpp	/^CService ip(uint32_t i)$/;"	f
ipcInit	qt/qtipcserver.cpp	/^void ipcInit() { }$/;"	f
ipcInit	qt/qtipcserver.cpp	/^void ipcInit()$/;"	f
ipcThread	qt/qtipcserver.cpp	/^static void ipcThread(void* pArg)$/;"	f	file:
ipcThread2	qt/qtipcserver.cpp	/^static void ipcThread2(void* pArg)$/;"	f	file:
ircaddr	irc.cpp	/^struct ircaddr$/;"	s	file:
isClear	qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::isClear()$/;"	f	class:SendCoinsEntry
isObscured	qt/guiutil.cpp	/^bool isObscured(QWidget *w)$/;"	f	namespace:GUIUtil
isTestNet	qt/clientmodel.cpp	/^bool ClientModel::isTestNet() const$/;"	f	class:ClientModel
isValid	qt/walletmodel.h	/^        bool isValid() const { return valid; }$/;"	f	class:WalletModel::UnlockContext
is_eq	json/json_spirit_reader_template.h	/^    bool is_eq( Iter_type first, Iter_type last, const char* c_str )$/;"	f	namespace:json_spirit
is_null	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_null() const$/;"	f	class:json_spirit::Value_impl
is_uint64	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_uint64() const$/;"	f	class:json_spirit::Value_impl
is_uint64_	json/json_spirit_value.h	/^        bool is_uint64_;$/;"	m	class:json_spirit::Value_impl
istream_iter	json/json_spirit_reader_template.h	/^        typedef std::istream_iterator< Char_type, Char_type > istream_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
iterator	mruset.h	/^    typedef typename std::set<T>::iterator iterator;$/;"	t	class:mruset
iterator	serialize.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader_thrower
itostr	util.h	/^inline std::string itostr(int n)$/;"	f
json_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
json_spirit	json/json_spirit_error_position.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader_template.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_stream_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_utils.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_value.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer_template.h	/^namespace json_spirit$/;"	n
key_error	key.h	/^    explicit key_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:key_error
key_error	key.h	/^class key_error : public std::runtime_error$/;"	c
key_type	mruset.h	/^    typedef T key_type;$/;"	t	class:mruset
keypoolrefill	bitcoinrpc.cpp	/^Value keypoolrefill(const Array& params, bool fHelp)$/;"	f
keystore	script.cpp	/^    const CKeyStore *keystore;$/;"	m	class:CKeyStoreIsMineVisitor	file:
label	qt/addresstablemodel.cpp	/^    QString label;$/;"	m	struct:AddressTableEntry	file:
label	qt/walletmodel.h	/^    QString label;$/;"	m	class:SendCoinsRecipient
labelBlocksIcon	qt/bitcoingui.h	/^    QLabel *labelBlocksIcon;$/;"	m	class:BitcoinGUI
labelConnectionsIcon	qt/bitcoingui.h	/^    QLabel *labelConnectionsIcon;$/;"	m	class:BitcoinGUI
labelEncryptionIcon	qt/bitcoingui.h	/^    QLabel *labelEncryptionIcon;$/;"	m	class:BitcoinGUI
labelForAddress	qt/addresstablemodel.cpp	/^QString AddressTableModel::labelForAddress(const QString &address) const$/;"	f	class:AddressTableModel
labelMiningIcon	qt/bitcoingui.h	/^    QLabel *labelMiningIcon;$/;"	m	class:BitcoinGUI
language	qt/optionsmodel.h	/^    QString language;$/;"	m	class:OptionsModel
le32dec	scrypt.c	/^static inline uint32_t le32dec(const void *pp)$/;"	f	file:
le32enc	scrypt.c	/^static inline void le32enc(void *pp, uint32_t x)$/;"	f	file:
limitRows	qt/transactionfilterproxy.h	/^    int limitRows;$/;"	m	class:TransactionFilterProxy
line_	json/json_spirit_error_position.h	/^        unsigned int line_;$/;"	m	struct:json_spirit::Error_position
listaccounts	bitcoinrpc.cpp	/^Value listaccounts(const Array& params, bool fHelp)$/;"	f
listreceivedbyaccount	bitcoinrpc.cpp	/^Value listreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
listreceivedbyaddress	bitcoinrpc.cpp	/^Value listreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
listsinceblock	bitcoinrpc.cpp	/^Value listsinceblock(const Array& params, bool fHelp)$/;"	f
listtransactions	bitcoinrpc.cpp	/^Value listtransactions(const Array& params, bool fHelp)$/;"	f
listunspent	rpcrawtransaction.cpp	/^Value listunspent(const Array& params, bool fHelp)$/;"	f
loadRow	qt/editaddressdialog.cpp	/^void EditAddressDialog::loadRow(int row)$/;"	f	class:EditAddressDialog
loadSettings	qt/miningpage.cpp	/^void MiningPage::loadSettings()$/;"	f	class:MiningPage
lock	sync.h	/^    boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
locking_callback	util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lockorders	sync.cpp	/^static std::map<std::pair<void*, void*>, LockStack> lockorders;$/;"	v	file:
lockstack	sync.cpp	/^static boost::thread_specific_ptr<LockStack> lockstack;$/;"	v	file:
lookup	main.h	/^    CTransaction& lookup(uint256 hash)$/;"	f	class:CTxMemPool
lookupAddress	qt/addresstablemodel.cpp	/^int AddressTableModel::lookupAddress(const QString &address) const$/;"	f	class:AddressTableModel
lookupAddress	qt/transactiontablemodel.cpp	/^QString TransactionTableModel::lookupAddress(const std::string &address, bool tooltip) const$/;"	f	class:TransactionTableModel
loop	util.h	39;"	d
mArray	json/json_spirit_value.h	/^    typedef mConfig::Array_type  mArray;$/;"	t	namespace:json_spirit
mBTC	qt/bitcoinunits.h	/^        mBTC,$/;"	e	enum:BitcoinUnits::Unit
mConfig	json/json_spirit_value.h	/^    typedef Config_map< std::string > mConfig;$/;"	t	namespace:json_spirit
mObject	json/json_spirit_value.h	/^    typedef mConfig::Object_type mObject;$/;"	t	namespace:json_spirit
mValue	json/json_spirit_value.h	/^    typedef mConfig::Value_type  mValue;$/;"	t	namespace:json_spirit
m_dockIconClickEventHandler	qt/macdockiconhandler.h	/^    objc_object *m_dockIconClickEventHandler;$/;"	m	class:MacDockIconHandler
m_dockMenu	qt/macdockiconhandler.h	/^    QMenu *m_dockMenu;$/;"	m	class:MacDockIconHandler
m_dummyWidget	qt/macdockiconhandler.h	/^    QWidget *m_dummyWidget;$/;"	m	class:MacDockIconHandler
main	bitcoinrpc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	init.cpp	/^int main(int argc, char* argv[])$/;"	f
main	irc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	qt/bitcoin.cpp	/^int main(int argc, char *argv[])$/;"	f
main	qt/test/test_main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	serialize.h	/^int main(int argc, char *argv[])$/;"	f
mapAddr	addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapAddressBook	wallet.h	/^    std::map<CTxDestination, std::string> mapAddressBook;$/;"	m	class:CWallet
mapAlerts	main.cpp	/^map<uint256, CAlert> mapAlerts;$/;"	v
mapAlreadyAskedFor	net.cpp	/^map<CInv, int64> mapAlreadyAskedFor;$/;"	v
mapAskFor	net.h	/^    std::multimap<int64, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	main.cpp	/^map<uint256, CBlockIndex*> mapBlockIndex;$/;"	v
mapCheckpoints	checkpoints.cpp	/^    static MapCheckpoints mapCheckpoints =$/;"	m	namespace:Checkpoints	file:
mapCommands	bitcoinrpc.h	/^    std::map<std::string, const CRPCCommand*> mapCommands;$/;"	m	class:CRPCTable
mapCryptedKeys	keystore.h	/^    CryptedKeyMap mapCryptedKeys;$/;"	m	class:CCryptoKeyStore
mapDb	db.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapFileUseCount	db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapInfo	addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
mapKeys	keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapLocalHost	net.cpp	/^static map<CNetAddr, LocalServiceInfo> mapLocalHost;$/;"	v	file:
mapMasterKeys	wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:CWallet
mapMultiArgs	util.cpp	/^map<string, vector<string> > mapMultiArgs;$/;"	v
mapNextTx	main.h	/^    std::map<COutPoint, CInPoint> mapNextTx;$/;"	m	class:CTxMemPool
mapOrphanBlocks	main.cpp	/^map<uint256, CBlock*> mapOrphanBlocks;$/;"	v
mapOrphanBlocksByPrev	main.cpp	/^multimap<uint256, CBlock*> mapOrphanBlocksByPrev;$/;"	v
mapOrphanTransactions	main.cpp	/^map<uint256, CDataStream*> mapOrphanTransactions;$/;"	v
mapOrphanTransactionsByPrev	main.cpp	/^map<uint256, map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;$/;"	v
mapRelay	net.cpp	/^map<CInv, CDataStream> mapRelay;$/;"	v
mapRequestCount	wallet.h	/^    std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapRequests	net.h	/^    std::map<uint256, CRequestTracker> mapRequests;$/;"	m	class:CNode
mapScripts	keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapTx	main.h	/^    std::map<uint256, CTransaction> mapTx;$/;"	m	class:CTxMemPool
mapValue	wallet.h	/^    std::map<std::string, std::string> mapValue;$/;"	m	class:CWalletTx
mapWallet	wallet.h	/^    std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
map_to_obj	json/json_spirit_utils.h	/^    void map_to_obj( const Map_t& mp_obj, Obj_t& obj )$/;"	f	namespace:json_spirit
mapper	qt/editaddressdialog.h	/^    QDataWidgetMapper *mapper;$/;"	m	class:EditAddressDialog
mapper	qt/optionsdialog.h	/^    MonitoredDataMapper *mapper;$/;"	m	class:OptionsDialog
markValid	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::markValid()$/;"	f	class:QValidatedLineEdit
matures_in	qt/transactionrecord.h	/^    int matures_in;$/;"	m	class:TransactionStatus
maturity	qt/transactionrecord.h	/^    Maturity maturity;$/;"	m	class:TransactionStatus
max_size	mruset.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:mruset
max_size	mruset.h	/^    size_type max_size(size_type s)$/;"	f	class:mruset
median	util.h	/^    T median() const$/;"	f	class:CMedianFilter
members_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
mempool	main.cpp	/^CTxMemPool mempool;$/;"	v
message	qt/rpcconsole.cpp	/^void RPCConsole::message(int category, const QString &message, bool html)$/;"	f	class:RPCConsole
metaType	qt/notificator.cpp	/^int FreedesktopImage::metaType()$/;"	f	class:FreedesktopImage
minAmount	qt/transactionfilterproxy.h	/^    qint64 minAmount;$/;"	m	class:TransactionFilterProxy
minerActive	qt/miningpage.h	/^    bool minerActive;$/;"	m	class:MiningPage
minerError	qt/miningpage.cpp	/^void MiningPage::minerError(QProcess::ProcessError error)$/;"	f	class:MiningPage
minerFinished	qt/miningpage.cpp	/^void MiningPage::minerFinished()$/;"	f	class:MiningPage
minerProcess	qt/miningpage.h	/^    QProcess *minerProcess;$/;"	m	class:MiningPage
minerStarted	qt/miningpage.cpp	/^void MiningPage::minerStarted()$/;"	f	class:MiningPage
miningAction	qt/bitcoingui.h	/^    QAction *miningAction;$/;"	m	class:BitcoinGUI
miningDebug	qt/clientmodel.h	/^    bool miningDebug;$/;"	m	class:ClientModel
miningPage	qt/bitcoingui.h	/^    MiningPage *miningPage;$/;"	m	class:BitcoinGUI
miningPassword	qt/clientmodel.h	/^    QString miningPassword;$/;"	m	class:ClientModel
miningPort	qt/clientmodel.h	/^    QString miningPort;$/;"	m	class:ClientModel
miningScanTime	qt/clientmodel.h	/^    int miningScanTime;$/;"	m	class:ClientModel
miningServer	qt/clientmodel.h	/^    QString miningServer;$/;"	m	class:ClientModel
miningStarted	qt/clientmodel.h	/^    bool miningStarted;$/;"	m	class:ClientModel
miningThreads	qt/clientmodel.h	/^    int miningThreads;$/;"	m	class:ClientModel
miningType	qt/clientmodel.h	/^    MiningType miningType;$/;"	m	class:ClientModel
miningUsername	qt/clientmodel.h	/^    QString miningUsername;$/;"	m	class:ClientModel
mlock	allocators.h	26;"	d
mlock	allocators.h	36;"	d
mode	qt/addressbookpage.h	/^    Mode mode;$/;"	m	class:AddressBookPage
mode	qt/askpassphrasedialog.h	/^    Mode mode;$/;"	m	class:AskPassphraseDialog
mode	qt/editaddressdialog.h	/^    Mode mode;$/;"	m	class:EditAddressDialog
mode	qt/notificator.h	/^    Mode mode;$/;"	m	class:Notificator
model	qt/addressbookpage.h	/^    AddressTableModel *model;$/;"	m	class:AddressBookPage
model	qt/askpassphrasedialog.h	/^    WalletModel *model;$/;"	m	class:AskPassphraseDialog
model	qt/csvmodelwriter.h	/^    const QAbstractItemModel *model;$/;"	m	class:CSVModelWriter
model	qt/editaddressdialog.h	/^    AddressTableModel *model;$/;"	m	class:EditAddressDialog
model	qt/miningpage.h	/^    ClientModel *model;$/;"	m	class:MiningPage
model	qt/optionsdialog.h	/^    OptionsModel *model;$/;"	m	class:OptionsDialog
model	qt/overviewpage.h	/^    WalletModel *model;$/;"	m	class:OverviewPage
model	qt/qrcodedialog.h	/^    OptionsModel *model;$/;"	m	class:QRCodeDialog
model	qt/sendcoinsdialog.h	/^    WalletModel *model;$/;"	m	class:SendCoinsDialog
model	qt/sendcoinsentry.h	/^    WalletModel *model;$/;"	m	class:SendCoinsEntry
model	qt/signverifymessagedialog.h	/^    WalletModel *model;$/;"	m	class:SignVerifyMessageDialog
model	qt/transactionview.h	/^    WalletModel *model;$/;"	m	class:TransactionView
movecmd	bitcoinrpc.cpp	/^Value movecmd(const Array& params, bool fHelp)$/;"	f
mru	test/mruset_tests.cpp	/^    mruset<int> mru;$/;"	m	class:mrutester	file:
mruset	mruset.h	/^    mruset(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }$/;"	f	class:mruset
mruset	mruset.h	/^template <typename T> class mruset$/;"	c
mrutester	test/mruset_tests.cpp	/^    mrutester() { mru.max_size(MAX_SIZE); }$/;"	f	class:mrutester
mrutester	test/mruset_tests.cpp	/^class mrutester$/;"	c	file:
munlock	allocators.h	27;"	d
munlock	allocators.h	39;"	d
mutex	sync.h	/^    boost::mutex mutex;$/;"	m	class:CSemaphore
mutexName	sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
myImage	qt/qrcodedialog.h	/^    QImage myImage;$/;"	m	class:QRCodeDialog
myclosesocket	compat.h	/^inline int myclosesocket(SOCKET& hSocket)$/;"	f
mysetint64	test/bignum_tests.cpp	/^NOINLINE void mysetint64(CBigNum& num, int64 n)$/;"	f
n	main.h	/^    unsigned int n;$/;"	m	class:CInPoint
n	main.h	/^    unsigned int n;$/;"	m	class:COutPoint
nAccountingEntryNumber	walletdb.cpp	/^static uint64 nAccountingEntryNumber = 0;$/;"	v	file:
nAmount	bitcoinrpc.cpp	/^    int64 nAmount;$/;"	m	struct:tallyitem	file:
nAttempts	addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nAvailableCreditCached	wallet.h	/^    mutable int64 nAvailableCreditCached;$/;"	m	class:CWalletTx
nBestHeight	main.cpp	/^int nBestHeight = -1;$/;"	v
nBits	main.h	/^    unsigned int nBits;$/;"	m	class:CBlock
nBits	main.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockPos	main.h	/^    unsigned int nBlockPos;$/;"	m	class:CBlockIndex
nBlockPos	main.h	/^    unsigned int nBlockPos;$/;"	m	class:CDiskTxPos
nCancel	main.h	/^    int nCancel;$/;"	m	class:CUnsignedAlert
nChangeCached	wallet.h	/^    mutable int64 nChangeCached;$/;"	m	class:CWalletTx
nChecksum	protocol.h	/^        unsigned int nChecksum;$/;"	m	class:CMessageHeader
nClientStartupTime	qt/clientmodel.cpp	/^static const int64 nClientStartupTime = GetTime();$/;"	v	file:
nConf	bitcoinrpc.cpp	/^    int nConf;$/;"	m	struct:tallyitem	file:
nConnectTimeout	netbase.cpp	/^int nConnectTimeout = 5000;$/;"	v
nCreditCached	wallet.h	/^    mutable int64 nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	wallet.h	/^    int64 nCreditDebit;$/;"	m	class:CAccountingEntry
nCurrentBlockFile	main.cpp	/^static unsigned int nCurrentBlockFile = 1;$/;"	v	file:
nDebitCached	wallet.h	/^    mutable int64 nDebitCached;$/;"	m	class:CWalletTx
nDepth	wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDisplayUnit	qt/optionsmodel.h	/^    int nDisplayUnit;$/;"	m	class:OptionsModel
nDoS	main.h	/^    mutable int nDoS;$/;"	m	class:CBlock
nDoS	main.h	/^    mutable int nDoS;$/;"	m	class:CTransaction
nExpiration	main.h	/^    int64 nExpiration;$/;"	m	class:CUnsignedAlert
nFile	main.h	/^    unsigned int nFile;$/;"	m	class:CBlockIndex
nFile	main.h	/^    unsigned int nFile;$/;"	m	class:CDiskTxPos
nGotIRCAddresses	irc.cpp	/^int nGotIRCAddresses = 0;$/;"	v
nHPSTimerStart	main.cpp	/^int64 nHPSTimerStart;$/;"	v
nHeaderStart	net.h	/^    int nHeaderStart;$/;"	m	class:CNode
nHeight	main.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nID	main.h	/^    int nID;$/;"	m	class:CUnsignedAlert
nIdCount	addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nIndex	main.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nIndex	wallet.h	/^    int64 nIndex;$/;"	m	class:CReserveKey
nInterval	main.cpp	/^static const int64 nInterval = nTargetTimespan \/ nTargetSpacing;	\/\/ 30 blocks$/;"	v	file:
nKey	addrman.h	/^    std::vector<unsigned char> nKey;$/;"	m	class:CAddrMan
nLastBlockSize	main.cpp	/^uint64 nLastBlockSize = 0;$/;"	v
nLastBlockTx	main.cpp	/^uint64 nLastBlockTx = 0;$/;"	v
nLastRecv	net.h	/^    int64 nLastRecv;$/;"	m	class:CNode
nLastRecv	net.h	/^    int64 nLastRecv;$/;"	m	class:CNodeStats
nLastSend	net.h	/^    int64 nLastSend;$/;"	m	class:CNode
nLastSend	net.h	/^    int64 nLastSend;$/;"	m	class:CNodeStats
nLastSendEmpty	net.h	/^    int64 nLastSendEmpty;$/;"	m	class:CNode
nLastSuccess	addrman.h	/^    int64 nLastSuccess;$/;"	m	class:CAddrInfo
nLastTry	protocol.h	/^        int64 nLastTry;$/;"	m	class:CAddress
nLimitProcessors	main.cpp	/^static int nLimitProcessors = -1;$/;"	v	file:
nLocalHostNonce	net.cpp	/^uint64 nLocalHostNonce = 0;$/;"	v
nLocalServices	net.cpp	/^uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);$/;"	v
nLockTime	main.h	/^    unsigned int nLockTime;$/;"	m	class:CTransaction
nMasterKeyMaxID	wallet.h	/^    unsigned int nMasterKeyMaxID;$/;"	m	class:CWallet
nMaxNumSize	script.cpp	/^static const size_t nMaxNumSize = 4;$/;"	v	file:
nMaxSize	mruset.h	/^    size_type nMaxSize;$/;"	m	class:mruset
nMaxVer	main.h	/^    int nMaxVer;            \/\/ highest version inclusive$/;"	m	class:CUnsignedAlert
nMedianTimeSpan	main.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon3
nMessageSize	protocol.h	/^        unsigned int nMessageSize;$/;"	m	class:CMessageHeader
nMessageStart	net.h	/^    unsigned int nMessageStart;$/;"	m	class:CNode
nMinDiskSpace	main.h	/^static const uint64 nMinDiskSpace = 52428800;$/;"	v
nMinSubsidy	main.cpp	/^int64 nMinSubsidy = 1 * COIN;$/;"	v
nMinVer	main.h	/^    int nMinVer;            \/\/ lowest version inclusive$/;"	m	class:CUnsignedAlert
nMinimumInputValue	main.cpp	/^int64 nMinimumInputValue = CENT \/ 100;$/;"	v
nMisbehavior	net.h	/^    int nMisbehavior;$/;"	m	class:CNode
nMisbehavior	net.h	/^    int nMisbehavior;$/;"	m	class:CNodeStats
nMockTime	util.cpp	/^static int64 nMockTime = 0;  \/\/ For unit testing$/;"	v	file:
nNew	addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nNonce	main.h	/^    unsigned int nNonce;$/;"	m	class:CBlock
nNonce	main.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nOut	rpcdump.cpp	/^    int nOut;$/;"	m	class:CTxDump	file:
nPort	net.cpp	/^    int nPort;$/;"	m	struct:LocalServiceInfo	file:
nPriority	main.h	/^    int nPriority;$/;"	m	class:CUnsignedAlert
nRandomPos	addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadPos	serialize.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nRefCount	addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nRefCount	net.h	/^    int nRefCount;$/;"	m	class:CNode
nRelayUntil	main.h	/^    int64 nRelayUntil;      \/\/ when newer nodes stop relaying to newer nodes$/;"	m	class:CUnsignedAlert
nReleaseTime	net.h	/^    int64 nReleaseTime;$/;"	m	class:CNode
nReleaseTime	net.h	/^    int64 nReleaseTime;$/;"	m	class:CNodeStats
nScore	net.cpp	/^    int nScore;$/;"	m	struct:LocalServiceInfo	file:
nSequence	main.h	/^    unsigned int nSequence;$/;"	m	class:CTxIn
nServices	net.h	/^    uint64 nServices;$/;"	m	class:CNode
nServices	net.h	/^    uint64 nServices;$/;"	m	class:CNodeStats
nServices	protocol.h	/^        uint64 nServices;$/;"	m	class:CAddress
nSize	util.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nTargetSpacing	main.cpp	/^static const int64 nTargetSpacing = 60;								\/\/ MovieCoin: 60 sec$/;"	v	file:
nTargetTimespan	main.cpp	/^static const int64 nTargetTimespan = 1 * 60 * 60;						\/\/ MovieCoin: every 1 hours$/;"	v	file:
nTime	main.h	/^    unsigned int nTime;$/;"	m	class:CBlock
nTime	main.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	protocol.h	/^        unsigned int nTime;$/;"	m	class:CAddress
nTime	wallet.h	/^    int64 nTime;$/;"	m	class:CAccountingEntry
nTime	wallet.h	/^    int64 nTime;$/;"	m	class:CKeyPool
nTimeBestReceived	main.cpp	/^int64 nTimeBestReceived = 0;$/;"	v
nTimeConnected	net.h	/^    int64 nTimeConnected;$/;"	m	class:CNode
nTimeConnected	net.h	/^    int64 nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	wallet.h	/^    int64 nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpires	wallet.h	/^    int64 nTimeExpires;$/;"	m	class:CWalletKey
nTimeOffset	util.cpp	/^static int64 nTimeOffset = 0;$/;"	v	file:
nTimeReceived	wallet.h	/^    unsigned int nTimeReceived;  \/\/ time received by this node$/;"	m	class:CWalletTx
nTransactionFee	main.cpp	/^int64 nTransactionFee = 0;$/;"	v
nTransactionsUpdated	main.cpp	/^unsigned int nTransactionsUpdated = 0;$/;"	v
nTried	addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nTxPos	main.h	/^    unsigned int nTxPos;$/;"	m	class:CDiskTxPos
nType	serialize.h	/^    int nType;$/;"	m	class:CAutoFile
nType	serialize.h	/^    int nType;$/;"	m	class:CDataStream
nType	serialize.h	/^    int nType;$/;"	m	struct:ser_streamplaceholder
nType	util.h	/^    int nType;$/;"	m	class:CHashWriter
nValue	main.h	/^    int64 nValue;$/;"	m	class:CTxOut
nValue	rpcdump.cpp	/^    int64 nValue;$/;"	m	class:CTxDump	file:
nVersion	base58.h	/^    unsigned char nVersion;$/;"	m	class:CBase58Data
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CBlock
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CTransaction
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CUnsignedAlert
nVersion	main.h	/^    int nVersion;$/;"	m	class:CBlock
nVersion	main.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	main.h	/^    int nVersion;$/;"	m	class:CTransaction
nVersion	main.h	/^    int nVersion;$/;"	m	class:CUnsignedAlert
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CAutoFile
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	serialize.h	/^    int nVersion;$/;"	m	struct:ser_streamplaceholder
nVersion	util.h	/^    int nVersion;$/;"	m	class:CHashWriter
nWalletDBUpdated	db.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWalletMaxVersion	wallet.h	/^    int nWalletMaxVersion;$/;"	m	class:CWallet
nWalletUnlockTime	bitcoinrpc.cpp	/^static int64 nWalletUnlockTime;$/;"	v	file:
nWalletVersion	wallet.h	/^    int nWalletVersion;$/;"	m	class:CWallet
name	bitcoinrpc.h	/^    std::string name;$/;"	m	class:CRPCCommand
name	qt/bitcoinunits.cpp	/^QString BitcoinUnits::name(int unit)$/;"	f	class:BitcoinUnits
name_	json/json_spirit_reader_template.h	/^        String_type name_;              \/\/ of current name\/value pair$/;"	m	class:json_spirit::Semantic_actions
name_	json/json_spirit_value.h	/^        String_type name_;$/;"	m	struct:json_spirit::Pair_impl
nameproxyInfo	netbase.cpp	/^static proxyType nameproxyInfo;$/;"	v	file:
newAddressToSelect	qt/addressbookpage.h	/^    QString newAddressToSelect;$/;"	m	class:AddressBookPage
new_false	json/json_spirit_reader_template.h	/^        void new_false( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_int	json/json_spirit_reader_template.h	/^        void new_int( boost::int64_t i )$/;"	f	class:json_spirit::Semantic_actions
new_line	json/json_spirit_writer_template.h	/^        void new_line()$/;"	f	class:json_spirit::Generator
new_name	json/json_spirit_reader_template.h	/^        void new_name( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_null	json/json_spirit_reader_template.h	/^        void new_null( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_real	json/json_spirit_reader_template.h	/^        void new_real( double d )$/;"	f	class:json_spirit::Semantic_actions
new_str	json/json_spirit_reader_template.h	/^        void new_str( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_true	json/json_spirit_reader_template.h	/^        void new_true( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_uint64	json/json_spirit_reader_template.h	/^        void new_uint64( boost::uint64_t ui )$/;"	f	class:json_spirit::Semantic_actions
non_printable_to_string	json/json_spirit_writer_template.h	/^    String_type non_printable_to_string( unsigned int c )$/;"	f	namespace:json_spirit
notificator	qt/bitcoingui.h	/^    Notificator *notificator;$/;"	m	class:BitcoinGUI
notify	qt/notificator.cpp	/^void Notificator::notify(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyDBus	qt/notificator.cpp	/^void Notificator::notifyDBus(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
notifyGrowl	qt/notificator.cpp	/^void Notificator::notifyGrowl(Class cls, const QString &title, const QString &text, const QIcon &icon)$/;"	f	class:Notificator
notifySystray	qt/notificator.cpp	/^void Notificator::notifySystray(Class cls, const QString &title, const QString &text, const QIcon &icon, int millisTimeout)$/;"	f	class:Notificator
noui_ThreadSafeAskFee	noui.cpp	/^static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)$/;"	f	file:
noui_ThreadSafeMessageBox	noui.cpp	/^static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)$/;"	f	file:
noui_connect	noui.cpp	/^void noui_connect()$/;"	f
null	json/json_spirit_value.h	/^        static const Value_impl null;$/;"	m	class:json_spirit::Value_impl
null	json/json_spirit_value.h	/^    const Value_impl< Config > Value_impl< Config >::null;$/;"	m	class:json_spirit::Value_impl
null_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
numBlocksAtStartup	qt/clientmodel.h	/^    int numBlocksAtStartup;$/;"	m	class:ClientModel
number_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
obj_to_map	json/json_spirit_utils.h	/^    void obj_to_map( const Obj_t& obj, Map_t& mp_obj )$/;"	f	namespace:json_spirit
obj_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
object_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
octx	scrypt.c	/^	SHA256_CTX octx;$/;"	m	struct:HMAC_SHA256Context	file:
okSafeMode	bitcoinrpc.h	/^    bool okSafeMode;$/;"	m	class:CRPCCommand
onCopyLabelAction	qt/addressbookpage.cpp	/^void AddressBookPage::onCopyLabelAction()$/;"	f	class:AddressBookPage
onEditAction	qt/addressbookpage.cpp	/^void AddressBookPage::onEditAction()$/;"	f	class:AddressBookPage
on_addressBookButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_addressBookButton_clicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_addressBookButton_clicked()$/;"	f	class:SendCoinsEntry
on_applyButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_applyButton_clicked()$/;"	f	class:OptionsDialog
on_btnSaveAs_clicked	qt/qrcodedialog.cpp	/^void QRCodeDialog::on_btnSaveAs_clicked()$/;"	f	class:QRCodeDialog
on_buttonBox_accepted	qt/aboutdialog.cpp	/^void AboutDialog::on_buttonBox_accepted()$/;"	f	class:AboutDialog
on_cancelButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_cancelButton_clicked()$/;"	f	class:OptionsDialog
on_chkReqPayment_toggled	qt/qrcodedialog.cpp	/^void QRCodeDialog::on_chkReqPayment_toggled(bool fChecked)$/;"	f	class:QRCodeDialog
on_clearButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_clearButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_clearButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_copySignatureButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_copyToClipboard_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_copyToClipboard_clicked()$/;"	f	class:AddressBookPage
on_deleteButton_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_deleteButton_clicked()$/;"	f	class:AddressBookPage
on_deleteButton_clicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_deleteButton_clicked()$/;"	f	class:SendCoinsEntry
on_lineEdit_returnPressed	qt/rpcconsole.cpp	/^void RPCConsole::on_lineEdit_returnPressed()$/;"	f	class:RPCConsole
on_lnLabel_textChanged	qt/qrcodedialog.cpp	/^void QRCodeDialog::on_lnLabel_textChanged()$/;"	f	class:QRCodeDialog
on_lnMessage_textChanged	qt/qrcodedialog.cpp	/^void QRCodeDialog::on_lnMessage_textChanged()$/;"	f	class:QRCodeDialog
on_lnReqAmount_textChanged	qt/qrcodedialog.cpp	/^void QRCodeDialog::on_lnReqAmount_textChanged()$/;"	f	class:QRCodeDialog
on_newAddressButton_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_newAddressButton_clicked()$/;"	f	class:AddressBookPage
on_okButton_clicked	qt/optionsdialog.cpp	/^void OptionsDialog::on_okButton_clicked()$/;"	f	class:OptionsDialog
on_openDebugLogfileButton_clicked	qt/rpcconsole.cpp	/^void RPCConsole::on_openDebugLogfileButton_clicked()$/;"	f	class:RPCConsole
on_pasteButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_pasteButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_pasteButton_clicked	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_pasteButton_clicked()$/;"	f	class:SendCoinsEntry
on_payTo_textChanged	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::on_payTo_textChanged(const QString &address)$/;"	f	class:SendCoinsEntry
on_sendButton_clicked	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::on_sendButton_clicked()$/;"	f	class:SendCoinsDialog
on_showCLOptionsButton_clicked	qt/rpcconsole.cpp	/^void RPCConsole::on_showCLOptionsButton_clicked()$/;"	f	class:RPCConsole
on_showQRCode_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_showQRCode_clicked()$/;"	f	class:AddressBookPage
on_signMessageButton_SM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_signMessage_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_signMessage_clicked()$/;"	f	class:AddressBookPage
on_tabWidget_currentChanged	qt/rpcconsole.cpp	/^void RPCConsole::on_tabWidget_currentChanged(int index)$/;"	f	class:RPCConsole
on_verifyMessageButton_VM_clicked	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()$/;"	f	class:SignVerifyMessageDialog
on_verifyMessage_clicked	qt/addressbookpage.cpp	/^void AddressBookPage::on_verifyMessage_clicked()$/;"	f	class:AddressBookPage
opcodetype	script.h	/^enum opcodetype$/;"	g
openDebugLogfile	qt/guiutil.cpp	/^void openDebugLogfile()$/;"	f	namespace:GUIUtil
openRPCConsoleAction	qt/bitcoingui.h	/^    QAction *openRPCConsoleAction;$/;"	m	class:BitcoinGUI
open_for	qt/transactionrecord.h	/^    int64 open_for; \/**< Timestamp if status==OpenUntilDate, otherwise number of blocks *\/$/;"	m	class:TransactionStatus
operator !	bignum.h	/^    bool operator!() const$/;"	f	class:CBigNum
operator !	bignum.h	/^    bool operator!() { return (pctx == NULL); }$/;"	f	class:CAutoBN_CTX
operator !	serialize.h	/^    bool operator!()            { return (file == NULL); }$/;"	f	class:CAutoFile
operator !	uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	bignum.h	/^inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }$/;"	f
operator !=	key.h	/^    friend bool operator!=(const CPubKey &a, const CPubKey &b) { return a.vchPubKey != b.vchPubKey; }$/;"	f	class:CPubKey
operator !=	main.h	/^    friend bool operator!=(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator !=	main.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	main.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	main.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	main.h	/^    friend bool operator!=(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator !=	main.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	netbase.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	netbase.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator !=	uint256.h	/^inline bool operator!=(const base_uint160& a, const uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const base_uint256& a, const uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const base_uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const base_uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const uint256& b)              { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }$/;"	f
operator %	bignum.h	/^inline const CBigNum operator%(const CBigNum& a, const CBigNum& b)$/;"	f
operator %=	bignum.h	/^    CBigNum& operator%=(const CBigNum& b)$/;"	f	class:CBigNum
operator &	bignum.h	/^    BN_CTX** operator&() { return &pctx; }$/;"	f	class:CAutoBN_CTX
operator &	serialize.h	/^    FILE** operator&()          { return &file; }$/;"	f	class:CAutoFile
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const base_uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const base_uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const uint256& b)      { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &=	uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator ()	base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }$/;"	f	class:CBitcoinAddressVisitor
operator ()	base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CNoDestination &id) const { return false; }$/;"	f	class:CBitcoinAddressVisitor
operator ()	base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }$/;"	f	class:CBitcoinAddressVisitor
operator ()	bitcoinrpc.cpp	/^    Object operator()(const CKeyID &keyID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	bitcoinrpc.cpp	/^    Object operator()(const CNoDestination &dest) const { return Object(); }$/;"	f	class:DescribeAddressVisitor
operator ()	bitcoinrpc.cpp	/^    Object operator()(const CScriptID &scriptID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const AddressTableEntry &a, const QString &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/addresstablemodel.cpp	/^    bool operator()(const QString &a, const AddressTableEntry &b) const$/;"	f	struct:AddressTableEntryLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const TransactionRecord &a, const uint256 &b) const$/;"	f	struct:TxLessThan
operator ()	qt/transactiontablemodel.cpp	/^    bool operator()(const uint256 &a, const TransactionRecord &b) const$/;"	f	struct:TxLessThan
operator ()	script.cpp	/^    bool operator()(const CKeyID &keyID) const { return keystore->HaveKey(keyID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CKeyID &keyID) const {$/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const CNoDestination &dest) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CScriptID &scriptID) const {$/;"	f	class:CScriptVisitor
operator ()	wallet.cpp	/^    bool operator()(const pair<int64, pair<const CWalletTx*, unsigned int> >& t1,$/;"	f	struct:CompareValueOnly
operator *	bignum.h	/^    BN_CTX& operator*() { return *pctx; }$/;"	f	class:CAutoBN_CTX
operator *	bignum.h	/^inline const CBigNum operator*(const CBigNum& a, const CBigNum& b)$/;"	f
operator *	serialize.h	/^    FILE& operator*()           { return *file; }$/;"	f	class:CAutoFile
operator *=	bignum.h	/^    CBigNum& operator*=(const CBigNum& b)$/;"	f	class:CBigNum
operator +	bignum.h	/^inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)$/;"	f
operator +	script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	serialize.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const base_uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const base_uint256& b) { return uint256(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const base_uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator ++	bignum.h	/^    CBigNum& operator++()$/;"	f	class:CBigNum
operator ++	bignum.h	/^    const CBigNum operator++(int)$/;"	f	class:CBigNum
operator ++	uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator +=	bignum.h	/^    CBigNum& operator+=(const CBigNum& b)$/;"	f	class:CBigNum
operator +=	script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	serialize.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	uint256.h	/^    base_uint& operator+=(uint64 b64)$/;"	f	class:base_uint
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a)$/;"	f
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)$/;"	f
operator -	uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const base_uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const base_uint256& b) { return uint256(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const base_uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator --	bignum.h	/^    CBigNum& operator--()$/;"	f	class:CBigNum
operator --	bignum.h	/^    const CBigNum operator--(int)$/;"	f	class:CBigNum
operator --	uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator -=	bignum.h	/^    CBigNum& operator-=(const CBigNum& b)$/;"	f	class:CBigNum
operator -=	uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	uint256.h	/^    base_uint& operator-=(uint64 b64)$/;"	f	class:base_uint
operator ->	serialize.h	/^    FILE* operator->()          { return file; }$/;"	f	class:CAutoFile
operator /	bignum.h	/^inline const CBigNum operator\/(const CBigNum& a, const CBigNum& b)$/;"	f
operator /=	bignum.h	/^    CBigNum& operator\/=(const CBigNum& b)$/;"	f	class:CBigNum
operator <	base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	bignum.h	/^inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }$/;"	f
operator <	key.h	/^    friend bool operator<(const CPubKey &a, const CPubKey &b) { return a.vchPubKey < b.vchPubKey; }$/;"	f	class:CPubKey
operator <	main.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	mruset.h	/^    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }$/;"	f	class:mruset
operator <	netbase.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	netbase.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	script.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <	uint256.h	/^inline bool operator<(const base_uint160& a, const uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const base_uint256& a, const uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const base_uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const base_uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const uint256& b)               { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <<	bignum.h	/^inline const CBigNum operator<<(const CBigNum& a, unsigned int shift)$/;"	f
operator <<	qt/notificator.cpp	/^QDBusArgument &operator<<(QDBusArgument &a, const FreedesktopImage &i)$/;"	f
operator <<	script.h	/^    CScript& operator<<(const CBigNum& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CPubKey& key)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint160& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint256& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int b)            { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int64 b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(long b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(short b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(signed char b)    { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(uint64 b)         { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned char b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned int b)   { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned long b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned short b) { return push_uint64(b); }$/;"	f	class:CScript
operator <<	serialize.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	serialize.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	uint256.h	/^inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }$/;"	f
operator <<	util.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<=	bignum.h	/^    CBigNum& operator<<=(unsigned int shift)$/;"	f	class:CBigNum
operator <<=	uint256.h	/^    base_uint& operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	bignum.h	/^inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }$/;"	f
operator <=	uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <=	uint256.h	/^inline bool operator<=(const base_uint160& a, const uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const base_uint256& a, const uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const base_uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const base_uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const uint256& b)              { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator =	bignum.h	/^    BN_CTX* operator=(BN_CTX* pnew) { return pctx = pnew; }$/;"	f	class:CAutoBN_CTX
operator =	bignum.h	/^    CBigNum& operator=(const CBigNum& b)$/;"	f	class:CBigNum
operator =	json/json_spirit_value.h	/^    Value_impl< Config >& Value_impl< Config >::operator=( const Value_impl& lhs )$/;"	f	class:json_spirit::Value_impl
operator =	key.cpp	/^CKey& CKey::operator=(const CKey& b)$/;"	f	class:CKey
operator =	qt/walletmodel.h	/^        UnlockContext& operator=(const UnlockContext& rhs) { CopyFrom(rhs); return *this; }$/;"	f	class:WalletModel::UnlockContext
operator =	serialize.h	/^    FILE* operator=(FILE* pnew) { return file = pnew; }$/;"	f	class:CAutoFile
operator =	uint256.h	/^    base_uint& operator=(uint64 b)$/;"	f	class:base_uint
operator =	uint256.h	/^    uint160& operator=(const basetype& b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint160& operator=(uint64 b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint256& operator=(const basetype& b)$/;"	f	class:uint256
operator =	uint256.h	/^    uint256& operator=(uint64 b)$/;"	f	class:uint256
operator ==	base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	bignum.h	/^inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }$/;"	f
operator ==	json/json_spirit_error_position.h	/^    inline bool Error_position::operator==( const Error_position& lhs ) const$/;"	f	class:json_spirit::Error_position
operator ==	json/json_spirit_value.h	/^    bool Pair_impl< Config >::operator==( const Pair_impl< Config >& lhs ) const$/;"	f	class:json_spirit::Pair_impl
operator ==	json/json_spirit_value.h	/^    bool Value_impl< Config >::operator==( const Value_impl& lhs ) const$/;"	f	class:json_spirit::Value_impl
operator ==	key.h	/^    friend bool operator==(const CPubKey &a, const CPubKey &b) { return a.vchPubKey == b.vchPubKey; }$/;"	f	class:CPubKey
operator ==	main.h	/^    friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator ==	main.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	main.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	main.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	main.h	/^    friend bool operator==(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator ==	main.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }$/;"	f	class:mruset
operator ==	mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }$/;"	f	class:mruset
operator ==	netbase.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	netbase.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	script.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator ==	uint256.h	/^inline bool operator==(const base_uint160& a, const uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const base_uint256& a, const uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const base_uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const base_uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const uint256& b)              { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }$/;"	f
operator >	base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	bignum.h	/^inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }$/;"	f
operator >	uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >	uint256.h	/^inline bool operator>(const base_uint160& a, const uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const base_uint256& a, const uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const base_uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const base_uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const uint256& b)               { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >=	base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	bignum.h	/^inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }$/;"	f
operator >=	uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >=	uint256.h	/^inline bool operator>=(const base_uint160& a, const uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const base_uint256& a, const uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const base_uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const base_uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const uint256& b)              { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >>	bignum.h	/^inline const CBigNum operator>>(const CBigNum& a, unsigned int shift)$/;"	f
operator >>	qt/notificator.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &a, FreedesktopImage &i)$/;"	f
operator >>	serialize.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	serialize.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	uint256.h	/^inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }$/;"	f
operator >>=	bignum.h	/^    CBigNum& operator>>=(unsigned int shift)$/;"	f	class:CBigNum
operator >>=	uint256.h	/^    base_uint& operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator BN_CTX*	bignum.h	/^    operator BN_CTX*() { return pctx; }$/;"	f	class:CAutoBN_CTX
operator FILE*	serialize.h	/^    operator FILE*()            { return file; }$/;"	f	class:CAutoFile
operator []	bitcoinrpc.cpp	/^const CRPCCommand *CRPCTable::operator[](string name) const$/;"	f	class:CRPCTable
operator []	serialize.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	serialize.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const base_uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const base_uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const uint256& b)      { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^=	uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	uint256.h	/^    base_uint& operator^=(uint64 b)$/;"	f	class:base_uint
operator bool	sync.h	/^    operator bool() {$/;"	f	class:CSemaphoreGrant
operator bool	sync.h	/^    operator bool()$/;"	f	class:CMutexLock
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { return uint160(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const base_uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const base_uint256& b) { return uint256(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const base_uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const uint256& b)      { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |=	uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	uint256.h	/^    base_uint& operator|=(uint64 b)$/;"	f	class:base_uint
operator ~	uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optionsAction	qt/bitcoingui.h	/^    QAction *optionsAction;$/;"	m	class:BitcoinGUI
optionsClicked	qt/bitcoingui.cpp	/^void BitcoinGUI::optionsClicked()$/;"	f	class:BitcoinGUI
optionsModel	qt/addressbookpage.h	/^    OptionsModel *optionsModel;$/;"	m	class:AddressBookPage
optionsModel	qt/clientmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:ClientModel
optionsModel	qt/walletmodel.h	/^    OptionsModel *optionsModel;$/;"	m	class:WalletModel
os_	json/json_spirit_writer_template.h	/^        Ostream_type& os_;$/;"	m	class:json_spirit::Generator
other	allocators.h	/^    { typedef secure_allocator<_Other> other; };$/;"	t	struct:secure_allocator::rebind
other	allocators.h	/^    { typedef zero_after_free_allocator<_Other> other; };$/;"	t	struct:zero_after_free_allocator::rebind
output	json/json_spirit_writer_template.h	/^        void output( bool b )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Array_type& arr )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Obj_member_type& member )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Object_type& obj )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const String_type& s )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Value_type& value )$/;"	f	class:json_spirit::Generator
output_array_or_obj	json/json_spirit_writer_template.h	/^        void output_array_or_obj( const T& t, Char_type start_char, Char_type end_char )$/;"	f	class:json_spirit::Generator
output_int	json/json_spirit_writer_template.h	/^        void output_int( const Value_type& value )$/;"	f	class:json_spirit::Generator
overviewAction	qt/bitcoingui.h	/^    QAction *overviewAction;$/;"	m	class:BitcoinGUI
overviewPage	qt/bitcoingui.h	/^    OverviewPage *overviewPage;$/;"	m	class:BitcoinGUI
pSHA256InitState	main.cpp	/^static const unsigned int pSHA256InitState[8] =$/;"	v	file:
paint	qt/overviewpage.cpp	/^    inline void paint(QPainter *painter, const QStyleOptionViewItem &option,$/;"	f	class:TxViewDelegate
pair_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
param1	net.h	/^    void* param1;$/;"	m	class:CRequestTracker
params	bitcoinrpc.cpp	/^    Array params;$/;"	m	class:JSONRequest	file:
parent	qt/addresstablemodel.cpp	/^    AddressTableModel *parent;$/;"	m	class:AddressTablePriv	file:
parent	qt/notificator.h	/^    QWidget *parent;$/;"	m	class:Notificator
parent	qt/transactiontablemodel.cpp	/^    TransactionTableModel *parent;$/;"	m	class:TransactionTablePriv	file:
parse	bitcoinrpc.cpp	/^void JSONRequest::parse(const Value& valRequest)$/;"	f	class:JSONRequest
parse	qt/bitcoinunits.cpp	/^bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)$/;"	f	class:BitcoinUnits
parseBitcoinURI	qt/guiutil.cpp	/^bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
parseBitcoinURI	qt/guiutil.cpp	/^bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)$/;"	f	namespace:GUIUtil
pasteEntry	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)$/;"	f	class:SendCoinsDialog
pathAddr	db.h	/^    boost::filesystem::path pathAddr;$/;"	m	class:CAddrDB
pathEnv	db.h	/^    boost::filesystem::path pathEnv;$/;"	m	class:CDBEnv
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pchCommand	protocol.h	/^        char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchGarliCat	netbase.cpp	/^static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};$/;"	v	file:
pchIPv4	netbase.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	main.cpp	/^unsigned char pchMessageStart[4] = { 0xc0, 0xdb, 0xf1, 0xfd }; $/;"	v
pchMessageStart	protocol.h	/^        char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	netbase.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pctx	bignum.h	/^    BN_CTX* pctx;$/;"	m	class:CAutoBN_CTX
pdb	db.h	/^    Db* pdb;$/;"	m	class:CDB
peer	bitcoinrpc.cpp	/^    typename Protocol::endpoint peer;$/;"	m	class:AcceptedConnectionImpl	file:
peer_address_to_string	bitcoinrpc.cpp	/^    virtual std::string peer_address_to_string() const$/;"	f	class:AcceptedConnectionImpl
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
permute	test/mruset_tests.cpp	/^int static permute(int n)$/;"	f	file:
phashBlock	main.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
phexdigit	util.cpp	/^static signed char phexdigit[256] =$/;"	v	file:
pid_t	util.h	/^typedef int pid_t; \/* define for windows compatiblity *\/$/;"	t
pindex	rpcdump.cpp	/^    CBlockIndex *pindex;$/;"	m	class:CTxDump	file:
pindexBest	main.cpp	/^CBlockIndex* pindexBest = NULL;$/;"	v
pindexGenesisBlock	main.cpp	/^CBlockIndex* pindexGenesisBlock = NULL;$/;"	v
pindexLastGetBlocksBegin	net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pkey	key.h	/^    EC_KEY* pkey;$/;"	m	class:CKey
pn	uint256.h	/^    unsigned int pn[WIDTH];$/;"	m	class:base_uint
pnSeed	net.cpp	/^unsigned int pnSeed[] =$/;"	v
pnext	main.h	/^    CBlockIndex* pnext;$/;"	m	class:CBlockIndex
pnodeLocalHost	net.cpp	/^static CNode* pnodeLocalHost = NULL;$/;"	v	file:
pointer	allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
pollBalanceChanged	qt/walletmodel.cpp	/^void WalletModel::pollBalanceChanged()$/;"	f	class:WalletModel
pollTimer	qt/clientmodel.h	/^    QTimer *pollTimer;$/;"	m	class:ClientModel
pollTimer	qt/walletmodel.h	/^    QTimer *pollTimer;$/;"	m	class:WalletModel
pop_lock	sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	script.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
port	irc.cpp	/^    short port;$/;"	m	struct:ircaddr	file:
port	netbase.h	/^        unsigned short port; \/\/ host order$/;"	m	class:CService
pos	main.h	/^    CDiskTxPos pos;$/;"	m	class:CTxIndex
posn_begin_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
posn_end_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
post	sync.h	/^    void post() {$/;"	f	class:CSemaphore
potential_deadlock_detected	sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
ppmutexOpenSSL	util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	main.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
pretty_	json/json_spirit_writer_template.h	/^        bool pretty_;$/;"	m	class:json_spirit::Generator
prevout	main.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
print	main.cpp	/^    void print() const$/;"	f	class:COrphan
print	main.h	/^    void print() const$/;"	f	class:CBlock
print	main.h	/^    void print() const$/;"	f	class:CBlockIndex
print	main.h	/^    void print() const$/;"	f	class:CDiskBlockIndex
print	main.h	/^    void print() const$/;"	f	class:CDiskTxPos
print	main.h	/^    void print() const$/;"	f	class:COutPoint
print	main.h	/^    void print() const$/;"	f	class:CTransaction
print	main.h	/^    void print() const$/;"	f	class:CTxIn
print	main.h	/^    void print() const$/;"	f	class:CTxOut
print	main.h	/^    void print() const$/;"	f	class:CUnsignedAlert
print	netbase.cpp	/^void CNetAddr::print() const$/;"	f	class:CNetAddr
print	netbase.cpp	/^void CService::print() const$/;"	f	class:CService
print	protocol.cpp	/^void CInv::print() const$/;"	f	class:CInv
print	script.h	/^    void print() const$/;"	f	class:CScript
print	wallet.h	/^    void print() const$/;"	f	class:COutput
printToConsole	qt/guiutil.cpp	/^void HelpMessageBox::printToConsole()$/;"	f	class:GUIUtil::HelpMessageBox
printf	bitcoinrpc.cpp	19;"	d	file:
printf	bitcoinrpc.cpp	33;"	d	file:
printf	rpcdump.cpp	14;"	d	file:
printf	util.h	45;"	d
priv	qt/addresstablemodel.h	/^    AddressTablePriv *priv;$/;"	m	class:AddressTableModel
priv	qt/transactiontablemodel.h	/^    TransactionTablePriv *priv;$/;"	m	class:TransactionTableModel
programName	qt/notificator.h	/^    QString programName;$/;"	m	class:Notificator
program_options	util.cpp	/^    namespace program_options {$/;"	n	namespace:boost	file:
progressBar	qt/bitcoingui.h	/^    QProgressBar *progressBar;$/;"	m	class:BitcoinGUI
progressBarLabel	qt/bitcoingui.h	/^    QLabel *progressBarLabel;$/;"	m	class:BitcoinGUI
proxyInfo	netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyModel	qt/addressbookpage.h	/^    QSortFilterProxyModel *proxyModel;$/;"	m	class:AddressBookPage
proxyType	netbase.cpp	/^typedef std::pair<CService, int> proxyType;$/;"	t	file:
pszBase58	base58.h	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v
ptx	main.cpp	/^    CTransaction* ptx;$/;"	m	class:COrphan	file:
ptx	main.h	/^    CTransaction* ptx;$/;"	m	class:CInPoint
ptx	rpcdump.cpp	/^    CWalletTx* ptx;$/;"	m	class:CTxDump	file:
push_int64	script.h	/^    CScript& push_int64(int64 n)$/;"	f	class:CScript
push_lock	sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
push_uint64	script.h	/^    CScript& push_uint64(uint64 n)$/;"	f	class:CScript
pwallet	wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
pwalletMain	test/test_bitcoin.cpp	/^CWallet* pwalletMain;$/;"	v
pwalletdbEncryption	wallet.h	/^    CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
queryHashes	main.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CTxMemPool
queue	mruset.h	/^    std::deque<T> queue;$/;"	m	class:mruset
quitAction	qt/bitcoingui.h	/^    QAction *quitAction;$/;"	m	class:BitcoinGUI
rdbuf	serialize.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	bitcoinrpc.cpp	/^    std::streamsize read(char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::string& s, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::string& s, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::wstring& s, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::wstring& s, wmValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::istream& is, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::istream& is, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wistream& is, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wistream& is, wmValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )$/;"	f	class:json_spirit
read	serialize.h	/^    CAutoFile& read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	serialize.h	/^    CDataStream& read(char* pch, int nSize)$/;"	f	class:CDataStream
readProcessOutput	qt/miningpage.cpp	/^void MiningPage::readProcessOutput()$/;"	f	class:MiningPage
readTimer	qt/miningpage.h	/^    QTimer *readTimer;$/;"	m	class:MiningPage
read_json	test/script_tests.cpp	/^read_json(const std::string& filename)$/;"	f
read_next	json/json_spirit_stream_reader.h	/^        bool read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader
read_next	json/json_spirit_stream_reader.h	/^        void read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader_thrower
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::string& s, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::string& s, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::wstring& s, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::wstring& s, wmValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::istream& is, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::istream& is, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wistream& is, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wistream& is, wmValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )$/;"	f	class:json_spirit
read_range	json/json_spirit_reader_template.h	/^    bool read_range( Iter_type& begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_range_or_throw	json/json_spirit_reader_template.h	/^    Iter_type read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_stream	json/json_spirit_reader_template.h	/^    bool read_stream( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_stream_or_throw	json/json_spirit_reader_template.h	/^    void read_stream_or_throw( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_string	json/json_spirit_reader_template.h	/^    bool read_string( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
read_string_or_throw	json/json_spirit_reader_template.h	/^    void read_string_or_throw( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
real_strprintf	util.cpp	/^string real_strprintf(const std::string &format, int dummy, ...)$/;"	f
real_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
reason_	json/json_spirit_error_position.h	/^        std::string reason_;$/;"	m	struct:json_spirit::Error_position
rebind	allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:secure_allocator
rebind	allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:zero_after_free_allocator
receiveCoinsAction	qt/bitcoingui.h	/^    QAction *receiveCoinsAction;$/;"	m	class:BitcoinGUI
receiveCoinsPage	qt/bitcoingui.h	/^    AddressBookPage *receiveCoinsPage;$/;"	m	class:BitcoinGUI
reference	allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
reference	serialize.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
refreshAddressTable	qt/addresstablemodel.cpp	/^    void refreshAddressTable()$/;"	f	class:AddressTablePriv
refreshWallet	qt/transactiontablemodel.cpp	/^    void refreshWallet()$/;"	f	class:TransactionTablePriv
reject	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::reject()$/;"	f	class:SendCoinsDialog
rejectedShares	qt/miningpage.h	/^    int rejectedShares;$/;"	m	class:MiningPage
release	serialize.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
relock	qt/walletmodel.h	/^        mutable bool relock; \/\/ mutable, as it can be set to false by copying$/;"	m	class:WalletModel::UnlockContext
remove	main.cpp	/^bool CTxMemPool::remove(CTransaction &tx)$/;"	f	class:CTxMemPool
removeEntry	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::removeEntry(SendCoinsEntry* entry)$/;"	f	class:SendCoinsDialog
removeRows	qt/addresstablemodel.cpp	/^bool AddressTableModel::removeRows(int row, int count, const QModelIndex & parent)$/;"	f	class:AddressTableModel
reportToList	qt/miningpage.cpp	/^void MiningPage::reportToList(QString msg, int type, QString time)$/;"	f	class:MiningPage
request	qt/rpcconsole.cpp	/^void RPCExecutor::request(const QString &command)$/;"	f	class:RPCExecutor
requestUnlock	qt/walletmodel.cpp	/^WalletModel::UnlockContext WalletModel::requestUnlock()$/;"	f	class:WalletModel
reserve	serialize.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
resetMiningButton	qt/miningpage.cpp	/^void MiningPage::resetMiningButton()$/;"	f	class:MiningPage
resize	serialize.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
returnValue	qt/addressbookpage.h	/^    QString returnValue;$/;"	m	class:AddressBookPage
reverse_iterator	serialize.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
rfc1123Time	bitcoinrpc.cpp	/^string rfc1123Time()$/;"	f
role	qt/csvmodelwriter.h	/^        int role;$/;"	m	struct:CSVModelWriter::Column
role	qt/qvaluecombobox.h	/^    int role;$/;"	m	class:QValueComboBox
roundAcceptedShares	qt/miningpage.h	/^    int roundAcceptedShares;$/;"	m	class:MiningPage
roundRejectedShares	qt/miningpage.h	/^    int roundRejectedShares;$/;"	m	class:MiningPage
roundint	util.h	/^inline int roundint(double d)$/;"	f
roundint64	util.h	/^inline int64 roundint64(double d)$/;"	f
rowCount	qt/addresstablemodel.cpp	/^int AddressTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:AddressTableModel
rowCount	qt/bitcoinunits.cpp	/^int BitcoinUnits::rowCount(const QModelIndex &parent) const$/;"	f	class:BitcoinUnits
rowCount	qt/optionsmodel.cpp	/^int OptionsModel::rowCount(const QModelIndex & parent) const$/;"	f	class:OptionsModel
rowCount	qt/transactionfilterproxy.cpp	/^int TransactionFilterProxy::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionFilterProxy
rowCount	qt/transactiontablemodel.cpp	/^int TransactionTableModel::rowCount(const QModelIndex &parent) const$/;"	f	class:TransactionTableModel
rpcConsole	qt/bitcoingui.h	/^    RPCConsole *rpcConsole;$/;"	m	class:BitcoinGUI
rpcfn_type	bitcoinrpc.h	/^typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);$/;"	t	class:json_spirit
runCommand	util.cpp	/^void runCommand(std::string strCommand)$/;"	f
saveCurrentRow	qt/editaddressdialog.cpp	/^bool EditAddressDialog::saveCurrentRow()$/;"	f	class:EditAddressDialog
saveSettings	qt/miningpage.cpp	/^void MiningPage::saveSettings()$/;"	f	class:MiningPage
script	script.cpp	/^    CScript *script;$/;"	m	class:CScriptVisitor	file:
scriptPubKey	main.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptSig	main.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scrollToEnd	qt/rpcconsole.cpp	/^void RPCConsole::scrollToEnd()$/;"	f	class:RPCConsole
scrypt_1024_1_1_256	scrypt.c	/^void scrypt_1024_1_1_256(const char *input, char *output)$/;"	f
scrypt_1024_1_1_256_sp	scrypt.c	/^void scrypt_1024_1_1_256_sp(const char *input, char *output, char *scratchpad)$/;"	f
secure_allocator	allocators.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^struct secure_allocator : public std::allocator<T>$/;"	s
selectNewAddress	qt/addressbookpage.cpp	/^void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int end)$/;"	f	class:AddressBookPage
selectionChanged	qt/addressbookpage.cpp	/^void AddressBookPage::selectionChanged()$/;"	f	class:AddressBookPage
sem	sync.h	/^    CSemaphore *sem;$/;"	m	class:CSemaphoreGrant
semOutbound	net.cpp	/^static CSemaphore *semOutbound = NULL;$/;"	v	file:
sendCoins	qt/walletmodel.cpp	/^WalletModel::SendCoinsReturn WalletModel::sendCoins(const QString &txcomment, const QList<SendCoinsRecipient> &recipients)$/;"	f	class:WalletModel
sendCoinsAction	qt/bitcoingui.h	/^    QAction *sendCoinsAction;$/;"	m	class:BitcoinGUI
sendCoinsPage	qt/bitcoingui.h	/^    SendCoinsDialog *sendCoinsPage;$/;"	m	class:BitcoinGUI
sendfrom	bitcoinrpc.cpp	/^Value sendfrom(const Array& params, bool fHelp)$/;"	f
sendmany	bitcoinrpc.cpp	/^Value sendmany(const Array& params, bool fHelp)$/;"	f
sendrawtransaction	rpcrawtransaction.cpp	/^Value sendrawtransaction(const Array& params, bool fHelp)$/;"	f
sendtoaddress	bitcoinrpc.cpp	/^Value sendtoaddress(const Array& params, bool fHelp)$/;"	f
ser_streamplaceholder	serialize.h	/^struct ser_streamplaceholder$/;"	s
set	mruset.h	/^    std::set<T> set;$/;"	m	class:mruset
set	test/mruset_tests.cpp	/^    std::set<int> set;$/;"	m	class:mrutester	file:
setAddrKnown	net.h	/^    std::set<CAddress> setAddrKnown;$/;"	m	class:CNode
setAddress	qt/editaddressdialog.cpp	/^void EditAddressDialog::setAddress(const QString &address)$/;"	f	class:EditAddressDialog
setAddressPrefix	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setAddressPrefix(const QString &addrPrefix)$/;"	f	class:TransactionFilterProxy
setAddress_SM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_SM(QString address)$/;"	f	class:SignVerifyMessageDialog
setAddress_VM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setAddress_VM(QString address)$/;"	f	class:SignVerifyMessageDialog
setBalance	qt/overviewpage.cpp	/^void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)$/;"	f	class:OverviewPage
setBalance	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance)$/;"	f	class:SendCoinsDialog
setBanned	net.cpp	/^std::map<CNetAddr, int64> CNode::setBanned;$/;"	m	class:CNode	file:
setBanned	net.h	/^    static std::map<CNetAddr, int64> setBanned;$/;"	m	class:CNode
setCancel	main.h	/^    std::set<int> setCancel;$/;"	m	class:CUnsignedAlert
setClientModel	qt/bitcoingui.cpp	/^void BitcoinGUI::setClientModel(ClientModel *clientModel)$/;"	f	class:BitcoinGUI
setClientModel	qt/rpcconsole.cpp	/^void RPCConsole::setClientModel(ClientModel *model)$/;"	f	class:RPCConsole
setData	qt/addresstablemodel.cpp	/^bool AddressTableModel::setData(const QModelIndex & index, const QVariant & value, int role)$/;"	f	class:AddressTableModel
setData	qt/optionsmodel.cpp	/^bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)$/;"	f	class:OptionsModel
setDateRange	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setDateRange(const QDateTime &from, const QDateTime &to)$/;"	f	class:TransactionFilterProxy
setDependsOn	main.cpp	/^    set<uint256> setDependsOn;$/;"	m	class:COrphan	file:
setDisplayUnit	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setDisplayUnit(int newUnit)$/;"	f	class:BitcoinAmountField
setEncryptionStatus	qt/bitcoingui.cpp	/^void BitcoinGUI::setEncryptionStatus(int status)$/;"	f	class:BitcoinGUI
setFocus	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setFocus()$/;"	f	class:SendCoinsEntry
setInventoryKnown	net.h	/^    mruset<CInv> setInventoryKnown;$/;"	m	class:CNode
setKeyPool	wallet.h	/^    std::set<int64> setKeyPool;$/;"	m	class:CWallet
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setLimit	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setLimit(int limit)$/;"	f	class:TransactionFilterProxy
setMapper	qt/optionsdialog.cpp	/^void OptionsDialog::setMapper()$/;"	f	class:OptionsDialog
setMinAmount	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setMinAmount(qint64 minimum)$/;"	f	class:TransactionFilterProxy
setMining	qt/bitcoingui.cpp	/^void BitcoinGUI::setMining(bool mining, int hashrate)$/;"	f	class:BitcoinGUI
setMining	qt/clientmodel.cpp	/^void ClientModel::setMining(MiningType type, bool mining, int threads, int hashrate)$/;"	f	class:ClientModel
setMiningDebug	qt/clientmodel.cpp	/^void ClientModel::setMiningDebug(bool debug)$/;"	f	class:ClientModel
setMiningPassword	qt/clientmodel.cpp	/^void ClientModel::setMiningPassword(QString password)$/;"	f	class:ClientModel
setMiningPort	qt/clientmodel.cpp	/^void ClientModel::setMiningPort(QString port)$/;"	f	class:ClientModel
setMiningScanTime	qt/clientmodel.cpp	/^void ClientModel::setMiningScanTime(int scantime)$/;"	f	class:ClientModel
setMiningServer	qt/clientmodel.cpp	/^void ClientModel::setMiningServer(QString server)$/;"	f	class:ClientModel
setMiningUsername	qt/clientmodel.cpp	/^void ClientModel::setMiningUsername(QString username)$/;"	f	class:ClientModel
setModel	qt/aboutdialog.cpp	/^void AboutDialog::setModel(ClientModel *model)$/;"	f	class:AboutDialog
setModel	qt/addressbookpage.cpp	/^void AddressBookPage::setModel(AddressTableModel *model)$/;"	f	class:AddressBookPage
setModel	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::setModel(WalletModel *model)$/;"	f	class:AskPassphraseDialog
setModel	qt/csvmodelwriter.cpp	/^void CSVModelWriter::setModel(const QAbstractItemModel *model)$/;"	f	class:CSVModelWriter
setModel	qt/editaddressdialog.cpp	/^void EditAddressDialog::setModel(AddressTableModel *model)$/;"	f	class:EditAddressDialog
setModel	qt/miningpage.cpp	/^void MiningPage::setModel(ClientModel *model)$/;"	f	class:MiningPage
setModel	qt/optionsdialog.cpp	/^void OptionsDialog::setModel(OptionsModel *model)$/;"	f	class:OptionsDialog
setModel	qt/overviewpage.cpp	/^void OverviewPage::setModel(WalletModel *model)$/;"	f	class:OverviewPage
setModel	qt/qrcodedialog.cpp	/^void QRCodeDialog::setModel(OptionsModel *model)$/;"	f	class:QRCodeDialog
setModel	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::setModel(WalletModel *model)$/;"	f	class:SendCoinsDialog
setModel	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setModel(WalletModel *model)$/;"	f	class:SendCoinsEntry
setModel	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::setModel(WalletModel *model)$/;"	f	class:SignVerifyMessageDialog
setModel	qt/transactionview.cpp	/^void TransactionView::setModel(WalletModel *model)$/;"	f	class:TransactionView
setNumBlocks	qt/bitcoingui.cpp	/^void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)$/;"	f	class:BitcoinGUI
setNumBlocks	qt/rpcconsole.cpp	/^void RPCConsole::setNumBlocks(int count, int countOfPeers)$/;"	f	class:RPCConsole
setNumConnections	qt/bitcoingui.cpp	/^void BitcoinGUI::setNumConnections(int count)$/;"	f	class:BitcoinGUI
setNumConnections	qt/rpcconsole.cpp	/^void RPCConsole::setNumConnections(int count)$/;"	f	class:RPCConsole
setNumTransactions	qt/overviewpage.cpp	/^void OverviewPage::setNumTransactions(int count)$/;"	f	class:OverviewPage
setOptionsModel	qt/addressbookpage.cpp	/^void AddressBookPage::setOptionsModel(OptionsModel *optionsModel)$/;"	f	class:AddressBookPage
setRemoveEnabled	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setRemoveEnabled(bool enabled)$/;"	f	class:SendCoinsEntry
setRole	qt/qvaluecombobox.cpp	/^void QValueComboBox::setRole(int role)$/;"	f	class:QValueComboBox
setSaveButtonState	qt/optionsdialog.cpp	/^void OptionsDialog::setSaveButtonState(bool fState)$/;"	f	class:OptionsDialog
setSubVer	main.h	/^    std::set<std::string> setSubVer;  \/\/ empty matches all$/;"	m	class:CUnsignedAlert
setText	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setText(const QString &text)$/;"	f	class:BitcoinAmountField
setTypeFilter	qt/transactionfilterproxy.cpp	/^void TransactionFilterProxy::setTypeFilter(quint32 modes)$/;"	f	class:TransactionFilterProxy
setValid	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValid(bool valid)$/;"	f	class:BitcoinAmountField
setValid	qt/qvalidatedlineedit.cpp	/^void QValidatedLineEdit::setValid(bool valid)$/;"	f	class:QValidatedLineEdit
setValid	script.cpp	/^    std::set< sigdata_type> setValid;$/;"	m	class:CSignatureCache	file:
setValue	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::setValue(qint64 value)$/;"	f	class:BitcoinAmountField
setValue	qt/qvaluecombobox.cpp	/^void QValueComboBox::setValue(const QVariant &value)$/;"	f	class:QValueComboBox
setValue	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::setValue(const SendCoinsRecipient &value)$/;"	f	class:SendCoinsEntry
setWalletEncrypted	qt/walletmodel.cpp	/^bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphrase)$/;"	f	class:WalletModel
setWalletLocked	qt/walletmodel.cpp	/^bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)$/;"	f	class:WalletModel
setWalletModel	qt/bitcoingui.cpp	/^void BitcoinGUI::setWalletModel(WalletModel *walletModel)$/;"	f	class:BitcoinGUI
setaccount	bitcoinrpc.cpp	/^Value setaccount(const Array& params, bool fHelp)$/;"	f
setgenerate	bitcoinrpc.cpp	/^Value setgenerate(const Array& params, bool fHelp)$/;"	f
setint64	bignum.h	/^    void setint64(int64 sn)$/;"	f	class:CBigNum
setmininput	bitcoinrpc.cpp	/^Value setmininput(const Array& params, bool fHelp)$/;"	f
setpwalletRegistered	main.cpp	/^set<CWallet*> setpwalletRegistered;$/;"	v
setservAddNodeAddresses	net.cpp	/^set<CNetAddr> setservAddNodeAddresses;$/;"	v
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CAutoFile
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CDataStream
settxfee	bitcoinrpc.cpp	/^Value settxfee(const Array& params, bool fHelp)$/;"	f
setuint256	bignum.h	/^    void setuint256(uint256 n)$/;"	f	class:CBigNum
setuint64	bignum.h	/^    void setuint64(uint64 n)$/;"	f	class:CBigNum
setulong	bignum.h	/^    void setulong(unsigned long n)$/;"	f	class:CBigNum
setupAddressWidget	qt/guiutil.cpp	/^void setupAddressWidget(QLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupAmountWidget	qt/guiutil.cpp	/^void setupAmountWidget(QLineEdit *widget, QWidget *parent)$/;"	f	namespace:GUIUtil
setupTabChain	qt/bitcoinamountfield.cpp	/^QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)$/;"	f	class:BitcoinAmountField
setupTabChain	qt/sendcoinsdialog.cpp	/^QWidget *SendCoinsDialog::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsDialog
setupTabChain	qt/sendcoinsentry.cpp	/^QWidget *SendCoinsEntry::setupTabChain(QWidget *prev)$/;"	f	class:SendCoinsEntry
setvch	bignum.h	/^    void setvch(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
showDetails	qt/transactionview.cpp	/^void TransactionView::showDetails()$/;"	f	class:TransactionView
showNormalIfMinimized	qt/bitcoingui.cpp	/^void BitcoinGUI::showNormalIfMinimized(bool fToggleHidden)$/;"	f	class:BitcoinGUI
showOrPrint	qt/guiutil.cpp	/^void HelpMessageBox::showOrPrint()$/;"	f	class:GUIUtil::HelpMessageBox
showOutOfSyncWarning	qt/overviewpage.cpp	/^void OverviewPage::showOutOfSyncWarning(bool fShow)$/;"	f	class:OverviewPage
showRestartWarning_Lang	qt/optionsdialog.cpp	/^void OptionsDialog::showRestartWarning_Lang()$/;"	f	class:OptionsDialog
showRestartWarning_Proxy	qt/optionsdialog.cpp	/^void OptionsDialog::showRestartWarning_Proxy()$/;"	f	class:OptionsDialog
showTab_SM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_SM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTab_VM	qt/signverifymessagedialog.cpp	/^void SignVerifyMessageDialog::showTab_VM(bool fShow)$/;"	f	class:SignVerifyMessageDialog
showTransaction	qt/transactionrecord.cpp	/^bool TransactionRecord::showTransaction(const CWalletTx &wtx)$/;"	f	class:TransactionRecord
sigdata_type	script.cpp	/^    typedef boost::tuple<uint256, std::vector<unsigned char>, std::vector<unsigned char> > sigdata_type;$/;"	t	class:CSignatureCache	file:
signMessageAction	qt/bitcoingui.h	/^    QAction *signMessageAction;$/;"	m	class:BitcoinGUI
signVerifyMessageDialog	qt/bitcoingui.h	/^    SignVerifyMessageDialog *signVerifyMessageDialog;$/;"	m	class:BitcoinGUI
sign_multisig	test/multisig_tests.cpp	/^sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, CKey key, CTransaction transaction)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)$/;"	f
signmessage	bitcoinrpc.cpp	/^Value signmessage(const Array& params, bool fHelp)$/;"	f
signrawtransaction	rpcrawtransaction.cpp	/^Value signrawtransaction(const Array& params, bool fHelp)$/;"	f
size	addrman.h	/^    int size()$/;"	f	class:CAddrMan
size	main.h	/^    unsigned long size()$/;"	f	class:CTxMemPool
size	mruset.h	/^    size_type size() const { return set.size(); }$/;"	f	class:mruset
size	qt/addresstablemodel.cpp	/^    int size()$/;"	f	class:AddressTablePriv
size	qt/transactiontablemodel.cpp	/^    int size()$/;"	f	class:TransactionTablePriv
size	serialize.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	test/base58_tests.cpp	/^    int size;$/;"	m	struct:__anon11	file:
size	test/mruset_tests.cpp	/^    int size() const { return set.size(); }$/;"	f	class:mrutester
size	uint256.h	/^    unsigned int size()$/;"	f	class:base_uint
size	util.h	/^    int size() const$/;"	f	class:CMedianFilter
sizeHint	qt/overviewpage.cpp	/^    inline QSize sizeHint(const QStyleOptionViewItem &option, const QModelIndex &index) const$/;"	f	class:TxViewDelegate
size_threshold	qt/guiutil.h	/^        int size_threshold;$/;"	m	class:GUIUtil::ToolTipToRichTextFilter
size_type	allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
size_type	mruset.h	/^    typedef typename std::set<T>::size_type size_type;$/;"	t	class:mruset
size_type	serialize.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
skipspaces	util.h	/^void skipspaces(T& it)$/;"	f
socklen_t	compat.h	/^typedef int socklen_t;$/;"	t
sortKey	qt/transactionrecord.h	/^    std::string sortKey;$/;"	m	class:TransactionStatus
sorted	util.h	/^    std::vector<T> sorted () const$/;"	f	class:CMedianFilter
source	addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
source	qt/rpcconsole.cpp	/^    const char *source;$/;"	m	struct:__anon8	file:
sourceFile	sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
space	json/json_spirit_writer_template.h	/^        void space()$/;"	f	class:json_spirit::Generator
spirit_namespace	json/json_spirit_reader_template.h	24;"	d
spirit_namespace	json/json_spirit_reader_template.h	31;"	d
splashref	qt/bitcoin.cpp	/^static QSplashScreen *splashref;$/;"	v	file:
sslStream	bitcoinrpc.cpp	/^    asio::ssl::stream<typename Protocol::socket> sslStream;$/;"	m	class:AcceptedConnectionImpl	file:
stack_	json/json_spirit_reader_template.h	/^        std::vector< Value_type* > stack_;   \/\/ previous child objects and arrays$/;"	m	class:json_spirit::Semantic_actions
stacktop	script.cpp	73;"	d	file:
start	json/json_spirit_reader_template.h	/^            const spirit_namespace::rule< ScannerT >& start() const { return json_; }$/;"	f	class:json_spirit::Json_grammer::definition
start	qt/rpcconsole.cpp	/^void RPCExecutor::start()$/;"	f	class:RPCExecutor
startExecutor	qt/rpcconsole.cpp	/^void RPCConsole::startExecutor()$/;"	f	class:RPCConsole
startPoolMining	qt/miningpage.cpp	/^void MiningPage::startPoolMining()$/;"	f	class:MiningPage
startPressed	qt/miningpage.cpp	/^void MiningPage::startPressed()$/;"	f	class:MiningPage
state	serialize.h	/^    short state;$/;"	m	class:CAutoFile
state	serialize.h	/^    short state;$/;"	m	class:CDataStream
status	qt/transactionrecord.h	/^    Status status;$/;"	m	class:TransactionStatus
status	qt/transactionrecord.h	/^    TransactionStatus status;$/;"	m	class:TransactionRecord
status	qt/walletmodel.h	/^        StatusCode status;$/;"	m	struct:WalletModel::SendCoinsReturn
statusUpdateNeeded	qt/transactionrecord.cpp	/^bool TransactionRecord::statusUpdateNeeded()$/;"	f	class:TransactionRecord
stop	bitcoinrpc.cpp	/^Value stop(const Array& params, bool fHelp)$/;"	f
stopPoolMining	qt/miningpage.cpp	/^void MiningPage::stopPoolMining()$/;"	f	class:MiningPage
str	serialize.h	/^    std::string str() const$/;"	f	class:CDataStream
strAccount	wallet.h	/^    std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	main.h	/^    std::string strComment;$/;"	m	class:CUnsignedAlert
strComment	wallet.h	/^    std::string strComment;$/;"	m	class:CAccountingEntry
strComment	wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDNSSeed	net.cpp	/^static const char *strDNSSeed[][2] = {$/;"	v	file:
strFile	db.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	wallet.h	/^    std::string strFromAccount;$/;"	m	class:CWalletTx
strMessageMagic	main.cpp	/^const string strMessageMagic = "MovieCoin Signed Message:\\n";$/;"	v
strMethod	bitcoinrpc.cpp	/^    string strMethod;$/;"	m	class:JSONRequest	file:
strMiscWarning	util.cpp	/^string strMiscWarning;$/;"	v
strOtherAccount	wallet.h	/^    std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strRPCUserColonPass	bitcoinrpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strReserved	main.h	/^    std::string strReserved;$/;"	m	class:CUnsignedAlert
strStatusBar	main.h	/^    std::string strStatusBar;$/;"	m	class:CUnsignedAlert
strSubVer	net.h	/^    std::string strSubVer;$/;"	m	class:CNode
strSubVer	net.h	/^    std::string strSubVer;$/;"	m	class:CNodeStats
strTxComment	main.h	/^	std::string strTxComment;$/;"	m	class:CTransaction
strWalletFile	wallet.h	/^    std::string strWalletFile;$/;"	m	class:CWallet
str_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
stream	bitcoinrpc.cpp	/^    asio::ssl::stream<typename Protocol::socket>& stream;$/;"	m	class:SSLIOStreamDevice	file:
stream	bitcoinrpc.cpp	/^    virtual std::iostream& stream()$/;"	f	class:AcceptedConnectionImpl
stride	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
string_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
strlcat	strlcpy.h	/^inline size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	strlcpy.h	/^inline size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strlwr	util.h	87;"	d
strprintf	util.h	133;"	d
submitblock	bitcoinrpc.cpp	/^Value submitblock(const Array& params, bool fHelp)$/;"	f
subscribeToCoreSignals	qt/clientmodel.cpp	/^void ClientModel::subscribeToCoreSignals()$/;"	f	class:ClientModel
subscribeToCoreSignals	qt/walletmodel.cpp	/^void WalletModel::subscribeToCoreSignals()$/;"	f	class:WalletModel
substitute_esc_chars	json/json_spirit_reader_template.h	/^    String_type substitute_esc_chars( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
syncIconMovie	qt/bitcoingui.h	/^    QMovie *syncIconMovie;$/;"	m	class:BitcoinGUI
tab	qt/addressbookpage.h	/^    Tabs tab;$/;"	m	class:AddressBookPage
tableRPC	bitcoinrpc.cpp	/^const CRPCTable tableRPC;$/;"	v
tallyitem	bitcoinrpc.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	bitcoinrpc.cpp	/^struct tallyitem$/;"	s	file:
text	qt/bitcoinamountfield.cpp	/^QString BitcoinAmountField::text() const$/;"	f	class:BitcoinAmountField
textChanged	qt/askpassphrasedialog.cpp	/^void AskPassphraseDialog::textChanged()$/;"	f	class:AskPassphraseDialog
threadId	net.h	/^enum threadId$/;"	g
threadSpeed	qt/miningpage.h	/^    QMap<int, double> threadSpeed;$/;"	m	class:MiningPage
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( Iter_type i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( spirit_namespace::position_iterator< Iter_type > i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_not_array	json/json_spirit_reader_template.h	/^        static void throw_not_array( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_colon	json/json_spirit_reader_template.h	/^        static void throw_not_colon( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_object	json/json_spirit_reader_template.h	/^        static void throw_not_object( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_pair	json/json_spirit_reader_template.h	/^        static void throw_not_pair( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_string	json/json_spirit_reader_template.h	/^        static void throw_not_string( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_value	json/json_spirit_reader_template.h	/^        static void throw_not_value( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
time	qt/transactionrecord.h	/^    int64 time;$/;"	m	class:TransactionRecord
title	qt/csvmodelwriter.h	/^        QString title;$/;"	m	struct:CSVModelWriter::Column
toHTML	qt/transactiondesc.cpp	/^QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)$/;"	f	class:TransactionDesc
toVariant	qt/notificator.cpp	/^QVariant FreedesktopImage::toVariant(const QImage &img)$/;"	f	class:FreedesktopImage
to_hex_char	json/json_spirit_writer_template.h	/^    inline char to_hex_char( unsigned int c )$/;"	f	namespace:json_spirit
to_str	json/json_spirit_value.h	/^    String_type to_str( const char* c_str )$/;"	f	namespace:json_spirit
toggleHidden	qt/bitcoingui.cpp	/^void BitcoinGUI::toggleHidden()$/;"	f	class:BitcoinGUI
toggleHideAction	qt/bitcoingui.h	/^    QAction *toggleHideAction;$/;"	m	class:BitcoinGUI
transactionProxyModel	qt/transactionview.h	/^    TransactionFilterProxy *transactionProxyModel;$/;"	m	class:TransactionView
transactionTableModel	qt/walletmodel.h	/^    TransactionTableModel *transactionTableModel;$/;"	m	class:WalletModel
transactionView	qt/bitcoingui.h	/^    TransactionView *transactionView;$/;"	m	class:BitcoinGUI
transactionView	qt/transactionview.h	/^    QTableView *transactionView;$/;"	m	class:TransactionView
transactionsPage	qt/bitcoingui.h	/^    QWidget *transactionsPage;$/;"	m	class:BitcoinGUI
trayIcon	qt/bitcoingui.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:BitcoinGUI
trayIcon	qt/notificator.h	/^    QSystemTrayIcon *trayIcon;$/;"	m	class:Notificator
trayIconActivated	qt/bitcoingui.cpp	/^void BitcoinGUI::trayIconActivated(QSystemTrayIcon::ActivationReason reason)$/;"	f	class:BitcoinGUI
try_wait	sync.h	/^    bool try_wait() {$/;"	f	class:CSemaphore
tx	wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txAddressDecoration	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txStatusDecoration	qt/transactiontablemodel.cpp	/^QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx) const$/;"	f	class:TransactionTableModel
txdelegate	qt/overviewpage.h	/^    TxViewDelegate *txdelegate;$/;"	m	class:OverviewPage
txnouttype	script.h	/^enum txnouttype$/;"	g
type	json/json_spirit_value.h	/^    Value_type Value_impl< Config >::type() const$/;"	f	class:json_spirit::Value_impl
type	protocol.h	/^        int type;$/;"	m	class:CInv
type	qt/addresstablemodel.cpp	/^    Type type;$/;"	m	struct:AddressTableEntry	file:
type	qt/transactionrecord.h	/^    Type type;$/;"	m	class:TransactionRecord
typeChanged	qt/miningpage.cpp	/^void MiningPage::typeChanged(int index)$/;"	f	class:MiningPage
typeFilter	qt/transactionfilterproxy.h	/^    quint32 typeFilter;$/;"	m	class:TransactionFilterProxy
typeWidget	qt/transactionview.h	/^    QComboBox *typeWidget;$/;"	m	class:TransactionView
type_	json/json_spirit_value.h	/^        Value_type type_;$/;"	m	class:json_spirit::Value_impl
uBTC	qt/bitcoinunits.h	/^        uBTC$/;"	e	enum:BitcoinUnits::Unit
ui	qt/aboutdialog.h	/^    Ui::AboutDialog *ui;$/;"	m	class:AboutDialog
ui	qt/addressbookpage.h	/^    Ui::AddressBookPage *ui;$/;"	m	class:AddressBookPage
ui	qt/askpassphrasedialog.h	/^    Ui::AskPassphraseDialog *ui;$/;"	m	class:AskPassphraseDialog
ui	qt/editaddressdialog.h	/^    Ui::EditAddressDialog *ui;$/;"	m	class:EditAddressDialog
ui	qt/miningpage.h	/^    Ui::MiningPage *ui;$/;"	m	class:MiningPage
ui	qt/optionsdialog.h	/^    Ui::OptionsDialog *ui;$/;"	m	class:OptionsDialog
ui	qt/overviewpage.h	/^    Ui::OverviewPage *ui;$/;"	m	class:OverviewPage
ui	qt/qrcodedialog.h	/^    Ui::QRCodeDialog *ui;$/;"	m	class:QRCodeDialog
ui	qt/rpcconsole.h	/^    Ui::RPCConsole *ui;$/;"	m	class:RPCConsole
ui	qt/sendcoinsdialog.h	/^    Ui::SendCoinsDialog *ui;$/;"	m	class:SendCoinsDialog
ui	qt/sendcoinsentry.h	/^    Ui::SendCoinsEntry *ui;$/;"	m	class:SendCoinsEntry
ui	qt/signverifymessagedialog.h	/^    Ui::SignVerifyMessageDialog *ui;$/;"	m	class:SignVerifyMessageDialog
ui	qt/transactiondescdialog.h	/^    Ui::TransactionDescDialog *ui;$/;"	m	class:TransactionDescDialog
uiInterface	init.cpp	/^CClientUIInterface uiInterface;$/;"	v
uiInterface	test/test_bitcoin.cpp	/^CClientUIInterface uiInterface;$/;"	v
uiOptions	qt/guiutil.h	/^        QString uiOptions;$/;"	m	class:GUIUtil::HelpMessageBox
uint160	uint256.h	/^    explicit uint160(const std::string& str)$/;"	f	class:uint160
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160()$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const basetype& b)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(uint64 b)$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_uint160$/;"	c
uint256	uint256.h	/^    explicit uint256(const std::string& str)$/;"	f	class:uint256
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256()$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const basetype& b)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(uint64 b)$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_uint256$/;"	c
uint64	serialize.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	uint256.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	util.h	/^typedef unsigned long long  uint64;$/;"	t
uint64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::uint_parser< boost::uint64_t > uint64_p = spirit_namespace::uint_parser< boost::uint64_t >();$/;"	m	namespace:json_spirit
unicode_str_to_char	json/json_spirit_reader_template.h	/^    Char_type unicode_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
unit	qt/bitcoinamountfield.h	/^    QValueComboBox *unit;$/;"	m	class:BitcoinAmountField
unit	qt/overviewpage.cpp	/^    int unit;$/;"	m	class:TxViewDelegate	file:
unitChanged	qt/bitcoinamountfield.cpp	/^void BitcoinAmountField::unitChanged(int idx)$/;"	f	class:BitcoinAmountField
unitlist	qt/bitcoinunits.h	/^    QList<BitcoinUnits::Unit> unitlist;$/;"	m	class:BitcoinUnits
unlink	util.h	84;"	d
unlockWallet	qt/bitcoingui.cpp	/^void BitcoinGUI::unlockWallet()$/;"	f	class:BitcoinGUI
unsubscribeFromCoreSignals	qt/clientmodel.cpp	/^void ClientModel::unsubscribeFromCoreSignals()$/;"	f	class:ClientModel
unsubscribeFromCoreSignals	qt/walletmodel.cpp	/^void WalletModel::unsubscribeFromCoreSignals()$/;"	f	class:WalletModel
updateAddressBook	qt/walletmodel.cpp	/^void WalletModel::updateAddressBook(const QString &address, const QString &label, bool isMine, int status)$/;"	f	class:WalletModel
updateAlert	qt/clientmodel.cpp	/^void ClientModel::updateAlert(const QString &hash, int status)$/;"	f	class:ClientModel
updateConfirmations	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateConfirmations()$/;"	f	class:TransactionTableModel
updateDisplayUnit	qt/optionsdialog.cpp	/^void OptionsDialog::updateDisplayUnit()$/;"	f	class:OptionsDialog
updateDisplayUnit	qt/overviewpage.cpp	/^void OverviewPage::updateDisplayUnit()$/;"	f	class:OverviewPage
updateDisplayUnit	qt/qrcodedialog.cpp	/^void QRCodeDialog::updateDisplayUnit()$/;"	f	class:QRCodeDialog
updateDisplayUnit	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateDisplayUnit()$/;"	f	class:SendCoinsDialog
updateDisplayUnit	qt/sendcoinsentry.cpp	/^void SendCoinsEntry::updateDisplayUnit()$/;"	f	class:SendCoinsEntry
updateDisplayUnit	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateDisplayUnit()$/;"	f	class:TransactionTableModel
updateEntry	qt/addresstablemodel.cpp	/^    void updateEntry(const QString &address, const QString &label, bool isMine, int status)$/;"	f	class:AddressTablePriv
updateEntry	qt/addresstablemodel.cpp	/^void AddressTableModel::updateEntry(const QString &address, const QString &label, bool isMine, int status)$/;"	f	class:AddressTableModel
updateNumConnections	qt/clientmodel.cpp	/^void ClientModel::updateNumConnections(int numConnections)$/;"	f	class:ClientModel
updateRemoveEnabled	qt/sendcoinsdialog.cpp	/^void SendCoinsDialog::updateRemoveEnabled()$/;"	f	class:SendCoinsDialog
updateSpeed	qt/miningpage.cpp	/^void MiningPage::updateSpeed()$/;"	f	class:MiningPage
updateStatus	qt/transactionrecord.cpp	/^void TransactionRecord::updateStatus(const CWalletTx &wtx)$/;"	f	class:TransactionRecord
updateStatus	qt/walletmodel.cpp	/^void WalletModel::updateStatus()$/;"	f	class:WalletModel
updateTimer	qt/clientmodel.cpp	/^void ClientModel::updateTimer()$/;"	f	class:ClientModel
updateTransaction	qt/transactiontablemodel.cpp	/^void TransactionTableModel::updateTransaction(const QString &hash, int status)$/;"	f	class:TransactionTableModel
updateTransaction	qt/walletmodel.cpp	/^void WalletModel::updateTransaction(const QString &hash, int status)$/;"	f	class:WalletModel
updateWallet	qt/transactiontablemodel.cpp	/^    void updateWallet(const uint256 &hash, int status)$/;"	f	class:TransactionTablePriv
uriTests	qt/test/uritests.cpp	/^void URITests::uriTests()$/;"	f	class:URITests
url	qt/rpcconsole.cpp	/^    const char *url;$/;"	m	struct:__anon8	file:
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vCoins	test/wallet_tests.cpp	/^static vector<COutput> vCoins;$/;"	v	file:
vHave	main.h	/^    std::vector<uint256> vHave;$/;"	m	class:CBlockLocator
vInventoryToSend	net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vMasterKey	keystore.h	/^    CKeyingMaterial vMasterKey;$/;"	m	class:CCryptoKeyStore
vMerkleBranch	main.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vMerkleTree	main.h	/^    mutable std::vector<uint256> vMerkleTree;$/;"	m	class:CBlock
vNodes	net.cpp	/^vector<CNode*> vNodes;$/;"	v
vOneShots	net.cpp	/^static deque<string> vOneShots;$/;"	v	file:
vOrderForm	wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRPCCommands	bitcoinrpc.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRandom	addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vRecv	net.h	/^    CDataStream vRecv;$/;"	m	class:CNode
vRelayExpiration	net.cpp	/^deque<pair<int64, CInv> > vRelayExpiration;$/;"	v
vSend	net.h	/^    CDataStream vSend;$/;"	m	class:CNode
vSorted	util.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vSpent	main.h	/^    std::vector<CDiskTxPos> vSpent;$/;"	m	class:CTxIndex
vValues	util.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
v_	json/json_spirit_value.h	/^        Variant v_;$/;"	m	class:json_spirit::Value_impl
valid	qt/bitcoinunits.cpp	/^bool BitcoinUnits::valid(int unit)$/;"	f	class:BitcoinUnits
valid	qt/qvalidatedlineedit.h	/^    bool valid;$/;"	m	class:QValidatedLineEdit
valid	qt/walletmodel.h	/^        bool valid;$/;"	m	class:WalletModel::UnlockContext
validate	qt/bitcoinaddressvalidator.cpp	/^QValidator::State BitcoinAddressValidator::validate(QString &input, int &pos) const$/;"	f	class:BitcoinAddressValidator
validate	qt/bitcoinamountfield.cpp	/^bool BitcoinAmountField::validate()$/;"	f	class:BitcoinAmountField
validate	qt/sendcoinsentry.cpp	/^bool SendCoinsEntry::validate()$/;"	f	class:SendCoinsEntry
validateAddress	qt/walletmodel.cpp	/^bool WalletModel::validateAddress(const QString &address)$/;"	f	class:WalletModel
validateaddress	bitcoinrpc.cpp	/^Value validateaddress(const Array& params, bool fHelp)$/;"	f
valtype	script.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	test/multisig_tests.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value	qt/bitcoinamountfield.cpp	/^qint64 BitcoinAmountField::value(bool *valid_out) const$/;"	f	class:BitcoinAmountField
value	qt/qvaluecombobox.cpp	/^QVariant QValueComboBox::value() const$/;"	f	class:QValueComboBox
value	sync.h	/^    int value;$/;"	m	class:CSemaphore
value_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
value_	json/json_spirit_reader_template.h	/^        Value_type& value_;             \/\/ this is the object or array that is being created$/;"	m	class:json_spirit::Semantic_actions
value_	json/json_spirit_value.h	/^        Value_type value_;$/;"	m	struct:json_spirit::Pair_impl
value_type	allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
value_type	mruset.h	/^    typedef T value_type;$/;"	t	class:mruset
value_type	serialize.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
vch	serialize.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchCryptedKey	crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	base58.h	/^    std::vector<unsigned char> vchData;$/;"	m	class:CBase58Data
vchDefaultKey	wallet.h	/^    CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchMsg	main.h	/^    std::vector<unsigned char> vchMsg;$/;"	m	class:CAlert
vchOtherDerivationParameters	crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	key.h	/^    std::vector<unsigned char> vchPubKey;$/;"	m	class:CPubKey
vchPubKey	wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CAccount
vchPubKey	wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchSig	main.h	/^    std::vector<unsigned char> vchSig;$/;"	m	class:CAlert
vector_type	serialize.h	/^    typedef std::vector<char, zero_after_free_allocator<char> > vector_type;$/;"	t	class:CDataStream
verifyMessageAction	qt/bitcoingui.h	/^    QAction *verifyMessageAction;$/;"	m	class:BitcoinGUI
verifymessage	bitcoinrpc.cpp	/^Value verifymessage(const Array& params, bool fHelp)$/;"	f
vfLimited	net.cpp	/^static bool vfLimited[NET_MAX] = {};$/;"	v	file:
vfReachable	net.cpp	/^static bool vfReachable[NET_MAX] = {};$/;"	v	file:
vfSpent	wallet.h	/^    std::vector<char> vfSpent; \/\/ which outputs are already spent$/;"	m	class:CWalletTx
vhListenSocket	net.cpp	/^static std::vector<SOCKET> vhListenSocket;$/;"	v	file:
vin	main.h	/^    std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vnThreadsRunning	net.cpp	/^array<int, THREAD_MAX> vnThreadsRunning;$/;"	v
vout	main.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vstrIn	test/base58_tests.cpp	/^} vstrIn[] = {$/;"	v	typeref:struct:__anon11	file:
vstrOut	test/base58_tests.cpp	/^const char *vstrOut[] = {$/;"	v
vstrprintf	util.cpp	/^string vstrprintf(const std::string &format, va_list ap)$/;"	f
vtx	main.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxPrev	wallet.h	/^    std::vector<CMerkleTx> vtxPrev;$/;"	m	class:CWalletTx
vvNew	addrman.h	/^    std::vector<std::set<int> > vvNew;$/;"	m	class:CAddrMan
vvTried	addrman.h	/^    std::vector<std::vector<int> > vvTried;$/;"	m	class:CAddrMan
wArray	json/json_spirit_value.h	/^    typedef wConfig::Array_type  wArray;$/;"	t	namespace:json_spirit
wConfig	json/json_spirit_value.h	/^    typedef Config_vector< std::wstring > wConfig;$/;"	t	namespace:json_spirit
wMapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::wstring, wValue > wMapped_obj;$/;"	t	namespace:json_spirit
wObject	json/json_spirit_value.h	/^    typedef wConfig::Object_type wObject;$/;"	t	namespace:json_spirit
wPair	json/json_spirit_value.h	/^    typedef wConfig::Pair_type   wPair;$/;"	t	namespace:json_spirit
wValue	json/json_spirit_value.h	/^    typedef wConfig::Value_type  wValue;$/;"	t	namespace:json_spirit
wait	sync.h	/^    void wait() {$/;"	f	class:CSemaphore
wallet	qt/addresstablemodel.cpp	/^    CWallet *wallet;$/;"	m	class:AddressTablePriv	file:
wallet	qt/addresstablemodel.h	/^    CWallet *wallet;$/;"	m	class:AddressTableModel
wallet	qt/transactiontablemodel.cpp	/^    CWallet *wallet;$/;"	m	class:TransactionTablePriv	file:
wallet	qt/transactiontablemodel.h	/^    CWallet* wallet;$/;"	m	class:TransactionTableModel
wallet	qt/walletmodel.h	/^        WalletModel *wallet;$/;"	m	class:WalletModel::UnlockContext
wallet	qt/walletmodel.h	/^    CWallet *wallet;$/;"	m	class:WalletModel
wallet	test/wallet_tests.cpp	/^static CWallet wallet;$/;"	v	file:
walletModel	qt/addresstablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:AddressTableModel
walletModel	qt/bitcoingui.h	/^    WalletModel *walletModel;$/;"	m	class:BitcoinGUI
walletModel	qt/transactiontablemodel.h	/^    WalletModel *walletModel;$/;"	m	class:TransactionTableModel
walletlock	bitcoinrpc.cpp	/^Value walletlock(const Array& params, bool fHelp)$/;"	f
walletpassphrase	bitcoinrpc.cpp	/^Value walletpassphrase(const Array& params, bool fHelp)$/;"	f
walletpassphrasechange	bitcoinrpc.cpp	/^Value walletpassphrasechange(const Array& params, bool fHelp)$/;"	f
width	qt/notificator.cpp	/^    int width, height, stride;$/;"	m	class:FreedesktopImage	file:
wmArray	json/json_spirit_value.h	/^    typedef wmConfig::Array_type  wmArray;$/;"	t	namespace:json_spirit
wmConfig	json/json_spirit_value.h	/^    typedef Config_map< std::wstring > wmConfig;$/;"	t	namespace:json_spirit
wmObject	json/json_spirit_value.h	/^    typedef wmConfig::Object_type wmObject;$/;"	t	namespace:json_spirit
wmValue	json/json_spirit_value.h	/^    typedef wmConfig::Value_type  wmValue;$/;"	t	namespace:json_spirit
write	bitcoinrpc.cpp	/^    std::streamsize write(const char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const Value& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const mValue& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wmValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	qt/csvmodelwriter.cpp	/^bool CSVModelWriter::write()$/;"	f	class:CSVModelWriter
write	serialize.h	/^    CAutoFile& write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	serialize.h	/^    CDataStream& write(const char* pch, int nSize)$/;"	f	class:CDataStream
write	util.h	/^    CHashWriter& write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
writeNewline	qt/csvmodelwriter.cpp	/^static void writeNewline(QTextStream &f)$/;"	f	file:
writeSep	qt/csvmodelwriter.cpp	/^static void writeSep(QTextStream &f)$/;"	f	file:
writeValue	qt/csvmodelwriter.cpp	/^static void writeValue(QTextStream &f, const QString &value)$/;"	f	file:
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const Value& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const mValue& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wmValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_stream	json/json_spirit_writer_template.h	/^    void write_stream( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	namespace:json_spirit
write_string	json/json_spirit_writer_template.h	/^    typename Value_type::String_type write_string( const Value_type& value, bool pretty )$/;"	f	namespace:json_spirit
xor_salsa8	scrypt.c	/^static inline void xor_salsa8(uint32_t B[16], const uint32_t Bx[16])$/;"	f	file:
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^struct zero_after_free_allocator : public std::allocator<T>$/;"	s
~AboutDialog	qt/aboutdialog.cpp	/^AboutDialog::~AboutDialog()$/;"	f	class:AboutDialog
~AcceptedConnection	bitcoinrpc.cpp	/^    virtual ~AcceptedConnection() {}$/;"	f	class:AcceptedConnection
~AddressBookPage	qt/addressbookpage.cpp	/^AddressBookPage::~AddressBookPage()$/;"	f	class:AddressBookPage
~AddressTableModel	qt/addresstablemodel.cpp	/^AddressTableModel::~AddressTableModel()$/;"	f	class:AddressTableModel
~AskPassphraseDialog	qt/askpassphrasedialog.cpp	/^AskPassphraseDialog::~AskPassphraseDialog()$/;"	f	class:AskPassphraseDialog
~BitcoinGUI	qt/bitcoingui.cpp	/^BitcoinGUI::~BitcoinGUI()$/;"	f	class:BitcoinGUI
~CAutoBN_CTX	bignum.h	/^    ~CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
~CAutoFile	serialize.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBase58Data	base58.h	/^    ~CBase58Data()$/;"	f	class:CBase58Data
~CBigNum	bignum.h	/^    ~CBigNum()$/;"	f	class:CBigNum
~CCrypter	crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	db.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	db.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	key.cpp	/^CKey::~CKey()$/;"	f	class:CKey
~CKeyStore	keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CMutexLock	sync.h	/^    ~CMutexLock()$/;"	f	class:CMutexLock
~CNetCleanup	net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNode	net.h	/^    ~CNode()$/;"	f	class:CNode
~CReserveKey	wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CSemaphoreGrant	sync.h	/^    ~CSemaphoreGrant() {$/;"	f	class:CSemaphoreGrant
~ClientModel	qt/clientmodel.cpp	/^ClientModel::~ClientModel()$/;"	f	class:ClientModel
~EditAddressDialog	qt/editaddressdialog.cpp	/^EditAddressDialog::~EditAddressDialog()$/;"	f	class:EditAddressDialog
~MiningPage	qt/miningpage.cpp	/^MiningPage::~MiningPage()$/;"	f	class:MiningPage
~Notificator	qt/notificator.cpp	/^Notificator::~Notificator()$/;"	f	class:Notificator
~OptionsDialog	qt/optionsdialog.cpp	/^OptionsDialog::~OptionsDialog()$/;"	f	class:OptionsDialog
~OverviewPage	qt/overviewpage.cpp	/^OverviewPage::~OverviewPage()$/;"	f	class:OverviewPage
~QRCodeDialog	qt/qrcodedialog.cpp	/^QRCodeDialog::~QRCodeDialog()$/;"	f	class:QRCodeDialog
~RPCConsole	qt/rpcconsole.cpp	/^RPCConsole::~RPCConsole()$/;"	f	class:RPCConsole
~SendCoinsDialog	qt/sendcoinsdialog.cpp	/^SendCoinsDialog::~SendCoinsDialog()$/;"	f	class:SendCoinsDialog
~SendCoinsEntry	qt/sendcoinsentry.cpp	/^SendCoinsEntry::~SendCoinsEntry()$/;"	f	class:SendCoinsEntry
~SignVerifyMessageDialog	qt/signverifymessagedialog.cpp	/^SignVerifyMessageDialog::~SignVerifyMessageDialog()$/;"	f	class:SignVerifyMessageDialog
~TestNetFixture	test/rpc_tests.cpp	/^    ~TestNetFixture() { fTestNet = false; }$/;"	f	struct:TestNetFixture
~TestingSetup	test/test_bitcoin.cpp	/^    ~TestingSetup()$/;"	f	struct:TestingSetup
~TransactionDescDialog	qt/transactiondescdialog.cpp	/^TransactionDescDialog::~TransactionDescDialog()$/;"	f	class:TransactionDescDialog
~TransactionTableModel	qt/transactiontablemodel.cpp	/^TransactionTableModel::~TransactionTableModel()$/;"	f	class:TransactionTableModel
~UnlockContext	qt/walletmodel.cpp	/^WalletModel::UnlockContext::~UnlockContext()$/;"	f	class:WalletModel::UnlockContext
~WalletModel	qt/walletmodel.cpp	/^WalletModel::~WalletModel()$/;"	f	class:WalletModel
~secure_allocator	allocators.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~zero_after_free_allocator	allocators.h	/^    ~zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
